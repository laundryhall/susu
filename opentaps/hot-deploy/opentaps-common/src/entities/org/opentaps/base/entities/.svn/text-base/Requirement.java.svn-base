package org.opentaps.base.entities;

/*
 * Copyright (c) Open Source Strategies, Inc.
 *
 * Opentaps is free software: you can redistribute it and/or modify it
 * under the terms of the GNU Affero General Public License as published
 * by the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Opentaps is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with Opentaps.  If not, see <http://www.gnu.org/licenses/>.
 */

// DO NOT EDIT THIS FILE!  THIS IS AUTO GENERATED AND WILL GET WRITTEN OVER PERIODICALLY WHEN THE DATA MODEL CHANGES
// EXTEND THIS CLASS INSTEAD.

import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;

import javolution.util.FastMap;

import org.opentaps.foundation.entity.Entity;
import org.opentaps.foundation.entity.EntityFieldInterface;
import org.opentaps.foundation.repository.RepositoryException;
import org.opentaps.foundation.repository.RepositoryInterface;
import javax.persistence.*;
import org.hibernate.search.annotations.*;
import java.lang.String;
import java.math.BigDecimal;
import java.sql.Timestamp;

/**
 * Auto generated base entity Requirement.
 */
@javax.persistence.Entity
@Table(name="REQUIREMENT")
public class Requirement extends Entity {
static {
java.util.Map<String, String> fields = new java.util.HashMap<String, String>();
        fields.put("requirementId", "REQUIREMENT_ID");
        fields.put("requirementTypeId", "REQUIREMENT_TYPE_ID");
        fields.put("facilityId", "FACILITY_ID");
        fields.put("deliverableId", "DELIVERABLE_ID");
        fields.put("fixedAssetId", "FIXED_ASSET_ID");
        fields.put("productId", "PRODUCT_ID");
        fields.put("statusId", "STATUS_ID");
        fields.put("description", "DESCRIPTION");
        fields.put("requirementStartDate", "REQUIREMENT_START_DATE");
        fields.put("requiredByDate", "REQUIRED_BY_DATE");
        fields.put("estimatedBudget", "ESTIMATED_BUDGET");
        fields.put("quantity", "QUANTITY");
        fields.put("useCase", "USE_CASE");
        fields.put("reason", "REASON");
        fields.put("createdDate", "CREATED_DATE");
        fields.put("createdByUserLogin", "CREATED_BY_USER_LOGIN");
        fields.put("lastModifiedDate", "LAST_MODIFIED_DATE");
        fields.put("lastModifiedByUserLogin", "LAST_MODIFIED_BY_USER_LOGIN");
        fields.put("lastUpdatedStamp", "LAST_UPDATED_STAMP");
        fields.put("lastUpdatedTxStamp", "LAST_UPDATED_TX_STAMP");
        fields.put("createdStamp", "CREATED_STAMP");
        fields.put("createdTxStamp", "CREATED_TX_STAMP");
        fields.put("orderItemTypeId", "ORDER_ITEM_TYPE_ID");
        fields.put("facilityIdTo", "FACILITY_ID_TO");
fieldMapColumns.put("Requirement", fields);
}
  public static enum Fields implements EntityFieldInterface<Requirement> {
    requirementId("requirementId"),
    requirementTypeId("requirementTypeId"),
    facilityId("facilityId"),
    deliverableId("deliverableId"),
    fixedAssetId("fixedAssetId"),
    productId("productId"),
    statusId("statusId"),
    description("description"),
    requirementStartDate("requirementStartDate"),
    requiredByDate("requiredByDate"),
    estimatedBudget("estimatedBudget"),
    quantity("quantity"),
    useCase("useCase"),
    reason("reason"),
    createdDate("createdDate"),
    createdByUserLogin("createdByUserLogin"),
    lastModifiedDate("lastModifiedDate"),
    lastModifiedByUserLogin("lastModifiedByUserLogin"),
    lastUpdatedStamp("lastUpdatedStamp"),
    lastUpdatedTxStamp("lastUpdatedTxStamp"),
    createdStamp("createdStamp"),
    createdTxStamp("createdTxStamp"),
    orderItemTypeId("orderItemTypeId"),
    facilityIdTo("facilityIdTo");
    private final String fieldName;
    private Fields(String name) { fieldName = name; }
    /** {@inheritDoc} */
    public String getName() { return fieldName; }
    /** {@inheritDoc} */
    public String asc() { return fieldName + " ASC"; }
    /** {@inheritDoc} */
    public String desc() { return fieldName + " DESC"; }
  }

   @org.hibernate.annotations.GenericGenerator(name="Requirement_GEN",  strategy="org.opentaps.foundation.entity.hibernate.OpentapsIdentifierGenerator")
   @GeneratedValue(generator="Requirement_GEN")
   @Id
   @Column(name="REQUIREMENT_ID")
   private String requirementId;
   @Column(name="REQUIREMENT_TYPE_ID")
   private String requirementTypeId;
   @Column(name="FACILITY_ID")
   private String facilityId;
   @Column(name="DELIVERABLE_ID")
   private String deliverableId;
   @Column(name="FIXED_ASSET_ID")
   private String fixedAssetId;
   @Column(name="PRODUCT_ID")
   private String productId;
   @Column(name="STATUS_ID")
   private String statusId;
   @Column(name="DESCRIPTION")
   private String description;
   @Column(name="REQUIREMENT_START_DATE")
   private Timestamp requirementStartDate;
   @Column(name="REQUIRED_BY_DATE")
   private Timestamp requiredByDate;
   @Column(name="ESTIMATED_BUDGET")
   private BigDecimal estimatedBudget;
   @Column(name="QUANTITY")
   private BigDecimal quantity;
   @Column(name="USE_CASE")
   private String useCase;
   @Column(name="REASON")
   private String reason;
   @Column(name="CREATED_DATE")
   private Timestamp createdDate;
   @Column(name="CREATED_BY_USER_LOGIN")
   private String createdByUserLogin;
   @Column(name="LAST_MODIFIED_DATE")
   private Timestamp lastModifiedDate;
   @Column(name="LAST_MODIFIED_BY_USER_LOGIN")
   private String lastModifiedByUserLogin;
   @Column(name="LAST_UPDATED_STAMP")
   private Timestamp lastUpdatedStamp;
   @Column(name="LAST_UPDATED_TX_STAMP")
   private Timestamp lastUpdatedTxStamp;
   @Column(name="CREATED_STAMP")
   private Timestamp createdStamp;
   @Column(name="CREATED_TX_STAMP")
   private Timestamp createdTxStamp;
   @Column(name="ORDER_ITEM_TYPE_ID")
   private String orderItemTypeId;
   @Column(name="FACILITY_ID_TO")
   private String facilityIdTo;
   @ManyToOne(cascade = {CascadeType.PERSIST, CascadeType.MERGE}, fetch=FetchType.LAZY)
   @JoinColumn(name="REQUIREMENT_TYPE_ID", insertable=false, updatable=false)
   @org.hibernate.annotations.Generated(
      org.hibernate.annotations.GenerationTime.ALWAYS
   )
   
   private RequirementType requirementType = null;
   private transient List<RequirementTypeAttr> requirementTypeAttrs = null;
   @ManyToOne(cascade = {CascadeType.PERSIST, CascadeType.MERGE}, fetch=FetchType.LAZY)
   @JoinColumn(name="FACILITY_ID", insertable=false, updatable=false)
   @org.hibernate.annotations.Generated(
      org.hibernate.annotations.GenerationTime.ALWAYS
   )
   
   private Facility facility = null;
   @ManyToOne(cascade = {CascadeType.PERSIST, CascadeType.MERGE}, fetch=FetchType.LAZY)
   @JoinColumn(name="DELIVERABLE_ID", insertable=false, updatable=false)
   @org.hibernate.annotations.Generated(
      org.hibernate.annotations.GenerationTime.ALWAYS
   )
   
   private Deliverable deliverable = null;
   @ManyToOne(cascade = {CascadeType.PERSIST, CascadeType.MERGE}, fetch=FetchType.LAZY)
   @JoinColumn(name="FIXED_ASSET_ID", insertable=false, updatable=false)
   @org.hibernate.annotations.Generated(
      org.hibernate.annotations.GenerationTime.ALWAYS
   )
   
   private FixedAsset fixedAsset = null;
   @ManyToOne(cascade = {CascadeType.PERSIST, CascadeType.MERGE}, fetch=FetchType.LAZY)
   @JoinColumn(name="PRODUCT_ID", insertable=false, updatable=false)
   @org.hibernate.annotations.Generated(
      org.hibernate.annotations.GenerationTime.ALWAYS
   )
   
   private Product product = null;
   @ManyToOne(cascade = {CascadeType.PERSIST, CascadeType.MERGE}, fetch=FetchType.LAZY)
   @JoinColumn(name="STATUS_ID", insertable=false, updatable=false)
   @org.hibernate.annotations.Generated(
      org.hibernate.annotations.GenerationTime.ALWAYS
   )
   
   private StatusItem statusItem = null;
   @ManyToOne(cascade = {CascadeType.PERSIST, CascadeType.MERGE}, fetch=FetchType.LAZY)
   @JoinColumn(name="ORDER_ITEM_TYPE_ID", insertable=false, updatable=false)
   @org.hibernate.annotations.Generated(
      org.hibernate.annotations.GenerationTime.ALWAYS
   )
   
   private OrderItemType orderItemType = null;
   @ManyToOne(cascade = {CascadeType.PERSIST, CascadeType.MERGE}, fetch=FetchType.LAZY)
   @JoinColumn(name="FACILITY_ID_TO", insertable=false, updatable=false)
   @org.hibernate.annotations.Generated(
      org.hibernate.annotations.GenerationTime.ALWAYS
   )
   
   private Facility toFacility = null;
   @OneToMany(fetch=FetchType.LAZY, mappedBy="requirement", cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REMOVE})
   @JoinColumn(name="REQUIREMENT_ID")
   
   private List<DesiredFeature> desiredFeatures = null;
   @OneToMany(fetch=FetchType.LAZY, mappedBy="requirement", cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REMOVE})
   @JoinColumn(name="REQUIREMENT_ID")
   
   private List<OrderRequirementCommitment> orderRequirementCommitments = null;
   @OneToMany(fetch=FetchType.LAZY, mappedBy="requirement", cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REMOVE})
   @JoinColumn(name="REQUIREMENT_ID")
   
   private List<RequirementAttribute> requirementAttributes = null;
   @OneToMany(fetch=FetchType.LAZY, mappedBy="requirement", cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REMOVE})
   @JoinColumn(name="REQUIREMENT_ID")
   
   private List<RequirementBudgetAllocation> requirementBudgetAllocations = null;
   @OneToMany(fetch=FetchType.LAZY, mappedBy="requirement", cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REMOVE})
   @JoinColumn(name="REQUIREMENT_ID")
   
   private List<RequirementCustRequest> requirementCustRequests = null;
   @OneToMany(fetch=FetchType.LAZY, mappedBy="requirement", cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REMOVE})
   @JoinColumn(name="REQUIREMENT_ID")
   
   private List<RequirementRole> requirementRoles = null;
   @OneToMany(fetch=FetchType.LAZY, mappedBy="requirement", cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REMOVE})
   @JoinColumn(name="REQUIREMENT_ID")
   
   private List<RequirementStatus> requirementStatuses = null;
   @OneToMany(fetch=FetchType.LAZY, mappedBy="requirement", cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REMOVE})
   @JoinColumn(name="REQUIREMENT_ID")
   
   private List<WorkRequirementFulfillment> workRequirementFulfillments = null;

  /**
   * Default constructor.
   */
  public Requirement() {
      super();
      this.baseEntityName = "Requirement";
      this.isView = false;
      
      this.primaryKeyNames = new ArrayList<String>();
      this.primaryKeyNames.add("requirementId");
      this.allFieldsNames = new ArrayList<String>();
      this.allFieldsNames.add("requirementId");this.allFieldsNames.add("requirementTypeId");this.allFieldsNames.add("facilityId");this.allFieldsNames.add("deliverableId");this.allFieldsNames.add("fixedAssetId");this.allFieldsNames.add("productId");this.allFieldsNames.add("statusId");this.allFieldsNames.add("description");this.allFieldsNames.add("requirementStartDate");this.allFieldsNames.add("requiredByDate");this.allFieldsNames.add("estimatedBudget");this.allFieldsNames.add("quantity");this.allFieldsNames.add("useCase");this.allFieldsNames.add("reason");this.allFieldsNames.add("createdDate");this.allFieldsNames.add("createdByUserLogin");this.allFieldsNames.add("lastModifiedDate");this.allFieldsNames.add("lastModifiedByUserLogin");this.allFieldsNames.add("lastUpdatedStamp");this.allFieldsNames.add("lastUpdatedTxStamp");this.allFieldsNames.add("createdStamp");this.allFieldsNames.add("createdTxStamp");this.allFieldsNames.add("orderItemTypeId");this.allFieldsNames.add("facilityIdTo");
      this.nonPrimaryKeyNames = new ArrayList<String>();
      this.nonPrimaryKeyNames.addAll(allFieldsNames);
      this.nonPrimaryKeyNames.removeAll(primaryKeyNames);
  }

  /**
   * Constructor with a repository.
   * @param repository a <code>RepositoryInterface</code> value
   */
  public Requirement(RepositoryInterface repository) {
      this();
      initRepository(repository);
  }

    /**
     * Auto generated value setter.
     * @param requirementId the requirementId to set
     */
    public void setRequirementId(String requirementId) {
        this.requirementId = requirementId;
    }
    /**
     * Auto generated value setter.
     * @param requirementTypeId the requirementTypeId to set
     */
    public void setRequirementTypeId(String requirementTypeId) {
        this.requirementTypeId = requirementTypeId;
    }
    /**
     * Auto generated value setter.
     * @param facilityId the facilityId to set
     */
    public void setFacilityId(String facilityId) {
        this.facilityId = facilityId;
    }
    /**
     * Auto generated value setter.
     * @param deliverableId the deliverableId to set
     */
    public void setDeliverableId(String deliverableId) {
        this.deliverableId = deliverableId;
    }
    /**
     * Auto generated value setter.
     * @param fixedAssetId the fixedAssetId to set
     */
    public void setFixedAssetId(String fixedAssetId) {
        this.fixedAssetId = fixedAssetId;
    }
    /**
     * Auto generated value setter.
     * @param productId the productId to set
     */
    public void setProductId(String productId) {
        this.productId = productId;
    }
    /**
     * Auto generated value setter.
     * @param statusId the statusId to set
     */
    public void setStatusId(String statusId) {
        this.statusId = statusId;
    }
    /**
     * Auto generated value setter.
     * @param description the description to set
     */
    public void setDescription(String description) {
        this.description = description;
    }
    /**
     * Auto generated value setter.
     * @param requirementStartDate the requirementStartDate to set
     */
    public void setRequirementStartDate(Timestamp requirementStartDate) {
        this.requirementStartDate = requirementStartDate;
    }
    /**
     * Auto generated value setter.
     * @param requiredByDate the requiredByDate to set
     */
    public void setRequiredByDate(Timestamp requiredByDate) {
        this.requiredByDate = requiredByDate;
    }
    /**
     * Auto generated value setter.
     * @param estimatedBudget the estimatedBudget to set
     */
    public void setEstimatedBudget(BigDecimal estimatedBudget) {
        this.estimatedBudget = estimatedBudget;
    }
    /**
     * Auto generated value setter.
     * @param quantity the quantity to set
     */
    public void setQuantity(BigDecimal quantity) {
        this.quantity = quantity;
    }
    /**
     * Auto generated value setter.
     * @param useCase the useCase to set
     */
    public void setUseCase(String useCase) {
        this.useCase = useCase;
    }
    /**
     * Auto generated value setter.
     * @param reason the reason to set
     */
    public void setReason(String reason) {
        this.reason = reason;
    }
    /**
     * Auto generated value setter.
     * @param createdDate the createdDate to set
     */
    public void setCreatedDate(Timestamp createdDate) {
        this.createdDate = createdDate;
    }
    /**
     * Auto generated value setter.
     * @param createdByUserLogin the createdByUserLogin to set
     */
    public void setCreatedByUserLogin(String createdByUserLogin) {
        this.createdByUserLogin = createdByUserLogin;
    }
    /**
     * Auto generated value setter.
     * @param lastModifiedDate the lastModifiedDate to set
     */
    public void setLastModifiedDate(Timestamp lastModifiedDate) {
        this.lastModifiedDate = lastModifiedDate;
    }
    /**
     * Auto generated value setter.
     * @param lastModifiedByUserLogin the lastModifiedByUserLogin to set
     */
    public void setLastModifiedByUserLogin(String lastModifiedByUserLogin) {
        this.lastModifiedByUserLogin = lastModifiedByUserLogin;
    }
    /**
     * Auto generated value setter.
     * @param lastUpdatedStamp the lastUpdatedStamp to set
     */
    public void setLastUpdatedStamp(Timestamp lastUpdatedStamp) {
        this.lastUpdatedStamp = lastUpdatedStamp;
    }
    /**
     * Auto generated value setter.
     * @param lastUpdatedTxStamp the lastUpdatedTxStamp to set
     */
    public void setLastUpdatedTxStamp(Timestamp lastUpdatedTxStamp) {
        this.lastUpdatedTxStamp = lastUpdatedTxStamp;
    }
    /**
     * Auto generated value setter.
     * @param createdStamp the createdStamp to set
     */
    public void setCreatedStamp(Timestamp createdStamp) {
        this.createdStamp = createdStamp;
    }
    /**
     * Auto generated value setter.
     * @param createdTxStamp the createdTxStamp to set
     */
    public void setCreatedTxStamp(Timestamp createdTxStamp) {
        this.createdTxStamp = createdTxStamp;
    }
    /**
     * Auto generated value setter.
     * @param orderItemTypeId the orderItemTypeId to set
     */
    public void setOrderItemTypeId(String orderItemTypeId) {
        this.orderItemTypeId = orderItemTypeId;
    }
    /**
     * Auto generated value setter.
     * @param facilityIdTo the facilityIdTo to set
     */
    public void setFacilityIdTo(String facilityIdTo) {
        this.facilityIdTo = facilityIdTo;
    }

    /**
     * Auto generated value accessor.
     * @return <code>String</code>
     */
    public String getRequirementId() {
        return this.requirementId;
    }
    /**
     * Auto generated value accessor.
     * @return <code>String</code>
     */
    public String getRequirementTypeId() {
        return this.requirementTypeId;
    }
    /**
     * Auto generated value accessor.
     * @return <code>String</code>
     */
    public String getFacilityId() {
        return this.facilityId;
    }
    /**
     * Auto generated value accessor.
     * @return <code>String</code>
     */
    public String getDeliverableId() {
        return this.deliverableId;
    }
    /**
     * Auto generated value accessor.
     * @return <code>String</code>
     */
    public String getFixedAssetId() {
        return this.fixedAssetId;
    }
    /**
     * Auto generated value accessor.
     * @return <code>String</code>
     */
    public String getProductId() {
        return this.productId;
    }
    /**
     * Auto generated value accessor.
     * @return <code>String</code>
     */
    public String getStatusId() {
        return this.statusId;
    }
    /**
     * Auto generated value accessor.
     * @return <code>String</code>
     */
    public String getDescription() {
        return this.description;
    }
    /**
     * Auto generated value accessor.
     * @return <code>Timestamp</code>
     */
    public Timestamp getRequirementStartDate() {
        return this.requirementStartDate;
    }
    /**
     * Auto generated value accessor.
     * @return <code>Timestamp</code>
     */
    public Timestamp getRequiredByDate() {
        return this.requiredByDate;
    }
    /**
     * Auto generated value accessor.
     * @return <code>BigDecimal</code>
     */
    public BigDecimal getEstimatedBudget() {
        return this.estimatedBudget;
    }
    /**
     * Auto generated value accessor.
     * @return <code>BigDecimal</code>
     */
    public BigDecimal getQuantity() {
        return this.quantity;
    }
    /**
     * Auto generated value accessor.
     * @return <code>String</code>
     */
    public String getUseCase() {
        return this.useCase;
    }
    /**
     * Auto generated value accessor.
     * @return <code>String</code>
     */
    public String getReason() {
        return this.reason;
    }
    /**
     * Auto generated value accessor.
     * @return <code>Timestamp</code>
     */
    public Timestamp getCreatedDate() {
        return this.createdDate;
    }
    /**
     * Auto generated value accessor.
     * @return <code>String</code>
     */
    public String getCreatedByUserLogin() {
        return this.createdByUserLogin;
    }
    /**
     * Auto generated value accessor.
     * @return <code>Timestamp</code>
     */
    public Timestamp getLastModifiedDate() {
        return this.lastModifiedDate;
    }
    /**
     * Auto generated value accessor.
     * @return <code>String</code>
     */
    public String getLastModifiedByUserLogin() {
        return this.lastModifiedByUserLogin;
    }
    /**
     * Auto generated value accessor.
     * @return <code>Timestamp</code>
     */
    public Timestamp getLastUpdatedStamp() {
        return this.lastUpdatedStamp;
    }
    /**
     * Auto generated value accessor.
     * @return <code>Timestamp</code>
     */
    public Timestamp getLastUpdatedTxStamp() {
        return this.lastUpdatedTxStamp;
    }
    /**
     * Auto generated value accessor.
     * @return <code>Timestamp</code>
     */
    public Timestamp getCreatedStamp() {
        return this.createdStamp;
    }
    /**
     * Auto generated value accessor.
     * @return <code>Timestamp</code>
     */
    public Timestamp getCreatedTxStamp() {
        return this.createdTxStamp;
    }
    /**
     * Auto generated value accessor.
     * @return <code>String</code>
     */
    public String getOrderItemTypeId() {
        return this.orderItemTypeId;
    }
    /**
     * Auto generated value accessor.
     * @return <code>String</code>
     */
    public String getFacilityIdTo() {
        return this.facilityIdTo;
    }

    /**
     * Auto generated method that gets the related <code>RequirementType</code> by the relation named <code>RequirementType</code>.
     * @return the <code>RequirementType</code>
     * @throws RepositoryException if an error occurs
     */
    public RequirementType getRequirementType() throws RepositoryException {
        if (this.requirementType == null) {
            this.requirementType = getRelatedOne(RequirementType.class, "RequirementType");
        }
        return this.requirementType;
    }
    /**
     * Auto generated method that gets the related <code>RequirementTypeAttr</code> by the relation named <code>RequirementTypeAttr</code>.
     * @return the list of <code>RequirementTypeAttr</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends RequirementTypeAttr> getRequirementTypeAttrs() throws RepositoryException {
        if (this.requirementTypeAttrs == null) {
            this.requirementTypeAttrs = getRelated(RequirementTypeAttr.class, "RequirementTypeAttr");
        }
        return this.requirementTypeAttrs;
    }
    /**
     * Auto generated method that gets the related <code>Facility</code> by the relation named <code>Facility</code>.
     * @return the <code>Facility</code>
     * @throws RepositoryException if an error occurs
     */
    public Facility getFacility() throws RepositoryException {
        if (this.facility == null) {
            this.facility = getRelatedOne(Facility.class, "Facility");
        }
        return this.facility;
    }
    /**
     * Auto generated method that gets the related <code>Deliverable</code> by the relation named <code>Deliverable</code>.
     * @return the <code>Deliverable</code>
     * @throws RepositoryException if an error occurs
     */
    public Deliverable getDeliverable() throws RepositoryException {
        if (this.deliverable == null) {
            this.deliverable = getRelatedOne(Deliverable.class, "Deliverable");
        }
        return this.deliverable;
    }
    /**
     * Auto generated method that gets the related <code>FixedAsset</code> by the relation named <code>FixedAsset</code>.
     * @return the <code>FixedAsset</code>
     * @throws RepositoryException if an error occurs
     */
    public FixedAsset getFixedAsset() throws RepositoryException {
        if (this.fixedAsset == null) {
            this.fixedAsset = getRelatedOne(FixedAsset.class, "FixedAsset");
        }
        return this.fixedAsset;
    }
    /**
     * Auto generated method that gets the related <code>Product</code> by the relation named <code>Product</code>.
     * @return the <code>Product</code>
     * @throws RepositoryException if an error occurs
     */
    public Product getProduct() throws RepositoryException {
        if (this.product == null) {
            this.product = getRelatedOne(Product.class, "Product");
        }
        return this.product;
    }
    /**
     * Auto generated method that gets the related <code>StatusItem</code> by the relation named <code>StatusItem</code>.
     * @return the <code>StatusItem</code>
     * @throws RepositoryException if an error occurs
     */
    public StatusItem getStatusItem() throws RepositoryException {
        if (this.statusItem == null) {
            this.statusItem = getRelatedOne(StatusItem.class, "StatusItem");
        }
        return this.statusItem;
    }
    /**
     * Auto generated method that gets the related <code>OrderItemType</code> by the relation named <code>OrderItemType</code>.
     * @return the <code>OrderItemType</code>
     * @throws RepositoryException if an error occurs
     */
    public OrderItemType getOrderItemType() throws RepositoryException {
        if (this.orderItemType == null) {
            this.orderItemType = getRelatedOne(OrderItemType.class, "OrderItemType");
        }
        return this.orderItemType;
    }
    /**
     * Auto generated method that gets the related <code>Facility</code> by the relation named <code>ToFacility</code>.
     * @return the <code>Facility</code>
     * @throws RepositoryException if an error occurs
     */
    public Facility getToFacility() throws RepositoryException {
        if (this.toFacility == null) {
            this.toFacility = getRelatedOne(Facility.class, "ToFacility");
        }
        return this.toFacility;
    }
    /**
     * Auto generated method that gets the related <code>DesiredFeature</code> by the relation named <code>DesiredFeature</code>.
     * @return the list of <code>DesiredFeature</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends DesiredFeature> getDesiredFeatures() throws RepositoryException {
        if (this.desiredFeatures == null) {
            this.desiredFeatures = getRelated(DesiredFeature.class, "DesiredFeature");
        }
        return this.desiredFeatures;
    }
    /**
     * Auto generated method that gets the related <code>OrderRequirementCommitment</code> by the relation named <code>OrderRequirementCommitment</code>.
     * @return the list of <code>OrderRequirementCommitment</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends OrderRequirementCommitment> getOrderRequirementCommitments() throws RepositoryException {
        if (this.orderRequirementCommitments == null) {
            this.orderRequirementCommitments = getRelated(OrderRequirementCommitment.class, "OrderRequirementCommitment");
        }
        return this.orderRequirementCommitments;
    }
    /**
     * Auto generated method that gets the related <code>RequirementAttribute</code> by the relation named <code>RequirementAttribute</code>.
     * @return the list of <code>RequirementAttribute</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends RequirementAttribute> getRequirementAttributes() throws RepositoryException {
        if (this.requirementAttributes == null) {
            this.requirementAttributes = getRelated(RequirementAttribute.class, "RequirementAttribute");
        }
        return this.requirementAttributes;
    }
    /**
     * Auto generated method that gets the related <code>RequirementBudgetAllocation</code> by the relation named <code>RequirementBudgetAllocation</code>.
     * @return the list of <code>RequirementBudgetAllocation</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends RequirementBudgetAllocation> getRequirementBudgetAllocations() throws RepositoryException {
        if (this.requirementBudgetAllocations == null) {
            this.requirementBudgetAllocations = getRelated(RequirementBudgetAllocation.class, "RequirementBudgetAllocation");
        }
        return this.requirementBudgetAllocations;
    }
    /**
     * Auto generated method that gets the related <code>RequirementCustRequest</code> by the relation named <code>RequirementCustRequest</code>.
     * @return the list of <code>RequirementCustRequest</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends RequirementCustRequest> getRequirementCustRequests() throws RepositoryException {
        if (this.requirementCustRequests == null) {
            this.requirementCustRequests = getRelated(RequirementCustRequest.class, "RequirementCustRequest");
        }
        return this.requirementCustRequests;
    }
    /**
     * Auto generated method that gets the related <code>RequirementRole</code> by the relation named <code>RequirementRole</code>.
     * @return the list of <code>RequirementRole</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends RequirementRole> getRequirementRoles() throws RepositoryException {
        if (this.requirementRoles == null) {
            this.requirementRoles = getRelated(RequirementRole.class, "RequirementRole");
        }
        return this.requirementRoles;
    }
    /**
     * Auto generated method that gets the related <code>RequirementStatus</code> by the relation named <code>RequirementStatus</code>.
     * @return the list of <code>RequirementStatus</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends RequirementStatus> getRequirementStatuses() throws RepositoryException {
        if (this.requirementStatuses == null) {
            this.requirementStatuses = getRelated(RequirementStatus.class, "RequirementStatus");
        }
        return this.requirementStatuses;
    }
    /**
     * Auto generated method that gets the related <code>WorkRequirementFulfillment</code> by the relation named <code>WorkRequirementFulfillment</code>.
     * @return the list of <code>WorkRequirementFulfillment</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends WorkRequirementFulfillment> getWorkRequirementFulfillments() throws RepositoryException {
        if (this.workRequirementFulfillments == null) {
            this.workRequirementFulfillments = getRelated(WorkRequirementFulfillment.class, "WorkRequirementFulfillment");
        }
        return this.workRequirementFulfillments;
    }

    /**
     * Auto generated value setter.
     * @param requirementType the requirementType to set
    */
    public void setRequirementType(RequirementType requirementType) {
        this.requirementType = requirementType;
    }
    /**
     * Auto generated value setter.
     * @param requirementTypeAttrs the requirementTypeAttrs to set
    */
    public void setRequirementTypeAttrs(List<RequirementTypeAttr> requirementTypeAttrs) {
        this.requirementTypeAttrs = requirementTypeAttrs;
    }
    /**
     * Auto generated value setter.
     * @param facility the facility to set
    */
    public void setFacility(Facility facility) {
        this.facility = facility;
    }
    /**
     * Auto generated value setter.
     * @param deliverable the deliverable to set
    */
    public void setDeliverable(Deliverable deliverable) {
        this.deliverable = deliverable;
    }
    /**
     * Auto generated value setter.
     * @param fixedAsset the fixedAsset to set
    */
    public void setFixedAsset(FixedAsset fixedAsset) {
        this.fixedAsset = fixedAsset;
    }
    /**
     * Auto generated value setter.
     * @param product the product to set
    */
    public void setProduct(Product product) {
        this.product = product;
    }
    /**
     * Auto generated value setter.
     * @param statusItem the statusItem to set
    */
    public void setStatusItem(StatusItem statusItem) {
        this.statusItem = statusItem;
    }
    /**
     * Auto generated value setter.
     * @param orderItemType the orderItemType to set
    */
    public void setOrderItemType(OrderItemType orderItemType) {
        this.orderItemType = orderItemType;
    }
    /**
     * Auto generated value setter.
     * @param toFacility the toFacility to set
    */
    public void setToFacility(Facility toFacility) {
        this.toFacility = toFacility;
    }
    /**
     * Auto generated value setter.
     * @param desiredFeatures the desiredFeatures to set
    */
    public void setDesiredFeatures(List<DesiredFeature> desiredFeatures) {
        this.desiredFeatures = desiredFeatures;
    }
    /**
     * Auto generated value setter.
     * @param orderRequirementCommitments the orderRequirementCommitments to set
    */
    public void setOrderRequirementCommitments(List<OrderRequirementCommitment> orderRequirementCommitments) {
        this.orderRequirementCommitments = orderRequirementCommitments;
    }
    /**
     * Auto generated value setter.
     * @param requirementAttributes the requirementAttributes to set
    */
    public void setRequirementAttributes(List<RequirementAttribute> requirementAttributes) {
        this.requirementAttributes = requirementAttributes;
    }
    /**
     * Auto generated value setter.
     * @param requirementBudgetAllocations the requirementBudgetAllocations to set
    */
    public void setRequirementBudgetAllocations(List<RequirementBudgetAllocation> requirementBudgetAllocations) {
        this.requirementBudgetAllocations = requirementBudgetAllocations;
    }
    /**
     * Auto generated value setter.
     * @param requirementCustRequests the requirementCustRequests to set
    */
    public void setRequirementCustRequests(List<RequirementCustRequest> requirementCustRequests) {
        this.requirementCustRequests = requirementCustRequests;
    }
    /**
     * Auto generated value setter.
     * @param requirementRoles the requirementRoles to set
    */
    public void setRequirementRoles(List<RequirementRole> requirementRoles) {
        this.requirementRoles = requirementRoles;
    }
    /**
     * Auto generated value setter.
     * @param requirementStatuses the requirementStatuses to set
    */
    public void setRequirementStatuses(List<RequirementStatus> requirementStatuses) {
        this.requirementStatuses = requirementStatuses;
    }
    /**
     * Auto generated value setter.
     * @param workRequirementFulfillments the workRequirementFulfillments to set
    */
    public void setWorkRequirementFulfillments(List<WorkRequirementFulfillment> workRequirementFulfillments) {
        this.workRequirementFulfillments = workRequirementFulfillments;
    }

    /**
     * Auto generated method that add item to collection.
     */
    public void addDesiredFeature(DesiredFeature desiredFeature) {
        if (this.desiredFeatures == null) {
            this.desiredFeatures = new ArrayList<DesiredFeature>();
        }
        this.desiredFeatures.add(desiredFeature);
    }
    /**
     * Auto generated method that remove item from collection.
     */
    public void removeDesiredFeature(DesiredFeature desiredFeature) {
        if (this.desiredFeatures == null) {
            return;
        }
        this.desiredFeatures.remove(desiredFeature);
    }
    /**
     * Auto generated method that clear items from collection.
     */
    public void clearDesiredFeature() {
        if (this.desiredFeatures == null) {
            return;
        }
        this.desiredFeatures.clear();
    }
    /**
     * Auto generated method that add item to collection.
     */
    public void addOrderRequirementCommitment(OrderRequirementCommitment orderRequirementCommitment) {
        if (this.orderRequirementCommitments == null) {
            this.orderRequirementCommitments = new ArrayList<OrderRequirementCommitment>();
        }
        this.orderRequirementCommitments.add(orderRequirementCommitment);
    }
    /**
     * Auto generated method that remove item from collection.
     */
    public void removeOrderRequirementCommitment(OrderRequirementCommitment orderRequirementCommitment) {
        if (this.orderRequirementCommitments == null) {
            return;
        }
        this.orderRequirementCommitments.remove(orderRequirementCommitment);
    }
    /**
     * Auto generated method that clear items from collection.
     */
    public void clearOrderRequirementCommitment() {
        if (this.orderRequirementCommitments == null) {
            return;
        }
        this.orderRequirementCommitments.clear();
    }
    /**
     * Auto generated method that add item to collection.
     */
    public void addRequirementAttribute(RequirementAttribute requirementAttribute) {
        if (this.requirementAttributes == null) {
            this.requirementAttributes = new ArrayList<RequirementAttribute>();
        }
        this.requirementAttributes.add(requirementAttribute);
    }
    /**
     * Auto generated method that remove item from collection.
     */
    public void removeRequirementAttribute(RequirementAttribute requirementAttribute) {
        if (this.requirementAttributes == null) {
            return;
        }
        this.requirementAttributes.remove(requirementAttribute);
    }
    /**
     * Auto generated method that clear items from collection.
     */
    public void clearRequirementAttribute() {
        if (this.requirementAttributes == null) {
            return;
        }
        this.requirementAttributes.clear();
    }
    /**
     * Auto generated method that add item to collection.
     */
    public void addRequirementBudgetAllocation(RequirementBudgetAllocation requirementBudgetAllocation) {
        if (this.requirementBudgetAllocations == null) {
            this.requirementBudgetAllocations = new ArrayList<RequirementBudgetAllocation>();
        }
        this.requirementBudgetAllocations.add(requirementBudgetAllocation);
    }
    /**
     * Auto generated method that remove item from collection.
     */
    public void removeRequirementBudgetAllocation(RequirementBudgetAllocation requirementBudgetAllocation) {
        if (this.requirementBudgetAllocations == null) {
            return;
        }
        this.requirementBudgetAllocations.remove(requirementBudgetAllocation);
    }
    /**
     * Auto generated method that clear items from collection.
     */
    public void clearRequirementBudgetAllocation() {
        if (this.requirementBudgetAllocations == null) {
            return;
        }
        this.requirementBudgetAllocations.clear();
    }
    /**
     * Auto generated method that add item to collection.
     */
    public void addRequirementCustRequest(RequirementCustRequest requirementCustRequest) {
        if (this.requirementCustRequests == null) {
            this.requirementCustRequests = new ArrayList<RequirementCustRequest>();
        }
        this.requirementCustRequests.add(requirementCustRequest);
    }
    /**
     * Auto generated method that remove item from collection.
     */
    public void removeRequirementCustRequest(RequirementCustRequest requirementCustRequest) {
        if (this.requirementCustRequests == null) {
            return;
        }
        this.requirementCustRequests.remove(requirementCustRequest);
    }
    /**
     * Auto generated method that clear items from collection.
     */
    public void clearRequirementCustRequest() {
        if (this.requirementCustRequests == null) {
            return;
        }
        this.requirementCustRequests.clear();
    }
    /**
     * Auto generated method that add item to collection.
     */
    public void addRequirementRole(RequirementRole requirementRole) {
        if (this.requirementRoles == null) {
            this.requirementRoles = new ArrayList<RequirementRole>();
        }
        this.requirementRoles.add(requirementRole);
    }
    /**
     * Auto generated method that remove item from collection.
     */
    public void removeRequirementRole(RequirementRole requirementRole) {
        if (this.requirementRoles == null) {
            return;
        }
        this.requirementRoles.remove(requirementRole);
    }
    /**
     * Auto generated method that clear items from collection.
     */
    public void clearRequirementRole() {
        if (this.requirementRoles == null) {
            return;
        }
        this.requirementRoles.clear();
    }
    /**
     * Auto generated method that add item to collection.
     */
    public void addRequirementStatuse(RequirementStatus requirementStatuse) {
        if (this.requirementStatuses == null) {
            this.requirementStatuses = new ArrayList<RequirementStatus>();
        }
        this.requirementStatuses.add(requirementStatuse);
    }
    /**
     * Auto generated method that remove item from collection.
     */
    public void removeRequirementStatuse(RequirementStatus requirementStatuse) {
        if (this.requirementStatuses == null) {
            return;
        }
        this.requirementStatuses.remove(requirementStatuse);
    }
    /**
     * Auto generated method that clear items from collection.
     */
    public void clearRequirementStatuse() {
        if (this.requirementStatuses == null) {
            return;
        }
        this.requirementStatuses.clear();
    }
    /**
     * Auto generated method that add item to collection.
     */
    public void addWorkRequirementFulfillment(WorkRequirementFulfillment workRequirementFulfillment) {
        if (this.workRequirementFulfillments == null) {
            this.workRequirementFulfillments = new ArrayList<WorkRequirementFulfillment>();
        }
        this.workRequirementFulfillments.add(workRequirementFulfillment);
    }
    /**
     * Auto generated method that remove item from collection.
     */
    public void removeWorkRequirementFulfillment(WorkRequirementFulfillment workRequirementFulfillment) {
        if (this.workRequirementFulfillments == null) {
            return;
        }
        this.workRequirementFulfillments.remove(workRequirementFulfillment);
    }
    /**
     * Auto generated method that clear items from collection.
     */
    public void clearWorkRequirementFulfillment() {
        if (this.workRequirementFulfillments == null) {
            return;
        }
        this.workRequirementFulfillments.clear();
    }

    /** {@inheritDoc} */
    @Override
    public void fromMap(Map<String, Object> mapValue) {
        preInit();
        setRequirementId((String) mapValue.get("requirementId"));
        setRequirementTypeId((String) mapValue.get("requirementTypeId"));
        setFacilityId((String) mapValue.get("facilityId"));
        setDeliverableId((String) mapValue.get("deliverableId"));
        setFixedAssetId((String) mapValue.get("fixedAssetId"));
        setProductId((String) mapValue.get("productId"));
        setStatusId((String) mapValue.get("statusId"));
        setDescription((String) mapValue.get("description"));
        setRequirementStartDate((Timestamp) mapValue.get("requirementStartDate"));
        setRequiredByDate((Timestamp) mapValue.get("requiredByDate"));
        setEstimatedBudget(convertToBigDecimal(mapValue.get("estimatedBudget")));
        setQuantity(convertToBigDecimal(mapValue.get("quantity")));
        setUseCase((String) mapValue.get("useCase"));
        setReason((String) mapValue.get("reason"));
        setCreatedDate((Timestamp) mapValue.get("createdDate"));
        setCreatedByUserLogin((String) mapValue.get("createdByUserLogin"));
        setLastModifiedDate((Timestamp) mapValue.get("lastModifiedDate"));
        setLastModifiedByUserLogin((String) mapValue.get("lastModifiedByUserLogin"));
        setLastUpdatedStamp((Timestamp) mapValue.get("lastUpdatedStamp"));
        setLastUpdatedTxStamp((Timestamp) mapValue.get("lastUpdatedTxStamp"));
        setCreatedStamp((Timestamp) mapValue.get("createdStamp"));
        setCreatedTxStamp((Timestamp) mapValue.get("createdTxStamp"));
        setOrderItemTypeId((String) mapValue.get("orderItemTypeId"));
        setFacilityIdTo((String) mapValue.get("facilityIdTo"));
        postInit();
    }

    /** {@inheritDoc} */
    @Override
    public Map<String, Object> toMap() {
        Map<String, Object> mapValue = new FastMap<String, Object>();
        mapValue.put("requirementId", getRequirementId());
        mapValue.put("requirementTypeId", getRequirementTypeId());
        mapValue.put("facilityId", getFacilityId());
        mapValue.put("deliverableId", getDeliverableId());
        mapValue.put("fixedAssetId", getFixedAssetId());
        mapValue.put("productId", getProductId());
        mapValue.put("statusId", getStatusId());
        mapValue.put("description", getDescription());
        mapValue.put("requirementStartDate", getRequirementStartDate());
        mapValue.put("requiredByDate", getRequiredByDate());
        mapValue.put("estimatedBudget", getEstimatedBudget());
        mapValue.put("quantity", getQuantity());
        mapValue.put("useCase", getUseCase());
        mapValue.put("reason", getReason());
        mapValue.put("createdDate", getCreatedDate());
        mapValue.put("createdByUserLogin", getCreatedByUserLogin());
        mapValue.put("lastModifiedDate", getLastModifiedDate());
        mapValue.put("lastModifiedByUserLogin", getLastModifiedByUserLogin());
        mapValue.put("lastUpdatedStamp", getLastUpdatedStamp());
        mapValue.put("lastUpdatedTxStamp", getLastUpdatedTxStamp());
        mapValue.put("createdStamp", getCreatedStamp());
        mapValue.put("createdTxStamp", getCreatedTxStamp());
        mapValue.put("orderItemTypeId", getOrderItemTypeId());
        mapValue.put("facilityIdTo", getFacilityIdTo());
        return mapValue;
    }


}
