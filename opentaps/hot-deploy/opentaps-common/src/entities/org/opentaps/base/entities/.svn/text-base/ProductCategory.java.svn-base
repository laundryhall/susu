package org.opentaps.base.entities;

/*
 * Copyright (c) Open Source Strategies, Inc.
 *
 * Opentaps is free software: you can redistribute it and/or modify it
 * under the terms of the GNU Affero General Public License as published
 * by the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Opentaps is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with Opentaps.  If not, see <http://www.gnu.org/licenses/>.
 */

// DO NOT EDIT THIS FILE!  THIS IS AUTO GENERATED AND WILL GET WRITTEN OVER PERIODICALLY WHEN THE DATA MODEL CHANGES
// EXTEND THIS CLASS INSTEAD.

import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;

import javolution.util.FastMap;

import org.opentaps.foundation.entity.Entity;
import org.opentaps.foundation.entity.EntityFieldInterface;
import org.opentaps.foundation.repository.RepositoryException;
import org.opentaps.foundation.repository.RepositoryInterface;
import javax.persistence.*;
import org.hibernate.search.annotations.*;
import java.lang.String;
import java.sql.Timestamp;

/**
 * Auto generated base entity ProductCategory.
 */
@javax.persistence.Entity
@Table(name="PRODUCT_CATEGORY")
public class ProductCategory extends Entity {
static {
java.util.Map<String, String> fields = new java.util.HashMap<String, String>();
        fields.put("productCategoryId", "PRODUCT_CATEGORY_ID");
        fields.put("productCategoryTypeId", "PRODUCT_CATEGORY_TYPE_ID");
        fields.put("primaryParentCategoryId", "PRIMARY_PARENT_CATEGORY_ID");
        fields.put("categoryName", "CATEGORY_NAME");
        fields.put("description", "DESCRIPTION");
        fields.put("longDescription", "LONG_DESCRIPTION");
        fields.put("categoryImageUrl", "CATEGORY_IMAGE_URL");
        fields.put("linkOneImageUrl", "LINK_ONE_IMAGE_URL");
        fields.put("linkTwoImageUrl", "LINK_TWO_IMAGE_URL");
        fields.put("detailScreen", "DETAIL_SCREEN");
        fields.put("showInSelect", "SHOW_IN_SELECT");
        fields.put("lastUpdatedStamp", "LAST_UPDATED_STAMP");
        fields.put("lastUpdatedTxStamp", "LAST_UPDATED_TX_STAMP");
        fields.put("createdStamp", "CREATED_STAMP");
        fields.put("createdTxStamp", "CREATED_TX_STAMP");
fieldMapColumns.put("ProductCategory", fields);
}
  public static enum Fields implements EntityFieldInterface<ProductCategory> {
    productCategoryId("productCategoryId"),
    productCategoryTypeId("productCategoryTypeId"),
    primaryParentCategoryId("primaryParentCategoryId"),
    categoryName("categoryName"),
    description("description"),
    longDescription("longDescription"),
    categoryImageUrl("categoryImageUrl"),
    linkOneImageUrl("linkOneImageUrl"),
    linkTwoImageUrl("linkTwoImageUrl"),
    detailScreen("detailScreen"),
    showInSelect("showInSelect"),
    lastUpdatedStamp("lastUpdatedStamp"),
    lastUpdatedTxStamp("lastUpdatedTxStamp"),
    createdStamp("createdStamp"),
    createdTxStamp("createdTxStamp");
    private final String fieldName;
    private Fields(String name) { fieldName = name; }
    /** {@inheritDoc} */
    public String getName() { return fieldName; }
    /** {@inheritDoc} */
    public String asc() { return fieldName + " ASC"; }
    /** {@inheritDoc} */
    public String desc() { return fieldName + " DESC"; }
  }

   @org.hibernate.annotations.GenericGenerator(name="ProductCategory_GEN",  strategy="org.opentaps.foundation.entity.hibernate.OpentapsIdentifierGenerator")
   @GeneratedValue(generator="ProductCategory_GEN")
   @Id
   @Column(name="PRODUCT_CATEGORY_ID")
   private String productCategoryId;
   @Column(name="PRODUCT_CATEGORY_TYPE_ID")
   private String productCategoryTypeId;
   @Column(name="PRIMARY_PARENT_CATEGORY_ID")
   private String primaryParentCategoryId;
   @Column(name="CATEGORY_NAME")
   private String categoryName;
   @Column(name="DESCRIPTION")
   private String description;
   @Column(name="LONG_DESCRIPTION")
   private String longDescription;
   @Column(name="CATEGORY_IMAGE_URL")
   private String categoryImageUrl;
   @Column(name="LINK_ONE_IMAGE_URL")
   private String linkOneImageUrl;
   @Column(name="LINK_TWO_IMAGE_URL")
   private String linkTwoImageUrl;
   @Column(name="DETAIL_SCREEN")
   private String detailScreen;
   @Column(name="SHOW_IN_SELECT")
   private String showInSelect;
   @Column(name="LAST_UPDATED_STAMP")
   private Timestamp lastUpdatedStamp;
   @Column(name="LAST_UPDATED_TX_STAMP")
   private Timestamp lastUpdatedTxStamp;
   @Column(name="CREATED_STAMP")
   private Timestamp createdStamp;
   @Column(name="CREATED_TX_STAMP")
   private Timestamp createdTxStamp;
   @ManyToOne(cascade = {CascadeType.PERSIST, CascadeType.MERGE}, fetch=FetchType.LAZY)
   @JoinColumn(name="PRODUCT_CATEGORY_TYPE_ID", insertable=false, updatable=false)
   @org.hibernate.annotations.Generated(
      org.hibernate.annotations.GenerationTime.ALWAYS
   )
   
   private ProductCategoryType productCategoryType = null;
   private transient List<ProductCategoryTypeAttr> productCategoryTypeAttrs = null;
   @ManyToOne(cascade = {CascadeType.PERSIST, CascadeType.MERGE}, fetch=FetchType.LAZY)
   @JoinColumn(name="PRIMARY_PARENT_CATEGORY_ID", insertable=false, updatable=false)
   @org.hibernate.annotations.Generated(
      org.hibernate.annotations.GenerationTime.ALWAYS
   )
   
   private ProductCategory primaryParentProductCategory = null;
   @OneToMany(fetch=FetchType.LAZY, mappedBy="primaryParentProductCategory", cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REMOVE})
   @JoinColumn(name="PRIMARY_PARENT_CATEGORY_ID")
   
   private List<ProductCategory> primaryChildProductCategorys = null;
   @OneToMany(fetch=FetchType.LAZY, mappedBy="productCategory", cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REMOVE})
   @JoinColumn(name="PRODUCT_CATEGORY_ID")
   
   private List<AgreementCategoryAppl> agreementCategoryAppls = null;
   @OneToMany(fetch=FetchType.LAZY, mappedBy="productCategory", cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REMOVE})
   @JoinColumn(name="PRODUCT_CATEGORY_ID")
   
   private List<AgreementTerm> agreementTerms = null;
   @OneToMany(fetch=FetchType.LAZY, mappedBy="productCategory", cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REMOVE})
   @JoinColumn(name="PRODUCT_CATEGORY_ID")
   
   private List<MarketInterest> marketInterests = null;
   @OneToMany(fetch=FetchType.LAZY, mappedBy="productCategory", cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REMOVE})
   @JoinColumn(name="PRODUCT_CATEGORY_ID")
   
   private List<OldProductKeywordResult> oldProductKeywordResults = null;
   private transient List<PartyNeed> partyNeeds = null;
   @OneToMany(fetch=FetchType.LAZY, mappedBy="productCategory", cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REMOVE})
   @JoinColumn(name="PRODUCT_CATEGORY_ID")
   
   private List<ProdCatalogCategory> prodCatalogCategorys = null;
   @OneToMany(fetch=FetchType.LAZY, mappedBy="primaryProductCategory", cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REMOVE})
   @JoinColumn(name="PRIMARY_PRODUCT_CATEGORY_ID")
   
   private List<Product> primaryProducts = null;
   @OneToMany(fetch=FetchType.LAZY, mappedBy="productCategory", cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REMOVE})
   @JoinColumn(name="PRODUCT_CATEGORY_ID")
   
   private List<ProductCategoryAttribute> productCategoryAttributes = null;
   @OneToMany(fetch=FetchType.LAZY, mappedBy="productCategory", cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REMOVE})
   @JoinColumn(name="PRODUCT_CATEGORY_ID")
   
   private List<ProductCategoryContent> productCategoryContents = null;
   @OneToMany(fetch=FetchType.LAZY, mappedBy="productCategory", cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REMOVE})
   @JoinColumn(name="PRODUCT_CATEGORY_ID")
   
   private List<ProductCategoryGlAccount> productCategoryGlAccounts = null;
   @OneToMany(fetch=FetchType.LAZY, mappedBy="productCategory", cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REMOVE})
   @JoinColumn(name="PRODUCT_CATEGORY_ID")
   
   private List<ProductCategoryLink> productCategoryLinks = null;
   @OneToMany(fetch=FetchType.LAZY, mappedBy="productCategory", cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REMOVE})
   @JoinColumn(name="PRODUCT_CATEGORY_ID")
   
   private List<ProductCategoryMember> productCategoryMembers = null;
   @OneToMany(fetch=FetchType.LAZY, mappedBy="productCategory", cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REMOVE})
   @JoinColumn(name="PRODUCT_CATEGORY_ID")
   
   private List<ProductCategoryRole> productCategoryRoles = null;
   @OneToMany(fetch=FetchType.LAZY, mappedBy="currentProductCategory", cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REMOVE})
   @JoinColumn(name="PRODUCT_CATEGORY_ID")
   
   private List<ProductCategoryRollup> currentProductCategoryRollups = null;
   @OneToMany(fetch=FetchType.LAZY, mappedBy="parentProductCategory", cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REMOVE})
   @JoinColumn(name="PARENT_PRODUCT_CATEGORY_ID")
   
   private List<ProductCategoryRollup> parentProductCategoryRollups = null;
   @OneToMany(fetch=FetchType.LAZY, mappedBy="productCategory", cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REMOVE})
   @JoinColumn(name="PRODUCT_CATEGORY_ID")
   
   private List<ProductFeatureCatGrpAppl> productFeatureCatGrpAppls = null;
   @OneToMany(fetch=FetchType.LAZY, mappedBy="productCategory", cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REMOVE})
   @JoinColumn(name="PRODUCT_CATEGORY_ID")
   
   private List<ProductFeatureCategoryAppl> productFeatureCategoryAppls = null;
   @OneToMany(fetch=FetchType.LAZY, mappedBy="productCategory", cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REMOVE})
   @JoinColumn(name="PRODUCT_CATEGORY_ID")
   
   private List<ProductPromoCategory> productPromoCategorys = null;
   @OneToMany(fetch=FetchType.LAZY, mappedBy="productCategory", cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REMOVE})
   @JoinColumn(name="PRODUCT_CATEGORY_ID")
   
   private List<ProductStoreSurveyAppl> productStoreSurveyAppls = null;
   private transient List<SalesForecastDetail> salesForecastDetails = null;
   @OneToMany(fetch=FetchType.LAZY, mappedBy="productCategory", cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REMOVE})
   @JoinColumn(name="PRODUCT_CATEGORY_ID")
   
   private List<Subscription> subscriptions = null;
   @OneToMany(fetch=FetchType.LAZY, mappedBy="productCategory", cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REMOVE})
   @JoinColumn(name="PRODUCT_CATEGORY_ID")
   
   private List<TaxAuthorityCategory> taxAuthorityCategorys = null;
   @OneToMany(fetch=FetchType.LAZY, mappedBy="productCategory", cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REMOVE})
   @JoinColumn(name="PRODUCT_CATEGORY_ID")
   
   private List<TaxAuthorityRateProduct> taxAuthorityRateProducts = null;

  /**
   * Default constructor.
   */
  public ProductCategory() {
      super();
      this.baseEntityName = "ProductCategory";
      this.isView = false;
      
      this.primaryKeyNames = new ArrayList<String>();
      this.primaryKeyNames.add("productCategoryId");
      this.allFieldsNames = new ArrayList<String>();
      this.allFieldsNames.add("productCategoryId");this.allFieldsNames.add("productCategoryTypeId");this.allFieldsNames.add("primaryParentCategoryId");this.allFieldsNames.add("categoryName");this.allFieldsNames.add("description");this.allFieldsNames.add("longDescription");this.allFieldsNames.add("categoryImageUrl");this.allFieldsNames.add("linkOneImageUrl");this.allFieldsNames.add("linkTwoImageUrl");this.allFieldsNames.add("detailScreen");this.allFieldsNames.add("showInSelect");this.allFieldsNames.add("lastUpdatedStamp");this.allFieldsNames.add("lastUpdatedTxStamp");this.allFieldsNames.add("createdStamp");this.allFieldsNames.add("createdTxStamp");
      this.nonPrimaryKeyNames = new ArrayList<String>();
      this.nonPrimaryKeyNames.addAll(allFieldsNames);
      this.nonPrimaryKeyNames.removeAll(primaryKeyNames);
  }

  /**
   * Constructor with a repository.
   * @param repository a <code>RepositoryInterface</code> value
   */
  public ProductCategory(RepositoryInterface repository) {
      this();
      initRepository(repository);
  }

    /**
     * Auto generated value setter.
     * @param productCategoryId the productCategoryId to set
     */
    public void setProductCategoryId(String productCategoryId) {
        this.productCategoryId = productCategoryId;
    }
    /**
     * Auto generated value setter.
     * @param productCategoryTypeId the productCategoryTypeId to set
     */
    public void setProductCategoryTypeId(String productCategoryTypeId) {
        this.productCategoryTypeId = productCategoryTypeId;
    }
    /**
     * Auto generated value setter.
     * @param primaryParentCategoryId the primaryParentCategoryId to set
     */
    public void setPrimaryParentCategoryId(String primaryParentCategoryId) {
        this.primaryParentCategoryId = primaryParentCategoryId;
    }
    /**
     * Auto generated value setter.
     * @param categoryName the categoryName to set
     */
    public void setCategoryName(String categoryName) {
        this.categoryName = categoryName;
    }
    /**
     * Auto generated value setter.
     * @param description the description to set
     */
    public void setDescription(String description) {
        this.description = description;
    }
    /**
     * Auto generated value setter.
     * @param longDescription the longDescription to set
     */
    public void setLongDescription(String longDescription) {
        this.longDescription = longDescription;
    }
    /**
     * Auto generated value setter.
     * @param categoryImageUrl the categoryImageUrl to set
     */
    public void setCategoryImageUrl(String categoryImageUrl) {
        this.categoryImageUrl = categoryImageUrl;
    }
    /**
     * Auto generated value setter.
     * @param linkOneImageUrl the linkOneImageUrl to set
     */
    public void setLinkOneImageUrl(String linkOneImageUrl) {
        this.linkOneImageUrl = linkOneImageUrl;
    }
    /**
     * Auto generated value setter.
     * @param linkTwoImageUrl the linkTwoImageUrl to set
     */
    public void setLinkTwoImageUrl(String linkTwoImageUrl) {
        this.linkTwoImageUrl = linkTwoImageUrl;
    }
    /**
     * Auto generated value setter.
     * @param detailScreen the detailScreen to set
     */
    public void setDetailScreen(String detailScreen) {
        this.detailScreen = detailScreen;
    }
    /**
     * Auto generated value setter.
     * @param showInSelect the showInSelect to set
     */
    public void setShowInSelect(String showInSelect) {
        this.showInSelect = showInSelect;
    }
    /**
     * Auto generated value setter.
     * @param lastUpdatedStamp the lastUpdatedStamp to set
     */
    public void setLastUpdatedStamp(Timestamp lastUpdatedStamp) {
        this.lastUpdatedStamp = lastUpdatedStamp;
    }
    /**
     * Auto generated value setter.
     * @param lastUpdatedTxStamp the lastUpdatedTxStamp to set
     */
    public void setLastUpdatedTxStamp(Timestamp lastUpdatedTxStamp) {
        this.lastUpdatedTxStamp = lastUpdatedTxStamp;
    }
    /**
     * Auto generated value setter.
     * @param createdStamp the createdStamp to set
     */
    public void setCreatedStamp(Timestamp createdStamp) {
        this.createdStamp = createdStamp;
    }
    /**
     * Auto generated value setter.
     * @param createdTxStamp the createdTxStamp to set
     */
    public void setCreatedTxStamp(Timestamp createdTxStamp) {
        this.createdTxStamp = createdTxStamp;
    }

    /**
     * Auto generated value accessor.
     * @return <code>String</code>
     */
    public String getProductCategoryId() {
        return this.productCategoryId;
    }
    /**
     * Auto generated value accessor.
     * @return <code>String</code>
     */
    public String getProductCategoryTypeId() {
        return this.productCategoryTypeId;
    }
    /**
     * Auto generated value accessor.
     * @return <code>String</code>
     */
    public String getPrimaryParentCategoryId() {
        return this.primaryParentCategoryId;
    }
    /**
     * Auto generated value accessor.
     * @return <code>String</code>
     */
    public String getCategoryName() {
        return this.categoryName;
    }
    /**
     * Auto generated value accessor.
     * @return <code>String</code>
     */
    public String getDescription() {
        return this.description;
    }
    /**
     * Auto generated value accessor.
     * @return <code>String</code>
     */
    public String getLongDescription() {
        return this.longDescription;
    }
    /**
     * Auto generated value accessor.
     * @return <code>String</code>
     */
    public String getCategoryImageUrl() {
        return this.categoryImageUrl;
    }
    /**
     * Auto generated value accessor.
     * @return <code>String</code>
     */
    public String getLinkOneImageUrl() {
        return this.linkOneImageUrl;
    }
    /**
     * Auto generated value accessor.
     * @return <code>String</code>
     */
    public String getLinkTwoImageUrl() {
        return this.linkTwoImageUrl;
    }
    /**
     * Auto generated value accessor.
     * @return <code>String</code>
     */
    public String getDetailScreen() {
        return this.detailScreen;
    }
    /**
     * Auto generated value accessor.
     * @return <code>String</code>
     */
    public String getShowInSelect() {
        return this.showInSelect;
    }
    /**
     * Auto generated value accessor.
     * @return <code>Timestamp</code>
     */
    public Timestamp getLastUpdatedStamp() {
        return this.lastUpdatedStamp;
    }
    /**
     * Auto generated value accessor.
     * @return <code>Timestamp</code>
     */
    public Timestamp getLastUpdatedTxStamp() {
        return this.lastUpdatedTxStamp;
    }
    /**
     * Auto generated value accessor.
     * @return <code>Timestamp</code>
     */
    public Timestamp getCreatedStamp() {
        return this.createdStamp;
    }
    /**
     * Auto generated value accessor.
     * @return <code>Timestamp</code>
     */
    public Timestamp getCreatedTxStamp() {
        return this.createdTxStamp;
    }

    /**
     * Auto generated method that gets the related <code>ProductCategoryType</code> by the relation named <code>ProductCategoryType</code>.
     * @return the <code>ProductCategoryType</code>
     * @throws RepositoryException if an error occurs
     */
    public ProductCategoryType getProductCategoryType() throws RepositoryException {
        if (this.productCategoryType == null) {
            this.productCategoryType = getRelatedOne(ProductCategoryType.class, "ProductCategoryType");
        }
        return this.productCategoryType;
    }
    /**
     * Auto generated method that gets the related <code>ProductCategoryTypeAttr</code> by the relation named <code>ProductCategoryTypeAttr</code>.
     * @return the list of <code>ProductCategoryTypeAttr</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends ProductCategoryTypeAttr> getProductCategoryTypeAttrs() throws RepositoryException {
        if (this.productCategoryTypeAttrs == null) {
            this.productCategoryTypeAttrs = getRelated(ProductCategoryTypeAttr.class, "ProductCategoryTypeAttr");
        }
        return this.productCategoryTypeAttrs;
    }
    /**
     * Auto generated method that gets the related <code>ProductCategory</code> by the relation named <code>PrimaryParentProductCategory</code>.
     * @return the <code>ProductCategory</code>
     * @throws RepositoryException if an error occurs
     */
    public ProductCategory getPrimaryParentProductCategory() throws RepositoryException {
        if (this.primaryParentProductCategory == null) {
            this.primaryParentProductCategory = getRelatedOne(ProductCategory.class, "PrimaryParentProductCategory");
        }
        return this.primaryParentProductCategory;
    }
    /**
     * Auto generated method that gets the related <code>ProductCategory</code> by the relation named <code>PrimaryChildProductCategory</code>.
     * @return the list of <code>ProductCategory</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends ProductCategory> getPrimaryChildProductCategorys() throws RepositoryException {
        if (this.primaryChildProductCategorys == null) {
            this.primaryChildProductCategorys = getRelated(ProductCategory.class, "PrimaryChildProductCategory");
        }
        return this.primaryChildProductCategorys;
    }
    /**
     * Auto generated method that gets the related <code>AgreementCategoryAppl</code> by the relation named <code>AgreementCategoryAppl</code>.
     * @return the list of <code>AgreementCategoryAppl</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends AgreementCategoryAppl> getAgreementCategoryAppls() throws RepositoryException {
        if (this.agreementCategoryAppls == null) {
            this.agreementCategoryAppls = getRelated(AgreementCategoryAppl.class, "AgreementCategoryAppl");
        }
        return this.agreementCategoryAppls;
    }
    /**
     * Auto generated method that gets the related <code>AgreementTerm</code> by the relation named <code>AgreementTerm</code>.
     * @return the list of <code>AgreementTerm</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends AgreementTerm> getAgreementTerms() throws RepositoryException {
        if (this.agreementTerms == null) {
            this.agreementTerms = getRelated(AgreementTerm.class, "AgreementTerm");
        }
        return this.agreementTerms;
    }
    /**
     * Auto generated method that gets the related <code>MarketInterest</code> by the relation named <code>MarketInterest</code>.
     * @return the list of <code>MarketInterest</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends MarketInterest> getMarketInterests() throws RepositoryException {
        if (this.marketInterests == null) {
            this.marketInterests = getRelated(MarketInterest.class, "MarketInterest");
        }
        return this.marketInterests;
    }
    /**
     * Auto generated method that gets the related <code>OldProductKeywordResult</code> by the relation named <code>OldProductKeywordResult</code>.
     * @return the list of <code>OldProductKeywordResult</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends OldProductKeywordResult> getOldProductKeywordResults() throws RepositoryException {
        if (this.oldProductKeywordResults == null) {
            this.oldProductKeywordResults = getRelated(OldProductKeywordResult.class, "OldProductKeywordResult");
        }
        return this.oldProductKeywordResults;
    }
    /**
     * Auto generated method that gets the related <code>PartyNeed</code> by the relation named <code>PartyNeed</code>.
     * @return the list of <code>PartyNeed</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends PartyNeed> getPartyNeeds() throws RepositoryException {
        if (this.partyNeeds == null) {
            this.partyNeeds = getRelated(PartyNeed.class, "PartyNeed");
        }
        return this.partyNeeds;
    }
    /**
     * Auto generated method that gets the related <code>ProdCatalogCategory</code> by the relation named <code>ProdCatalogCategory</code>.
     * @return the list of <code>ProdCatalogCategory</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends ProdCatalogCategory> getProdCatalogCategorys() throws RepositoryException {
        if (this.prodCatalogCategorys == null) {
            this.prodCatalogCategorys = getRelated(ProdCatalogCategory.class, "ProdCatalogCategory");
        }
        return this.prodCatalogCategorys;
    }
    /**
     * Auto generated method that gets the related <code>Product</code> by the relation named <code>PrimaryProduct</code>.
     * @return the list of <code>Product</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends Product> getPrimaryProducts() throws RepositoryException {
        if (this.primaryProducts == null) {
            this.primaryProducts = getRelated(Product.class, "PrimaryProduct");
        }
        return this.primaryProducts;
    }
    /**
     * Auto generated method that gets the related <code>ProductCategoryAttribute</code> by the relation named <code>ProductCategoryAttribute</code>.
     * @return the list of <code>ProductCategoryAttribute</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends ProductCategoryAttribute> getProductCategoryAttributes() throws RepositoryException {
        if (this.productCategoryAttributes == null) {
            this.productCategoryAttributes = getRelated(ProductCategoryAttribute.class, "ProductCategoryAttribute");
        }
        return this.productCategoryAttributes;
    }
    /**
     * Auto generated method that gets the related <code>ProductCategoryContent</code> by the relation named <code>ProductCategoryContent</code>.
     * @return the list of <code>ProductCategoryContent</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends ProductCategoryContent> getProductCategoryContents() throws RepositoryException {
        if (this.productCategoryContents == null) {
            this.productCategoryContents = getRelated(ProductCategoryContent.class, "ProductCategoryContent");
        }
        return this.productCategoryContents;
    }
    /**
     * Auto generated method that gets the related <code>ProductCategoryGlAccount</code> by the relation named <code>ProductCategoryGlAccount</code>.
     * @return the list of <code>ProductCategoryGlAccount</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends ProductCategoryGlAccount> getProductCategoryGlAccounts() throws RepositoryException {
        if (this.productCategoryGlAccounts == null) {
            this.productCategoryGlAccounts = getRelated(ProductCategoryGlAccount.class, "ProductCategoryGlAccount");
        }
        return this.productCategoryGlAccounts;
    }
    /**
     * Auto generated method that gets the related <code>ProductCategoryLink</code> by the relation named <code>ProductCategoryLink</code>.
     * @return the list of <code>ProductCategoryLink</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends ProductCategoryLink> getProductCategoryLinks() throws RepositoryException {
        if (this.productCategoryLinks == null) {
            this.productCategoryLinks = getRelated(ProductCategoryLink.class, "ProductCategoryLink");
        }
        return this.productCategoryLinks;
    }
    /**
     * Auto generated method that gets the related <code>ProductCategoryMember</code> by the relation named <code>ProductCategoryMember</code>.
     * @return the list of <code>ProductCategoryMember</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends ProductCategoryMember> getProductCategoryMembers() throws RepositoryException {
        if (this.productCategoryMembers == null) {
            this.productCategoryMembers = getRelated(ProductCategoryMember.class, "ProductCategoryMember");
        }
        return this.productCategoryMembers;
    }
    /**
     * Auto generated method that gets the related <code>ProductCategoryRole</code> by the relation named <code>ProductCategoryRole</code>.
     * @return the list of <code>ProductCategoryRole</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends ProductCategoryRole> getProductCategoryRoles() throws RepositoryException {
        if (this.productCategoryRoles == null) {
            this.productCategoryRoles = getRelated(ProductCategoryRole.class, "ProductCategoryRole");
        }
        return this.productCategoryRoles;
    }
    /**
     * Auto generated method that gets the related <code>ProductCategoryRollup</code> by the relation named <code>CurrentProductCategoryRollup</code>.
     * @return the list of <code>ProductCategoryRollup</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends ProductCategoryRollup> getCurrentProductCategoryRollups() throws RepositoryException {
        if (this.currentProductCategoryRollups == null) {
            this.currentProductCategoryRollups = getRelated(ProductCategoryRollup.class, "CurrentProductCategoryRollup");
        }
        return this.currentProductCategoryRollups;
    }
    /**
     * Auto generated method that gets the related <code>ProductCategoryRollup</code> by the relation named <code>ParentProductCategoryRollup</code>.
     * @return the list of <code>ProductCategoryRollup</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends ProductCategoryRollup> getParentProductCategoryRollups() throws RepositoryException {
        if (this.parentProductCategoryRollups == null) {
            this.parentProductCategoryRollups = getRelated(ProductCategoryRollup.class, "ParentProductCategoryRollup");
        }
        return this.parentProductCategoryRollups;
    }
    /**
     * Auto generated method that gets the related <code>ProductFeatureCatGrpAppl</code> by the relation named <code>ProductFeatureCatGrpAppl</code>.
     * @return the list of <code>ProductFeatureCatGrpAppl</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends ProductFeatureCatGrpAppl> getProductFeatureCatGrpAppls() throws RepositoryException {
        if (this.productFeatureCatGrpAppls == null) {
            this.productFeatureCatGrpAppls = getRelated(ProductFeatureCatGrpAppl.class, "ProductFeatureCatGrpAppl");
        }
        return this.productFeatureCatGrpAppls;
    }
    /**
     * Auto generated method that gets the related <code>ProductFeatureCategoryAppl</code> by the relation named <code>ProductFeatureCategoryAppl</code>.
     * @return the list of <code>ProductFeatureCategoryAppl</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends ProductFeatureCategoryAppl> getProductFeatureCategoryAppls() throws RepositoryException {
        if (this.productFeatureCategoryAppls == null) {
            this.productFeatureCategoryAppls = getRelated(ProductFeatureCategoryAppl.class, "ProductFeatureCategoryAppl");
        }
        return this.productFeatureCategoryAppls;
    }
    /**
     * Auto generated method that gets the related <code>ProductPromoCategory</code> by the relation named <code>ProductPromoCategory</code>.
     * @return the list of <code>ProductPromoCategory</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends ProductPromoCategory> getProductPromoCategorys() throws RepositoryException {
        if (this.productPromoCategorys == null) {
            this.productPromoCategorys = getRelated(ProductPromoCategory.class, "ProductPromoCategory");
        }
        return this.productPromoCategorys;
    }
    /**
     * Auto generated method that gets the related <code>ProductStoreSurveyAppl</code> by the relation named <code>ProductStoreSurveyAppl</code>.
     * @return the list of <code>ProductStoreSurveyAppl</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends ProductStoreSurveyAppl> getProductStoreSurveyAppls() throws RepositoryException {
        if (this.productStoreSurveyAppls == null) {
            this.productStoreSurveyAppls = getRelated(ProductStoreSurveyAppl.class, "ProductStoreSurveyAppl");
        }
        return this.productStoreSurveyAppls;
    }
    /**
     * Auto generated method that gets the related <code>SalesForecastDetail</code> by the relation named <code>SalesForecastDetail</code>.
     * @return the list of <code>SalesForecastDetail</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends SalesForecastDetail> getSalesForecastDetails() throws RepositoryException {
        if (this.salesForecastDetails == null) {
            this.salesForecastDetails = getRelated(SalesForecastDetail.class, "SalesForecastDetail");
        }
        return this.salesForecastDetails;
    }
    /**
     * Auto generated method that gets the related <code>Subscription</code> by the relation named <code>Subscription</code>.
     * @return the list of <code>Subscription</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends Subscription> getSubscriptions() throws RepositoryException {
        if (this.subscriptions == null) {
            this.subscriptions = getRelated(Subscription.class, "Subscription");
        }
        return this.subscriptions;
    }
    /**
     * Auto generated method that gets the related <code>TaxAuthorityCategory</code> by the relation named <code>TaxAuthorityCategory</code>.
     * @return the list of <code>TaxAuthorityCategory</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends TaxAuthorityCategory> getTaxAuthorityCategorys() throws RepositoryException {
        if (this.taxAuthorityCategorys == null) {
            this.taxAuthorityCategorys = getRelated(TaxAuthorityCategory.class, "TaxAuthorityCategory");
        }
        return this.taxAuthorityCategorys;
    }
    /**
     * Auto generated method that gets the related <code>TaxAuthorityRateProduct</code> by the relation named <code>TaxAuthorityRateProduct</code>.
     * @return the list of <code>TaxAuthorityRateProduct</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends TaxAuthorityRateProduct> getTaxAuthorityRateProducts() throws RepositoryException {
        if (this.taxAuthorityRateProducts == null) {
            this.taxAuthorityRateProducts = getRelated(TaxAuthorityRateProduct.class, "TaxAuthorityRateProduct");
        }
        return this.taxAuthorityRateProducts;
    }

    /**
     * Auto generated value setter.
     * @param productCategoryType the productCategoryType to set
    */
    public void setProductCategoryType(ProductCategoryType productCategoryType) {
        this.productCategoryType = productCategoryType;
    }
    /**
     * Auto generated value setter.
     * @param productCategoryTypeAttrs the productCategoryTypeAttrs to set
    */
    public void setProductCategoryTypeAttrs(List<ProductCategoryTypeAttr> productCategoryTypeAttrs) {
        this.productCategoryTypeAttrs = productCategoryTypeAttrs;
    }
    /**
     * Auto generated value setter.
     * @param primaryParentProductCategory the primaryParentProductCategory to set
    */
    public void setPrimaryParentProductCategory(ProductCategory primaryParentProductCategory) {
        this.primaryParentProductCategory = primaryParentProductCategory;
    }
    /**
     * Auto generated value setter.
     * @param primaryChildProductCategorys the primaryChildProductCategorys to set
    */
    public void setPrimaryChildProductCategorys(List<ProductCategory> primaryChildProductCategorys) {
        this.primaryChildProductCategorys = primaryChildProductCategorys;
    }
    /**
     * Auto generated value setter.
     * @param agreementCategoryAppls the agreementCategoryAppls to set
    */
    public void setAgreementCategoryAppls(List<AgreementCategoryAppl> agreementCategoryAppls) {
        this.agreementCategoryAppls = agreementCategoryAppls;
    }
    /**
     * Auto generated value setter.
     * @param agreementTerms the agreementTerms to set
    */
    public void setAgreementTerms(List<AgreementTerm> agreementTerms) {
        this.agreementTerms = agreementTerms;
    }
    /**
     * Auto generated value setter.
     * @param marketInterests the marketInterests to set
    */
    public void setMarketInterests(List<MarketInterest> marketInterests) {
        this.marketInterests = marketInterests;
    }
    /**
     * Auto generated value setter.
     * @param oldProductKeywordResults the oldProductKeywordResults to set
    */
    public void setOldProductKeywordResults(List<OldProductKeywordResult> oldProductKeywordResults) {
        this.oldProductKeywordResults = oldProductKeywordResults;
    }
    /**
     * Auto generated value setter.
     * @param partyNeeds the partyNeeds to set
    */
    public void setPartyNeeds(List<PartyNeed> partyNeeds) {
        this.partyNeeds = partyNeeds;
    }
    /**
     * Auto generated value setter.
     * @param prodCatalogCategorys the prodCatalogCategorys to set
    */
    public void setProdCatalogCategorys(List<ProdCatalogCategory> prodCatalogCategorys) {
        this.prodCatalogCategorys = prodCatalogCategorys;
    }
    /**
     * Auto generated value setter.
     * @param primaryProducts the primaryProducts to set
    */
    public void setPrimaryProducts(List<Product> primaryProducts) {
        this.primaryProducts = primaryProducts;
    }
    /**
     * Auto generated value setter.
     * @param productCategoryAttributes the productCategoryAttributes to set
    */
    public void setProductCategoryAttributes(List<ProductCategoryAttribute> productCategoryAttributes) {
        this.productCategoryAttributes = productCategoryAttributes;
    }
    /**
     * Auto generated value setter.
     * @param productCategoryContents the productCategoryContents to set
    */
    public void setProductCategoryContents(List<ProductCategoryContent> productCategoryContents) {
        this.productCategoryContents = productCategoryContents;
    }
    /**
     * Auto generated value setter.
     * @param productCategoryGlAccounts the productCategoryGlAccounts to set
    */
    public void setProductCategoryGlAccounts(List<ProductCategoryGlAccount> productCategoryGlAccounts) {
        this.productCategoryGlAccounts = productCategoryGlAccounts;
    }
    /**
     * Auto generated value setter.
     * @param productCategoryLinks the productCategoryLinks to set
    */
    public void setProductCategoryLinks(List<ProductCategoryLink> productCategoryLinks) {
        this.productCategoryLinks = productCategoryLinks;
    }
    /**
     * Auto generated value setter.
     * @param productCategoryMembers the productCategoryMembers to set
    */
    public void setProductCategoryMembers(List<ProductCategoryMember> productCategoryMembers) {
        this.productCategoryMembers = productCategoryMembers;
    }
    /**
     * Auto generated value setter.
     * @param productCategoryRoles the productCategoryRoles to set
    */
    public void setProductCategoryRoles(List<ProductCategoryRole> productCategoryRoles) {
        this.productCategoryRoles = productCategoryRoles;
    }
    /**
     * Auto generated value setter.
     * @param currentProductCategoryRollups the currentProductCategoryRollups to set
    */
    public void setCurrentProductCategoryRollups(List<ProductCategoryRollup> currentProductCategoryRollups) {
        this.currentProductCategoryRollups = currentProductCategoryRollups;
    }
    /**
     * Auto generated value setter.
     * @param parentProductCategoryRollups the parentProductCategoryRollups to set
    */
    public void setParentProductCategoryRollups(List<ProductCategoryRollup> parentProductCategoryRollups) {
        this.parentProductCategoryRollups = parentProductCategoryRollups;
    }
    /**
     * Auto generated value setter.
     * @param productFeatureCatGrpAppls the productFeatureCatGrpAppls to set
    */
    public void setProductFeatureCatGrpAppls(List<ProductFeatureCatGrpAppl> productFeatureCatGrpAppls) {
        this.productFeatureCatGrpAppls = productFeatureCatGrpAppls;
    }
    /**
     * Auto generated value setter.
     * @param productFeatureCategoryAppls the productFeatureCategoryAppls to set
    */
    public void setProductFeatureCategoryAppls(List<ProductFeatureCategoryAppl> productFeatureCategoryAppls) {
        this.productFeatureCategoryAppls = productFeatureCategoryAppls;
    }
    /**
     * Auto generated value setter.
     * @param productPromoCategorys the productPromoCategorys to set
    */
    public void setProductPromoCategorys(List<ProductPromoCategory> productPromoCategorys) {
        this.productPromoCategorys = productPromoCategorys;
    }
    /**
     * Auto generated value setter.
     * @param productStoreSurveyAppls the productStoreSurveyAppls to set
    */
    public void setProductStoreSurveyAppls(List<ProductStoreSurveyAppl> productStoreSurveyAppls) {
        this.productStoreSurveyAppls = productStoreSurveyAppls;
    }
    /**
     * Auto generated value setter.
     * @param salesForecastDetails the salesForecastDetails to set
    */
    public void setSalesForecastDetails(List<SalesForecastDetail> salesForecastDetails) {
        this.salesForecastDetails = salesForecastDetails;
    }
    /**
     * Auto generated value setter.
     * @param subscriptions the subscriptions to set
    */
    public void setSubscriptions(List<Subscription> subscriptions) {
        this.subscriptions = subscriptions;
    }
    /**
     * Auto generated value setter.
     * @param taxAuthorityCategorys the taxAuthorityCategorys to set
    */
    public void setTaxAuthorityCategorys(List<TaxAuthorityCategory> taxAuthorityCategorys) {
        this.taxAuthorityCategorys = taxAuthorityCategorys;
    }
    /**
     * Auto generated value setter.
     * @param taxAuthorityRateProducts the taxAuthorityRateProducts to set
    */
    public void setTaxAuthorityRateProducts(List<TaxAuthorityRateProduct> taxAuthorityRateProducts) {
        this.taxAuthorityRateProducts = taxAuthorityRateProducts;
    }

    /**
     * Auto generated method that add item to collection.
     */
    public void addAgreementCategoryAppl(AgreementCategoryAppl agreementCategoryAppl) {
        if (this.agreementCategoryAppls == null) {
            this.agreementCategoryAppls = new ArrayList<AgreementCategoryAppl>();
        }
        this.agreementCategoryAppls.add(agreementCategoryAppl);
    }
    /**
     * Auto generated method that remove item from collection.
     */
    public void removeAgreementCategoryAppl(AgreementCategoryAppl agreementCategoryAppl) {
        if (this.agreementCategoryAppls == null) {
            return;
        }
        this.agreementCategoryAppls.remove(agreementCategoryAppl);
    }
    /**
     * Auto generated method that clear items from collection.
     */
    public void clearAgreementCategoryAppl() {
        if (this.agreementCategoryAppls == null) {
            return;
        }
        this.agreementCategoryAppls.clear();
    }
    /**
     * Auto generated method that add item to collection.
     */
    public void addMarketInterest(MarketInterest marketInterest) {
        if (this.marketInterests == null) {
            this.marketInterests = new ArrayList<MarketInterest>();
        }
        this.marketInterests.add(marketInterest);
    }
    /**
     * Auto generated method that remove item from collection.
     */
    public void removeMarketInterest(MarketInterest marketInterest) {
        if (this.marketInterests == null) {
            return;
        }
        this.marketInterests.remove(marketInterest);
    }
    /**
     * Auto generated method that clear items from collection.
     */
    public void clearMarketInterest() {
        if (this.marketInterests == null) {
            return;
        }
        this.marketInterests.clear();
    }
    /**
     * Auto generated method that add item to collection.
     */
    public void addProdCatalogCategory(ProdCatalogCategory prodCatalogCategory) {
        if (this.prodCatalogCategorys == null) {
            this.prodCatalogCategorys = new ArrayList<ProdCatalogCategory>();
        }
        this.prodCatalogCategorys.add(prodCatalogCategory);
    }
    /**
     * Auto generated method that remove item from collection.
     */
    public void removeProdCatalogCategory(ProdCatalogCategory prodCatalogCategory) {
        if (this.prodCatalogCategorys == null) {
            return;
        }
        this.prodCatalogCategorys.remove(prodCatalogCategory);
    }
    /**
     * Auto generated method that clear items from collection.
     */
    public void clearProdCatalogCategory() {
        if (this.prodCatalogCategorys == null) {
            return;
        }
        this.prodCatalogCategorys.clear();
    }
    /**
     * Auto generated method that add item to collection.
     */
    public void addProductCategoryAttribute(ProductCategoryAttribute productCategoryAttribute) {
        if (this.productCategoryAttributes == null) {
            this.productCategoryAttributes = new ArrayList<ProductCategoryAttribute>();
        }
        this.productCategoryAttributes.add(productCategoryAttribute);
    }
    /**
     * Auto generated method that remove item from collection.
     */
    public void removeProductCategoryAttribute(ProductCategoryAttribute productCategoryAttribute) {
        if (this.productCategoryAttributes == null) {
            return;
        }
        this.productCategoryAttributes.remove(productCategoryAttribute);
    }
    /**
     * Auto generated method that clear items from collection.
     */
    public void clearProductCategoryAttribute() {
        if (this.productCategoryAttributes == null) {
            return;
        }
        this.productCategoryAttributes.clear();
    }
    /**
     * Auto generated method that add item to collection.
     */
    public void addProductCategoryContent(ProductCategoryContent productCategoryContent) {
        if (this.productCategoryContents == null) {
            this.productCategoryContents = new ArrayList<ProductCategoryContent>();
        }
        this.productCategoryContents.add(productCategoryContent);
    }
    /**
     * Auto generated method that remove item from collection.
     */
    public void removeProductCategoryContent(ProductCategoryContent productCategoryContent) {
        if (this.productCategoryContents == null) {
            return;
        }
        this.productCategoryContents.remove(productCategoryContent);
    }
    /**
     * Auto generated method that clear items from collection.
     */
    public void clearProductCategoryContent() {
        if (this.productCategoryContents == null) {
            return;
        }
        this.productCategoryContents.clear();
    }
    /**
     * Auto generated method that add item to collection.
     */
    public void addProductCategoryGlAccount(ProductCategoryGlAccount productCategoryGlAccount) {
        if (this.productCategoryGlAccounts == null) {
            this.productCategoryGlAccounts = new ArrayList<ProductCategoryGlAccount>();
        }
        this.productCategoryGlAccounts.add(productCategoryGlAccount);
    }
    /**
     * Auto generated method that remove item from collection.
     */
    public void removeProductCategoryGlAccount(ProductCategoryGlAccount productCategoryGlAccount) {
        if (this.productCategoryGlAccounts == null) {
            return;
        }
        this.productCategoryGlAccounts.remove(productCategoryGlAccount);
    }
    /**
     * Auto generated method that clear items from collection.
     */
    public void clearProductCategoryGlAccount() {
        if (this.productCategoryGlAccounts == null) {
            return;
        }
        this.productCategoryGlAccounts.clear();
    }
    /**
     * Auto generated method that add item to collection.
     */
    public void addProductCategoryLink(ProductCategoryLink productCategoryLink) {
        if (this.productCategoryLinks == null) {
            this.productCategoryLinks = new ArrayList<ProductCategoryLink>();
        }
        this.productCategoryLinks.add(productCategoryLink);
    }
    /**
     * Auto generated method that remove item from collection.
     */
    public void removeProductCategoryLink(ProductCategoryLink productCategoryLink) {
        if (this.productCategoryLinks == null) {
            return;
        }
        this.productCategoryLinks.remove(productCategoryLink);
    }
    /**
     * Auto generated method that clear items from collection.
     */
    public void clearProductCategoryLink() {
        if (this.productCategoryLinks == null) {
            return;
        }
        this.productCategoryLinks.clear();
    }
    /**
     * Auto generated method that add item to collection.
     */
    public void addProductCategoryMember(ProductCategoryMember productCategoryMember) {
        if (this.productCategoryMembers == null) {
            this.productCategoryMembers = new ArrayList<ProductCategoryMember>();
        }
        this.productCategoryMembers.add(productCategoryMember);
    }
    /**
     * Auto generated method that remove item from collection.
     */
    public void removeProductCategoryMember(ProductCategoryMember productCategoryMember) {
        if (this.productCategoryMembers == null) {
            return;
        }
        this.productCategoryMembers.remove(productCategoryMember);
    }
    /**
     * Auto generated method that clear items from collection.
     */
    public void clearProductCategoryMember() {
        if (this.productCategoryMembers == null) {
            return;
        }
        this.productCategoryMembers.clear();
    }
    /**
     * Auto generated method that add item to collection.
     */
    public void addProductCategoryRole(ProductCategoryRole productCategoryRole) {
        if (this.productCategoryRoles == null) {
            this.productCategoryRoles = new ArrayList<ProductCategoryRole>();
        }
        this.productCategoryRoles.add(productCategoryRole);
    }
    /**
     * Auto generated method that remove item from collection.
     */
    public void removeProductCategoryRole(ProductCategoryRole productCategoryRole) {
        if (this.productCategoryRoles == null) {
            return;
        }
        this.productCategoryRoles.remove(productCategoryRole);
    }
    /**
     * Auto generated method that clear items from collection.
     */
    public void clearProductCategoryRole() {
        if (this.productCategoryRoles == null) {
            return;
        }
        this.productCategoryRoles.clear();
    }
    /**
     * Auto generated method that add item to collection.
     */
    public void addCurrentProductCategoryRollup(ProductCategoryRollup currentProductCategoryRollup) {
        if (this.currentProductCategoryRollups == null) {
            this.currentProductCategoryRollups = new ArrayList<ProductCategoryRollup>();
        }
        this.currentProductCategoryRollups.add(currentProductCategoryRollup);
    }
    /**
     * Auto generated method that remove item from collection.
     */
    public void removeCurrentProductCategoryRollup(ProductCategoryRollup currentProductCategoryRollup) {
        if (this.currentProductCategoryRollups == null) {
            return;
        }
        this.currentProductCategoryRollups.remove(currentProductCategoryRollup);
    }
    /**
     * Auto generated method that clear items from collection.
     */
    public void clearCurrentProductCategoryRollup() {
        if (this.currentProductCategoryRollups == null) {
            return;
        }
        this.currentProductCategoryRollups.clear();
    }
    /**
     * Auto generated method that add item to collection.
     */
    public void addParentProductCategoryRollup(ProductCategoryRollup parentProductCategoryRollup) {
        if (this.parentProductCategoryRollups == null) {
            this.parentProductCategoryRollups = new ArrayList<ProductCategoryRollup>();
        }
        this.parentProductCategoryRollups.add(parentProductCategoryRollup);
    }
    /**
     * Auto generated method that remove item from collection.
     */
    public void removeParentProductCategoryRollup(ProductCategoryRollup parentProductCategoryRollup) {
        if (this.parentProductCategoryRollups == null) {
            return;
        }
        this.parentProductCategoryRollups.remove(parentProductCategoryRollup);
    }
    /**
     * Auto generated method that clear items from collection.
     */
    public void clearParentProductCategoryRollup() {
        if (this.parentProductCategoryRollups == null) {
            return;
        }
        this.parentProductCategoryRollups.clear();
    }
    /**
     * Auto generated method that add item to collection.
     */
    public void addProductFeatureCatGrpAppl(ProductFeatureCatGrpAppl productFeatureCatGrpAppl) {
        if (this.productFeatureCatGrpAppls == null) {
            this.productFeatureCatGrpAppls = new ArrayList<ProductFeatureCatGrpAppl>();
        }
        this.productFeatureCatGrpAppls.add(productFeatureCatGrpAppl);
    }
    /**
     * Auto generated method that remove item from collection.
     */
    public void removeProductFeatureCatGrpAppl(ProductFeatureCatGrpAppl productFeatureCatGrpAppl) {
        if (this.productFeatureCatGrpAppls == null) {
            return;
        }
        this.productFeatureCatGrpAppls.remove(productFeatureCatGrpAppl);
    }
    /**
     * Auto generated method that clear items from collection.
     */
    public void clearProductFeatureCatGrpAppl() {
        if (this.productFeatureCatGrpAppls == null) {
            return;
        }
        this.productFeatureCatGrpAppls.clear();
    }
    /**
     * Auto generated method that add item to collection.
     */
    public void addProductFeatureCategoryAppl(ProductFeatureCategoryAppl productFeatureCategoryAppl) {
        if (this.productFeatureCategoryAppls == null) {
            this.productFeatureCategoryAppls = new ArrayList<ProductFeatureCategoryAppl>();
        }
        this.productFeatureCategoryAppls.add(productFeatureCategoryAppl);
    }
    /**
     * Auto generated method that remove item from collection.
     */
    public void removeProductFeatureCategoryAppl(ProductFeatureCategoryAppl productFeatureCategoryAppl) {
        if (this.productFeatureCategoryAppls == null) {
            return;
        }
        this.productFeatureCategoryAppls.remove(productFeatureCategoryAppl);
    }
    /**
     * Auto generated method that clear items from collection.
     */
    public void clearProductFeatureCategoryAppl() {
        if (this.productFeatureCategoryAppls == null) {
            return;
        }
        this.productFeatureCategoryAppls.clear();
    }
    /**
     * Auto generated method that add item to collection.
     */
    public void addProductPromoCategory(ProductPromoCategory productPromoCategory) {
        if (this.productPromoCategorys == null) {
            this.productPromoCategorys = new ArrayList<ProductPromoCategory>();
        }
        this.productPromoCategorys.add(productPromoCategory);
    }
    /**
     * Auto generated method that remove item from collection.
     */
    public void removeProductPromoCategory(ProductPromoCategory productPromoCategory) {
        if (this.productPromoCategorys == null) {
            return;
        }
        this.productPromoCategorys.remove(productPromoCategory);
    }
    /**
     * Auto generated method that clear items from collection.
     */
    public void clearProductPromoCategory() {
        if (this.productPromoCategorys == null) {
            return;
        }
        this.productPromoCategorys.clear();
    }
    /**
     * Auto generated method that add item to collection.
     */
    public void addTaxAuthorityCategory(TaxAuthorityCategory taxAuthorityCategory) {
        if (this.taxAuthorityCategorys == null) {
            this.taxAuthorityCategorys = new ArrayList<TaxAuthorityCategory>();
        }
        this.taxAuthorityCategorys.add(taxAuthorityCategory);
    }
    /**
     * Auto generated method that remove item from collection.
     */
    public void removeTaxAuthorityCategory(TaxAuthorityCategory taxAuthorityCategory) {
        if (this.taxAuthorityCategorys == null) {
            return;
        }
        this.taxAuthorityCategorys.remove(taxAuthorityCategory);
    }
    /**
     * Auto generated method that clear items from collection.
     */
    public void clearTaxAuthorityCategory() {
        if (this.taxAuthorityCategorys == null) {
            return;
        }
        this.taxAuthorityCategorys.clear();
    }

    /** {@inheritDoc} */
    @Override
    public void fromMap(Map<String, Object> mapValue) {
        preInit();
        setProductCategoryId((String) mapValue.get("productCategoryId"));
        setProductCategoryTypeId((String) mapValue.get("productCategoryTypeId"));
        setPrimaryParentCategoryId((String) mapValue.get("primaryParentCategoryId"));
        setCategoryName((String) mapValue.get("categoryName"));
        setDescription((String) mapValue.get("description"));
        setLongDescription((String) mapValue.get("longDescription"));
        setCategoryImageUrl((String) mapValue.get("categoryImageUrl"));
        setLinkOneImageUrl((String) mapValue.get("linkOneImageUrl"));
        setLinkTwoImageUrl((String) mapValue.get("linkTwoImageUrl"));
        setDetailScreen((String) mapValue.get("detailScreen"));
        setShowInSelect((String) mapValue.get("showInSelect"));
        setLastUpdatedStamp((Timestamp) mapValue.get("lastUpdatedStamp"));
        setLastUpdatedTxStamp((Timestamp) mapValue.get("lastUpdatedTxStamp"));
        setCreatedStamp((Timestamp) mapValue.get("createdStamp"));
        setCreatedTxStamp((Timestamp) mapValue.get("createdTxStamp"));
        postInit();
    }

    /** {@inheritDoc} */
    @Override
    public Map<String, Object> toMap() {
        Map<String, Object> mapValue = new FastMap<String, Object>();
        mapValue.put("productCategoryId", getProductCategoryId());
        mapValue.put("productCategoryTypeId", getProductCategoryTypeId());
        mapValue.put("primaryParentCategoryId", getPrimaryParentCategoryId());
        mapValue.put("categoryName", getCategoryName());
        mapValue.put("description", getDescription());
        mapValue.put("longDescription", getLongDescription());
        mapValue.put("categoryImageUrl", getCategoryImageUrl());
        mapValue.put("linkOneImageUrl", getLinkOneImageUrl());
        mapValue.put("linkTwoImageUrl", getLinkTwoImageUrl());
        mapValue.put("detailScreen", getDetailScreen());
        mapValue.put("showInSelect", getShowInSelect());
        mapValue.put("lastUpdatedStamp", getLastUpdatedStamp());
        mapValue.put("lastUpdatedTxStamp", getLastUpdatedTxStamp());
        mapValue.put("createdStamp", getCreatedStamp());
        mapValue.put("createdTxStamp", getCreatedTxStamp());
        return mapValue;
    }


}
