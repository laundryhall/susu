package org.opentaps.base.entities;

/*
 * Copyright (c) Open Source Strategies, Inc.
 *
 * Opentaps is free software: you can redistribute it and/or modify it
 * under the terms of the GNU Affero General Public License as published
 * by the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Opentaps is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with Opentaps.  If not, see <http://www.gnu.org/licenses/>.
 */

// DO NOT EDIT THIS FILE!  THIS IS AUTO GENERATED AND WILL GET WRITTEN OVER PERIODICALLY WHEN THE DATA MODEL CHANGES
// EXTEND THIS CLASS INSTEAD.

import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;

import javolution.util.FastMap;

import org.opentaps.foundation.entity.Entity;
import org.opentaps.foundation.entity.EntityFieldInterface;
import org.opentaps.foundation.repository.RepositoryException;
import org.opentaps.foundation.repository.RepositoryInterface;
import javax.persistence.*;
import org.hibernate.search.annotations.*;
import java.lang.String;
import java.sql.Timestamp;

/**
 * Auto generated base entity PaymentMethodAndGiftCard.
 */
@javax.persistence.Entity
@NamedNativeQuery(name="selectPaymentMethodAndGiftCards", query="SELECT PM.PAYMENT_METHOD_ID AS \"paymentMethodId\",PM.PAYMENT_METHOD_TYPE_ID AS \"paymentMethodTypeId\",PM.PARTY_ID AS \"partyId\",PM.GL_ACCOUNT_ID AS \"glAccountId\",PM.FROM_DATE AS \"fromDate\",PM.THRU_DATE AS \"thruDate\",GC.CARD_NUMBER AS \"cardNumber\",GC.PIN_NUMBER AS \"pinNumber\",GC.EXPIRE_DATE AS \"expireDate\",GC.CONTACT_MECH_ID AS \"contactMechId\" FROM PAYMENT_METHOD PM INNER JOIN GIFT_CARD GC ON PM.PAYMENT_METHOD_ID = GC.PAYMENT_METHOD_ID", resultSetMapping="PaymentMethodAndGiftCardMapping")
@SqlResultSetMapping(name="PaymentMethodAndGiftCardMapping", entities={
@EntityResult(entityClass=PaymentMethodAndGiftCard.class, fields = {
@FieldResult(name="paymentMethodId", column="paymentMethodId")
,@FieldResult(name="paymentMethodTypeId", column="paymentMethodTypeId")
,@FieldResult(name="partyId", column="partyId")
,@FieldResult(name="glAccountId", column="glAccountId")
,@FieldResult(name="fromDate", column="fromDate")
,@FieldResult(name="thruDate", column="thruDate")
,@FieldResult(name="cardNumber", column="cardNumber")
,@FieldResult(name="pinNumber", column="pinNumber")
,@FieldResult(name="expireDate", column="expireDate")
,@FieldResult(name="contactMechId", column="contactMechId")
})})
@org.hibernate.annotations.Entity(mutable = false)
@org.hibernate.annotations.AccessType("field")
public class PaymentMethodAndGiftCard extends Entity {
static {
java.util.Map<String, String> fields = new java.util.HashMap<String, String>();
        fields.put("paymentMethodId", "PM.PAYMENT_METHOD_ID");
        fields.put("paymentMethodTypeId", "PM.PAYMENT_METHOD_TYPE_ID");
        fields.put("partyId", "PM.PARTY_ID");
        fields.put("glAccountId", "PM.GL_ACCOUNT_ID");
        fields.put("fromDate", "PM.FROM_DATE");
        fields.put("thruDate", "PM.THRU_DATE");
        fields.put("cardNumber", "GC.CARD_NUMBER");
        fields.put("pinNumber", "GC.PIN_NUMBER");
        fields.put("expireDate", "GC.EXPIRE_DATE");
        fields.put("contactMechId", "GC.CONTACT_MECH_ID");
fieldMapColumns.put("PaymentMethodAndGiftCard", fields);
}
  public static enum Fields implements EntityFieldInterface<PaymentMethodAndGiftCard> {
    paymentMethodId("paymentMethodId"),
    paymentMethodTypeId("paymentMethodTypeId"),
    partyId("partyId"),
    glAccountId("glAccountId"),
    fromDate("fromDate"),
    thruDate("thruDate"),
    cardNumber("cardNumber"),
    pinNumber("pinNumber"),
    expireDate("expireDate"),
    contactMechId("contactMechId");
    private final String fieldName;
    private Fields(String name) { fieldName = name; }
    /** {@inheritDoc} */
    public String getName() { return fieldName; }
    /** {@inheritDoc} */
    public String asc() { return fieldName + " ASC"; }
    /** {@inheritDoc} */
    public String desc() { return fieldName + " DESC"; }
  }

    @Id
   private String paymentMethodId;
    
   private String paymentMethodTypeId;
    
   private String partyId;
    
   private String glAccountId;
    
   private Timestamp fromDate;
    
   private Timestamp thruDate;
    
   private String cardNumber;
    
   private String pinNumber;
    
   private String expireDate;
    
   private String contactMechId;
   @ManyToOne(cascade = {CascadeType.PERSIST, CascadeType.MERGE}, fetch=FetchType.LAZY)
   @JoinColumn(name="PAYMENT_METHOD_ID", insertable=false, updatable=false)
   @org.hibernate.annotations.Generated(
      org.hibernate.annotations.GenerationTime.ALWAYS
   )
   
   private PaymentMethod paymentMethod = null;
   @ManyToOne(cascade = {CascadeType.PERSIST, CascadeType.MERGE}, fetch=FetchType.LAZY)
   @JoinColumn(name="PAYMENT_METHOD_TYPE_ID", insertable=false, updatable=false)
   @org.hibernate.annotations.Generated(
      org.hibernate.annotations.GenerationTime.ALWAYS
   )
   
   private PaymentMethodType paymentMethodType = null;
   @ManyToOne(cascade = {CascadeType.PERSIST, CascadeType.MERGE}, fetch=FetchType.LAZY)
   @JoinColumn(name="PAYMENT_METHOD_ID", insertable=false, updatable=false)
   @org.hibernate.annotations.Generated(
      org.hibernate.annotations.GenerationTime.ALWAYS
   )
   
   private GiftCard giftCard = null;
   @ManyToOne(cascade = {CascadeType.PERSIST, CascadeType.MERGE}, fetch=FetchType.LAZY)
   @JoinColumn(name="CONTACT_MECH_ID", insertable=false, updatable=false)
   @org.hibernate.annotations.Generated(
      org.hibernate.annotations.GenerationTime.ALWAYS
   )
   
   private PostalAddress postalAddress = null;

  /**
   * Default constructor.
   */
  public PaymentMethodAndGiftCard() {
      super();
      this.baseEntityName = "PaymentMethodAndGiftCard";
      this.isView = true;
      
      this.primaryKeyNames = new ArrayList<String>();
      this.primaryKeyNames.add("paymentMethodId");
      this.allFieldsNames = new ArrayList<String>();
      this.allFieldsNames.add("paymentMethodId");this.allFieldsNames.add("paymentMethodTypeId");this.allFieldsNames.add("partyId");this.allFieldsNames.add("glAccountId");this.allFieldsNames.add("fromDate");this.allFieldsNames.add("thruDate");this.allFieldsNames.add("cardNumber");this.allFieldsNames.add("pinNumber");this.allFieldsNames.add("expireDate");this.allFieldsNames.add("contactMechId");
      this.nonPrimaryKeyNames = new ArrayList<String>();
      this.nonPrimaryKeyNames.addAll(allFieldsNames);
      this.nonPrimaryKeyNames.removeAll(primaryKeyNames);
  }

  /**
   * Constructor with a repository.
   * @param repository a <code>RepositoryInterface</code> value
   */
  public PaymentMethodAndGiftCard(RepositoryInterface repository) {
      this();
      initRepository(repository);
  }

    /**
     * This is a view-entity, so the setter methods will be private to this class and for use in its fromMap constructor only
     */
    /**
     * Auto generated value setter.
     * @param paymentMethodId the paymentMethodId to set
     */
    public void setPaymentMethodId(String paymentMethodId) {
        this.paymentMethodId = paymentMethodId;
    }
    /**
     * Auto generated value setter.
     * @param paymentMethodTypeId the paymentMethodTypeId to set
     */
    public void setPaymentMethodTypeId(String paymentMethodTypeId) {
        this.paymentMethodTypeId = paymentMethodTypeId;
    }
    /**
     * Auto generated value setter.
     * @param partyId the partyId to set
     */
    public void setPartyId(String partyId) {
        this.partyId = partyId;
    }
    /**
     * Auto generated value setter.
     * @param glAccountId the glAccountId to set
     */
    public void setGlAccountId(String glAccountId) {
        this.glAccountId = glAccountId;
    }
    /**
     * Auto generated value setter.
     * @param fromDate the fromDate to set
     */
    public void setFromDate(Timestamp fromDate) {
        this.fromDate = fromDate;
    }
    /**
     * Auto generated value setter.
     * @param thruDate the thruDate to set
     */
    public void setThruDate(Timestamp thruDate) {
        this.thruDate = thruDate;
    }
    /**
     * Auto generated value setter.
     * @param cardNumber the cardNumber to set
     */
    public void setCardNumber(String cardNumber) {
        this.cardNumber = cardNumber;
    }
    /**
     * Auto generated value setter.
     * @param pinNumber the pinNumber to set
     */
    public void setPinNumber(String pinNumber) {
        this.pinNumber = pinNumber;
    }
    /**
     * Auto generated value setter.
     * @param expireDate the expireDate to set
     */
    public void setExpireDate(String expireDate) {
        this.expireDate = expireDate;
    }
    /**
     * Auto generated value setter.
     * @param contactMechId the contactMechId to set
     */
    public void setContactMechId(String contactMechId) {
        this.contactMechId = contactMechId;
    }

    /**
     * Auto generated value accessor.
     * @return <code>String</code>
     */
    public String getPaymentMethodId() {
        return this.paymentMethodId;
    }
    /**
     * Auto generated value accessor.
     * @return <code>String</code>
     */
    public String getPaymentMethodTypeId() {
        return this.paymentMethodTypeId;
    }
    /**
     * Auto generated value accessor.
     * @return <code>String</code>
     */
    public String getPartyId() {
        return this.partyId;
    }
    /**
     * Auto generated value accessor.
     * @return <code>String</code>
     */
    public String getGlAccountId() {
        return this.glAccountId;
    }
    /**
     * Auto generated value accessor.
     * @return <code>Timestamp</code>
     */
    public Timestamp getFromDate() {
        return this.fromDate;
    }
    /**
     * Auto generated value accessor.
     * @return <code>Timestamp</code>
     */
    public Timestamp getThruDate() {
        return this.thruDate;
    }
    /**
     * Auto generated value accessor.
     * @return <code>String</code>
     */
    public String getCardNumber() {
        return this.cardNumber;
    }
    /**
     * Auto generated value accessor.
     * @return <code>String</code>
     */
    public String getPinNumber() {
        return this.pinNumber;
    }
    /**
     * Auto generated value accessor.
     * @return <code>String</code>
     */
    public String getExpireDate() {
        return this.expireDate;
    }
    /**
     * Auto generated value accessor.
     * @return <code>String</code>
     */
    public String getContactMechId() {
        return this.contactMechId;
    }

    /**
     * Auto generated method that gets the related <code>PaymentMethod</code> by the relation named <code>PaymentMethod</code>.
     * @return the <code>PaymentMethod</code>
     * @throws RepositoryException if an error occurs
     */
    public PaymentMethod getPaymentMethod() throws RepositoryException {
        if (this.paymentMethod == null) {
            this.paymentMethod = getRelatedOne(PaymentMethod.class, "PaymentMethod");
        }
        return this.paymentMethod;
    }
    /**
     * Auto generated method that gets the related <code>PaymentMethodType</code> by the relation named <code>PaymentMethodType</code>.
     * @return the <code>PaymentMethodType</code>
     * @throws RepositoryException if an error occurs
     */
    public PaymentMethodType getPaymentMethodType() throws RepositoryException {
        if (this.paymentMethodType == null) {
            this.paymentMethodType = getRelatedOne(PaymentMethodType.class, "PaymentMethodType");
        }
        return this.paymentMethodType;
    }
    /**
     * Auto generated method that gets the related <code>GiftCard</code> by the relation named <code>GiftCard</code>.
     * @return the <code>GiftCard</code>
     * @throws RepositoryException if an error occurs
     */
    public GiftCard getGiftCard() throws RepositoryException {
        if (this.giftCard == null) {
            this.giftCard = getRelatedOne(GiftCard.class, "GiftCard");
        }
        return this.giftCard;
    }
    /**
     * Auto generated method that gets the related <code>PostalAddress</code> by the relation named <code>PostalAddress</code>.
     * @return the <code>PostalAddress</code>
     * @throws RepositoryException if an error occurs
     */
    public PostalAddress getPostalAddress() throws RepositoryException {
        if (this.postalAddress == null) {
            this.postalAddress = getRelatedOne(PostalAddress.class, "PostalAddress");
        }
        return this.postalAddress;
    }

    /**
     * Auto generated value setter.
     * @param paymentMethod the paymentMethod to set
    */
    public void setPaymentMethod(PaymentMethod paymentMethod) {
        this.paymentMethod = paymentMethod;
    }
    /**
     * Auto generated value setter.
     * @param paymentMethodType the paymentMethodType to set
    */
    public void setPaymentMethodType(PaymentMethodType paymentMethodType) {
        this.paymentMethodType = paymentMethodType;
    }
    /**
     * Auto generated value setter.
     * @param giftCard the giftCard to set
    */
    public void setGiftCard(GiftCard giftCard) {
        this.giftCard = giftCard;
    }
    /**
     * Auto generated value setter.
     * @param postalAddress the postalAddress to set
    */
    public void setPostalAddress(PostalAddress postalAddress) {
        this.postalAddress = postalAddress;
    }


    /** {@inheritDoc} */
    @Override
    public void fromMap(Map<String, Object> mapValue) {
        preInit();
        setPaymentMethodId((String) mapValue.get("paymentMethodId"));
        setPaymentMethodTypeId((String) mapValue.get("paymentMethodTypeId"));
        setPartyId((String) mapValue.get("partyId"));
        setGlAccountId((String) mapValue.get("glAccountId"));
        setFromDate((Timestamp) mapValue.get("fromDate"));
        setThruDate((Timestamp) mapValue.get("thruDate"));
        setCardNumber((String) mapValue.get("cardNumber"));
        setPinNumber((String) mapValue.get("pinNumber"));
        setExpireDate((String) mapValue.get("expireDate"));
        setContactMechId((String) mapValue.get("contactMechId"));
        postInit();
    }

    /** {@inheritDoc} */
    @Override
    public Map<String, Object> toMap() {
        Map<String, Object> mapValue = new FastMap<String, Object>();
        mapValue.put("paymentMethodId", getPaymentMethodId());
        mapValue.put("paymentMethodTypeId", getPaymentMethodTypeId());
        mapValue.put("partyId", getPartyId());
        mapValue.put("glAccountId", getGlAccountId());
        mapValue.put("fromDate", getFromDate());
        mapValue.put("thruDate", getThruDate());
        mapValue.put("cardNumber", getCardNumber());
        mapValue.put("pinNumber", getPinNumber());
        mapValue.put("expireDate", getExpireDate());
        mapValue.put("contactMechId", getContactMechId());
        return mapValue;
    }


}
