package org.opentaps.base.entities;

/*
 * Copyright (c) Open Source Strategies, Inc.
 *
 * Opentaps is free software: you can redistribute it and/or modify it
 * under the terms of the GNU Affero General Public License as published
 * by the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Opentaps is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with Opentaps.  If not, see <http://www.gnu.org/licenses/>.
 */

// DO NOT EDIT THIS FILE!  THIS IS AUTO GENERATED AND WILL GET WRITTEN OVER PERIODICALLY WHEN THE DATA MODEL CHANGES
// EXTEND THIS CLASS INSTEAD.

import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;

import javolution.util.FastMap;

import org.opentaps.foundation.entity.Entity;
import org.opentaps.foundation.entity.EntityFieldInterface;
import org.opentaps.foundation.repository.RepositoryException;
import org.opentaps.foundation.repository.RepositoryInterface;
import javax.persistence.*;
import org.hibernate.search.annotations.*;
import java.lang.String;
import java.sql.Timestamp;

/**
 * Auto generated base entity ContactListPartyAndContactMech.
 */
@javax.persistence.Entity
@NamedNativeQuery(name="selectContactListPartyAndContactMechs", query="SELECT PCM.FROM_DATE AS \"fromDate\",PCM.THRU_DATE AS \"thruDate\",CLP.CONTACT_LIST_ID AS \"contactListId\",CLP.PARTY_ID AS \"partyId\",CLP.FROM_DATE AS \"fromDate\",CLP.THRU_DATE AS \"thruDate\",CLP.STATUS_ID AS \"statusId\",CLP.PREFERRED_CONTACT_MECH_ID AS \"preferredContactMechId\",CM.CONTACT_MECH_ID AS \"contactMechId\",CM.CONTACT_MECH_TYPE_ID AS \"contactMechTypeId\",CM.INFO_STRING AS \"infoString\" FROM CONTACT_LIST_PARTY CLP INNER JOIN CONTACT_MECH CM ON CLP.PREFERRED_CONTACT_MECH_ID = CM.CONTACT_MECH_ID INNER JOIN PARTY_CONTACT_MECH PCM ON CLP.PREFERRED_CONTACT_MECH_ID = PCM.CONTACT_MECH_ID", resultSetMapping="ContactListPartyAndContactMechMapping")
@SqlResultSetMapping(name="ContactListPartyAndContactMechMapping", entities={
@EntityResult(entityClass=ContactListPartyAndContactMech.class, fields = {
@FieldResult(name="contactFromDate", column="contactFromDate")
,@FieldResult(name="contactThruDate", column="contactThruDate")
,@FieldResult(name="contactListId", column="contactListId")
,@FieldResult(name="partyId", column="partyId")
,@FieldResult(name="fromDate", column="fromDate")
,@FieldResult(name="thruDate", column="thruDate")
,@FieldResult(name="statusId", column="statusId")
,@FieldResult(name="preferredContactMechId", column="preferredContactMechId")
,@FieldResult(name="contactMechId", column="contactMechId")
,@FieldResult(name="contactMechTypeId", column="contactMechTypeId")
,@FieldResult(name="infoString", column="infoString")
})})
@org.hibernate.annotations.Entity(mutable = false)
@org.hibernate.annotations.AccessType("field")
public class ContactListPartyAndContactMech extends Entity {
static {
java.util.Map<String, String> fields = new java.util.HashMap<String, String>();
        fields.put("contactFromDate", "PCM.FROM_DATE");
        fields.put("contactThruDate", "PCM.THRU_DATE");
        fields.put("contactListId", "CLP.CONTACT_LIST_ID");
        fields.put("partyId", "CLP.PARTY_ID");
        fields.put("fromDate", "CLP.FROM_DATE");
        fields.put("thruDate", "CLP.THRU_DATE");
        fields.put("statusId", "CLP.STATUS_ID");
        fields.put("preferredContactMechId", "CLP.PREFERRED_CONTACT_MECH_ID");
        fields.put("contactMechId", "CM.CONTACT_MECH_ID");
        fields.put("contactMechTypeId", "CM.CONTACT_MECH_TYPE_ID");
        fields.put("infoString", "CM.INFO_STRING");
fieldMapColumns.put("ContactListPartyAndContactMech", fields);
}
  public static enum Fields implements EntityFieldInterface<ContactListPartyAndContactMech> {
    contactFromDate("contactFromDate"),
    contactThruDate("contactThruDate"),
    contactListId("contactListId"),
    partyId("partyId"),
    fromDate("fromDate"),
    thruDate("thruDate"),
    statusId("statusId"),
    preferredContactMechId("preferredContactMechId"),
    contactMechId("contactMechId"),
    contactMechTypeId("contactMechTypeId"),
    infoString("infoString");
    private final String fieldName;
    private Fields(String name) { fieldName = name; }
    /** {@inheritDoc} */
    public String getName() { return fieldName; }
    /** {@inheritDoc} */
    public String asc() { return fieldName + " ASC"; }
    /** {@inheritDoc} */
    public String desc() { return fieldName + " DESC"; }
  }

    
   private Timestamp contactFromDate;
    
   private Timestamp contactThruDate;
    @Id
   private String contactListId;
    
   private String partyId;
    
   private Timestamp fromDate;
    
   private Timestamp thruDate;
    
   private String statusId;
    
   private String preferredContactMechId;
    
   private String contactMechId;
    
   private String contactMechTypeId;
    
   private String infoString;
   private transient ContactListParty contactListParty = null;

  /**
   * Default constructor.
   */
  public ContactListPartyAndContactMech() {
      super();
      this.baseEntityName = "ContactListPartyAndContactMech";
      this.isView = true;
      
      this.primaryKeyNames = new ArrayList<String>();
      this.primaryKeyNames.add("contactFromDate");this.primaryKeyNames.add("contactListId");this.primaryKeyNames.add("partyId");this.primaryKeyNames.add("fromDate");this.primaryKeyNames.add("contactMechId");
      this.allFieldsNames = new ArrayList<String>();
      this.allFieldsNames.add("contactFromDate");this.allFieldsNames.add("contactThruDate");this.allFieldsNames.add("contactListId");this.allFieldsNames.add("partyId");this.allFieldsNames.add("fromDate");this.allFieldsNames.add("thruDate");this.allFieldsNames.add("statusId");this.allFieldsNames.add("preferredContactMechId");this.allFieldsNames.add("contactMechId");this.allFieldsNames.add("contactMechTypeId");this.allFieldsNames.add("infoString");
      this.nonPrimaryKeyNames = new ArrayList<String>();
      this.nonPrimaryKeyNames.addAll(allFieldsNames);
      this.nonPrimaryKeyNames.removeAll(primaryKeyNames);
  }

  /**
   * Constructor with a repository.
   * @param repository a <code>RepositoryInterface</code> value
   */
  public ContactListPartyAndContactMech(RepositoryInterface repository) {
      this();
      initRepository(repository);
  }

    /**
     * This is a view-entity, so the setter methods will be private to this class and for use in its fromMap constructor only
     */
    /**
     * Auto generated value setter.
     * @param contactFromDate the contactFromDate to set
     */
    public void setContactFromDate(Timestamp contactFromDate) {
        this.contactFromDate = contactFromDate;
    }
    /**
     * Auto generated value setter.
     * @param contactThruDate the contactThruDate to set
     */
    public void setContactThruDate(Timestamp contactThruDate) {
        this.contactThruDate = contactThruDate;
    }
    /**
     * Auto generated value setter.
     * @param contactListId the contactListId to set
     */
    public void setContactListId(String contactListId) {
        this.contactListId = contactListId;
    }
    /**
     * Auto generated value setter.
     * @param partyId the partyId to set
     */
    public void setPartyId(String partyId) {
        this.partyId = partyId;
    }
    /**
     * Auto generated value setter.
     * @param fromDate the fromDate to set
     */
    public void setFromDate(Timestamp fromDate) {
        this.fromDate = fromDate;
    }
    /**
     * Auto generated value setter.
     * @param thruDate the thruDate to set
     */
    public void setThruDate(Timestamp thruDate) {
        this.thruDate = thruDate;
    }
    /**
     * Auto generated value setter.
     * @param statusId the statusId to set
     */
    public void setStatusId(String statusId) {
        this.statusId = statusId;
    }
    /**
     * Auto generated value setter.
     * @param preferredContactMechId the preferredContactMechId to set
     */
    public void setPreferredContactMechId(String preferredContactMechId) {
        this.preferredContactMechId = preferredContactMechId;
    }
    /**
     * Auto generated value setter.
     * @param contactMechId the contactMechId to set
     */
    public void setContactMechId(String contactMechId) {
        this.contactMechId = contactMechId;
    }
    /**
     * Auto generated value setter.
     * @param contactMechTypeId the contactMechTypeId to set
     */
    public void setContactMechTypeId(String contactMechTypeId) {
        this.contactMechTypeId = contactMechTypeId;
    }
    /**
     * Auto generated value setter.
     * @param infoString the infoString to set
     */
    public void setInfoString(String infoString) {
        this.infoString = infoString;
    }

    /**
     * Auto generated value accessor.
     * @return <code>Timestamp</code>
     */
    public Timestamp getContactFromDate() {
        return this.contactFromDate;
    }
    /**
     * Auto generated value accessor.
     * @return <code>Timestamp</code>
     */
    public Timestamp getContactThruDate() {
        return this.contactThruDate;
    }
    /**
     * Auto generated value accessor.
     * @return <code>String</code>
     */
    public String getContactListId() {
        return this.contactListId;
    }
    /**
     * Auto generated value accessor.
     * @return <code>String</code>
     */
    public String getPartyId() {
        return this.partyId;
    }
    /**
     * Auto generated value accessor.
     * @return <code>Timestamp</code>
     */
    public Timestamp getFromDate() {
        return this.fromDate;
    }
    /**
     * Auto generated value accessor.
     * @return <code>Timestamp</code>
     */
    public Timestamp getThruDate() {
        return this.thruDate;
    }
    /**
     * Auto generated value accessor.
     * @return <code>String</code>
     */
    public String getStatusId() {
        return this.statusId;
    }
    /**
     * Auto generated value accessor.
     * @return <code>String</code>
     */
    public String getPreferredContactMechId() {
        return this.preferredContactMechId;
    }
    /**
     * Auto generated value accessor.
     * @return <code>String</code>
     */
    public String getContactMechId() {
        return this.contactMechId;
    }
    /**
     * Auto generated value accessor.
     * @return <code>String</code>
     */
    public String getContactMechTypeId() {
        return this.contactMechTypeId;
    }
    /**
     * Auto generated value accessor.
     * @return <code>String</code>
     */
    public String getInfoString() {
        return this.infoString;
    }

    /**
     * Auto generated method that gets the related <code>ContactListParty</code> by the relation named <code>ContactListParty</code>.
     * @return the <code>ContactListParty</code>
     * @throws RepositoryException if an error occurs
     */
    public ContactListParty getContactListParty() throws RepositoryException {
        if (this.contactListParty == null) {
            this.contactListParty = getRelatedOne(ContactListParty.class, "ContactListParty");
        }
        return this.contactListParty;
    }

    /**
     * Auto generated value setter.
     * @param contactListParty the contactListParty to set
    */
    public void setContactListParty(ContactListParty contactListParty) {
        this.contactListParty = contactListParty;
    }


    /** {@inheritDoc} */
    @Override
    public void fromMap(Map<String, Object> mapValue) {
        preInit();
        setContactFromDate((Timestamp) mapValue.get("contactFromDate"));
        setContactThruDate((Timestamp) mapValue.get("contactThruDate"));
        setContactListId((String) mapValue.get("contactListId"));
        setPartyId((String) mapValue.get("partyId"));
        setFromDate((Timestamp) mapValue.get("fromDate"));
        setThruDate((Timestamp) mapValue.get("thruDate"));
        setStatusId((String) mapValue.get("statusId"));
        setPreferredContactMechId((String) mapValue.get("preferredContactMechId"));
        setContactMechId((String) mapValue.get("contactMechId"));
        setContactMechTypeId((String) mapValue.get("contactMechTypeId"));
        setInfoString((String) mapValue.get("infoString"));
        postInit();
    }

    /** {@inheritDoc} */
    @Override
    public Map<String, Object> toMap() {
        Map<String, Object> mapValue = new FastMap<String, Object>();
        mapValue.put("contactFromDate", getContactFromDate());
        mapValue.put("contactThruDate", getContactThruDate());
        mapValue.put("contactListId", getContactListId());
        mapValue.put("partyId", getPartyId());
        mapValue.put("fromDate", getFromDate());
        mapValue.put("thruDate", getThruDate());
        mapValue.put("statusId", getStatusId());
        mapValue.put("preferredContactMechId", getPreferredContactMechId());
        mapValue.put("contactMechId", getContactMechId());
        mapValue.put("contactMechTypeId", getContactMechTypeId());
        mapValue.put("infoString", getInfoString());
        return mapValue;
    }


}
