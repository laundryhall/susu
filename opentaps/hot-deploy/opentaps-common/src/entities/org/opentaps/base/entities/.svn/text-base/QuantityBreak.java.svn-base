package org.opentaps.base.entities;

/*
 * Copyright (c) Open Source Strategies, Inc.
 *
 * Opentaps is free software: you can redistribute it and/or modify it
 * under the terms of the GNU Affero General Public License as published
 * by the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Opentaps is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with Opentaps.  If not, see <http://www.gnu.org/licenses/>.
 */

// DO NOT EDIT THIS FILE!  THIS IS AUTO GENERATED AND WILL GET WRITTEN OVER PERIODICALLY WHEN THE DATA MODEL CHANGES
// EXTEND THIS CLASS INSTEAD.

import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;

import javolution.util.FastMap;

import org.opentaps.foundation.entity.Entity;
import org.opentaps.foundation.entity.EntityFieldInterface;
import org.opentaps.foundation.repository.RepositoryException;
import org.opentaps.foundation.repository.RepositoryInterface;
import javax.persistence.*;
import org.hibernate.search.annotations.*;
import java.lang.String;
import java.math.BigDecimal;
import java.sql.Timestamp;

/**
 * Auto generated base entity QuantityBreak.
 */
@javax.persistence.Entity
@Table(name="QUANTITY_BREAK")
public class QuantityBreak extends Entity {
static {
java.util.Map<String, String> fields = new java.util.HashMap<String, String>();
        fields.put("quantityBreakId", "QUANTITY_BREAK_ID");
        fields.put("quantityBreakTypeId", "QUANTITY_BREAK_TYPE_ID");
        fields.put("fromQuantity", "FROM_QUANTITY");
        fields.put("thruQuantity", "THRU_QUANTITY");
        fields.put("lastUpdatedStamp", "LAST_UPDATED_STAMP");
        fields.put("lastUpdatedTxStamp", "LAST_UPDATED_TX_STAMP");
        fields.put("createdStamp", "CREATED_STAMP");
        fields.put("createdTxStamp", "CREATED_TX_STAMP");
fieldMapColumns.put("QuantityBreak", fields);
}
  public static enum Fields implements EntityFieldInterface<QuantityBreak> {
    quantityBreakId("quantityBreakId"),
    quantityBreakTypeId("quantityBreakTypeId"),
    fromQuantity("fromQuantity"),
    thruQuantity("thruQuantity"),
    lastUpdatedStamp("lastUpdatedStamp"),
    lastUpdatedTxStamp("lastUpdatedTxStamp"),
    createdStamp("createdStamp"),
    createdTxStamp("createdTxStamp");
    private final String fieldName;
    private Fields(String name) { fieldName = name; }
    /** {@inheritDoc} */
    public String getName() { return fieldName; }
    /** {@inheritDoc} */
    public String asc() { return fieldName + " ASC"; }
    /** {@inheritDoc} */
    public String desc() { return fieldName + " DESC"; }
  }

   @org.hibernate.annotations.GenericGenerator(name="QuantityBreak_GEN",  strategy="org.opentaps.foundation.entity.hibernate.OpentapsIdentifierGenerator")
   @GeneratedValue(generator="QuantityBreak_GEN")
   @Id
   @Column(name="QUANTITY_BREAK_ID")
   private String quantityBreakId;
   @Column(name="QUANTITY_BREAK_TYPE_ID")
   private String quantityBreakTypeId;
   @Column(name="FROM_QUANTITY")
   private BigDecimal fromQuantity;
   @Column(name="THRU_QUANTITY")
   private BigDecimal thruQuantity;
   @Column(name="LAST_UPDATED_STAMP")
   private Timestamp lastUpdatedStamp;
   @Column(name="LAST_UPDATED_TX_STAMP")
   private Timestamp lastUpdatedTxStamp;
   @Column(name="CREATED_STAMP")
   private Timestamp createdStamp;
   @Column(name="CREATED_TX_STAMP")
   private Timestamp createdTxStamp;
   @ManyToOne(cascade = {CascadeType.PERSIST, CascadeType.MERGE}, fetch=FetchType.LAZY)
   @JoinColumn(name="QUANTITY_BREAK_TYPE_ID", insertable=false, updatable=false)
   @org.hibernate.annotations.Generated(
      org.hibernate.annotations.GenerationTime.ALWAYS
   )
   
   private QuantityBreakType quantityBreakType = null;
   @OneToMany(fetch=FetchType.LAZY, mappedBy="weightQuantityBreak", cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REMOVE})
   @JoinColumn(name="WEIGHT_BREAK_ID")
   
   private List<ShipmentCostEstimate> weightShipmentCostEstimates = null;
   @OneToMany(fetch=FetchType.LAZY, mappedBy="quantityQuantityBreak", cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REMOVE})
   @JoinColumn(name="QUANTITY_BREAK_ID")
   
   private List<ShipmentCostEstimate> quantityShipmentCostEstimates = null;
   @OneToMany(fetch=FetchType.LAZY, mappedBy="priceQuantityBreak", cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REMOVE})
   @JoinColumn(name="PRICE_BREAK_ID")
   
   private List<ShipmentCostEstimate> priceShipmentCostEstimates = null;

  /**
   * Default constructor.
   */
  public QuantityBreak() {
      super();
      this.baseEntityName = "QuantityBreak";
      this.isView = false;
      
      this.primaryKeyNames = new ArrayList<String>();
      this.primaryKeyNames.add("quantityBreakId");
      this.allFieldsNames = new ArrayList<String>();
      this.allFieldsNames.add("quantityBreakId");this.allFieldsNames.add("quantityBreakTypeId");this.allFieldsNames.add("fromQuantity");this.allFieldsNames.add("thruQuantity");this.allFieldsNames.add("lastUpdatedStamp");this.allFieldsNames.add("lastUpdatedTxStamp");this.allFieldsNames.add("createdStamp");this.allFieldsNames.add("createdTxStamp");
      this.nonPrimaryKeyNames = new ArrayList<String>();
      this.nonPrimaryKeyNames.addAll(allFieldsNames);
      this.nonPrimaryKeyNames.removeAll(primaryKeyNames);
  }

  /**
   * Constructor with a repository.
   * @param repository a <code>RepositoryInterface</code> value
   */
  public QuantityBreak(RepositoryInterface repository) {
      this();
      initRepository(repository);
  }

    /**
     * Auto generated value setter.
     * @param quantityBreakId the quantityBreakId to set
     */
    public void setQuantityBreakId(String quantityBreakId) {
        this.quantityBreakId = quantityBreakId;
    }
    /**
     * Auto generated value setter.
     * @param quantityBreakTypeId the quantityBreakTypeId to set
     */
    public void setQuantityBreakTypeId(String quantityBreakTypeId) {
        this.quantityBreakTypeId = quantityBreakTypeId;
    }
    /**
     * Auto generated value setter.
     * @param fromQuantity the fromQuantity to set
     */
    public void setFromQuantity(BigDecimal fromQuantity) {
        this.fromQuantity = fromQuantity;
    }
    /**
     * Auto generated value setter.
     * @param thruQuantity the thruQuantity to set
     */
    public void setThruQuantity(BigDecimal thruQuantity) {
        this.thruQuantity = thruQuantity;
    }
    /**
     * Auto generated value setter.
     * @param lastUpdatedStamp the lastUpdatedStamp to set
     */
    public void setLastUpdatedStamp(Timestamp lastUpdatedStamp) {
        this.lastUpdatedStamp = lastUpdatedStamp;
    }
    /**
     * Auto generated value setter.
     * @param lastUpdatedTxStamp the lastUpdatedTxStamp to set
     */
    public void setLastUpdatedTxStamp(Timestamp lastUpdatedTxStamp) {
        this.lastUpdatedTxStamp = lastUpdatedTxStamp;
    }
    /**
     * Auto generated value setter.
     * @param createdStamp the createdStamp to set
     */
    public void setCreatedStamp(Timestamp createdStamp) {
        this.createdStamp = createdStamp;
    }
    /**
     * Auto generated value setter.
     * @param createdTxStamp the createdTxStamp to set
     */
    public void setCreatedTxStamp(Timestamp createdTxStamp) {
        this.createdTxStamp = createdTxStamp;
    }

    /**
     * Auto generated value accessor.
     * @return <code>String</code>
     */
    public String getQuantityBreakId() {
        return this.quantityBreakId;
    }
    /**
     * Auto generated value accessor.
     * @return <code>String</code>
     */
    public String getQuantityBreakTypeId() {
        return this.quantityBreakTypeId;
    }
    /**
     * Auto generated value accessor.
     * @return <code>BigDecimal</code>
     */
    public BigDecimal getFromQuantity() {
        return this.fromQuantity;
    }
    /**
     * Auto generated value accessor.
     * @return <code>BigDecimal</code>
     */
    public BigDecimal getThruQuantity() {
        return this.thruQuantity;
    }
    /**
     * Auto generated value accessor.
     * @return <code>Timestamp</code>
     */
    public Timestamp getLastUpdatedStamp() {
        return this.lastUpdatedStamp;
    }
    /**
     * Auto generated value accessor.
     * @return <code>Timestamp</code>
     */
    public Timestamp getLastUpdatedTxStamp() {
        return this.lastUpdatedTxStamp;
    }
    /**
     * Auto generated value accessor.
     * @return <code>Timestamp</code>
     */
    public Timestamp getCreatedStamp() {
        return this.createdStamp;
    }
    /**
     * Auto generated value accessor.
     * @return <code>Timestamp</code>
     */
    public Timestamp getCreatedTxStamp() {
        return this.createdTxStamp;
    }

    /**
     * Auto generated method that gets the related <code>QuantityBreakType</code> by the relation named <code>QuantityBreakType</code>.
     * @return the <code>QuantityBreakType</code>
     * @throws RepositoryException if an error occurs
     */
    public QuantityBreakType getQuantityBreakType() throws RepositoryException {
        if (this.quantityBreakType == null) {
            this.quantityBreakType = getRelatedOne(QuantityBreakType.class, "QuantityBreakType");
        }
        return this.quantityBreakType;
    }
    /**
     * Auto generated method that gets the related <code>ShipmentCostEstimate</code> by the relation named <code>WeightShipmentCostEstimate</code>.
     * @return the list of <code>ShipmentCostEstimate</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends ShipmentCostEstimate> getWeightShipmentCostEstimates() throws RepositoryException {
        if (this.weightShipmentCostEstimates == null) {
            this.weightShipmentCostEstimates = getRelated(ShipmentCostEstimate.class, "WeightShipmentCostEstimate");
        }
        return this.weightShipmentCostEstimates;
    }
    /**
     * Auto generated method that gets the related <code>ShipmentCostEstimate</code> by the relation named <code>QuantityShipmentCostEstimate</code>.
     * @return the list of <code>ShipmentCostEstimate</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends ShipmentCostEstimate> getQuantityShipmentCostEstimates() throws RepositoryException {
        if (this.quantityShipmentCostEstimates == null) {
            this.quantityShipmentCostEstimates = getRelated(ShipmentCostEstimate.class, "QuantityShipmentCostEstimate");
        }
        return this.quantityShipmentCostEstimates;
    }
    /**
     * Auto generated method that gets the related <code>ShipmentCostEstimate</code> by the relation named <code>PriceShipmentCostEstimate</code>.
     * @return the list of <code>ShipmentCostEstimate</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends ShipmentCostEstimate> getPriceShipmentCostEstimates() throws RepositoryException {
        if (this.priceShipmentCostEstimates == null) {
            this.priceShipmentCostEstimates = getRelated(ShipmentCostEstimate.class, "PriceShipmentCostEstimate");
        }
        return this.priceShipmentCostEstimates;
    }

    /**
     * Auto generated value setter.
     * @param quantityBreakType the quantityBreakType to set
    */
    public void setQuantityBreakType(QuantityBreakType quantityBreakType) {
        this.quantityBreakType = quantityBreakType;
    }
    /**
     * Auto generated value setter.
     * @param weightShipmentCostEstimates the weightShipmentCostEstimates to set
    */
    public void setWeightShipmentCostEstimates(List<ShipmentCostEstimate> weightShipmentCostEstimates) {
        this.weightShipmentCostEstimates = weightShipmentCostEstimates;
    }
    /**
     * Auto generated value setter.
     * @param quantityShipmentCostEstimates the quantityShipmentCostEstimates to set
    */
    public void setQuantityShipmentCostEstimates(List<ShipmentCostEstimate> quantityShipmentCostEstimates) {
        this.quantityShipmentCostEstimates = quantityShipmentCostEstimates;
    }
    /**
     * Auto generated value setter.
     * @param priceShipmentCostEstimates the priceShipmentCostEstimates to set
    */
    public void setPriceShipmentCostEstimates(List<ShipmentCostEstimate> priceShipmentCostEstimates) {
        this.priceShipmentCostEstimates = priceShipmentCostEstimates;
    }


    /** {@inheritDoc} */
    @Override
    public void fromMap(Map<String, Object> mapValue) {
        preInit();
        setQuantityBreakId((String) mapValue.get("quantityBreakId"));
        setQuantityBreakTypeId((String) mapValue.get("quantityBreakTypeId"));
        setFromQuantity(convertToBigDecimal(mapValue.get("fromQuantity")));
        setThruQuantity(convertToBigDecimal(mapValue.get("thruQuantity")));
        setLastUpdatedStamp((Timestamp) mapValue.get("lastUpdatedStamp"));
        setLastUpdatedTxStamp((Timestamp) mapValue.get("lastUpdatedTxStamp"));
        setCreatedStamp((Timestamp) mapValue.get("createdStamp"));
        setCreatedTxStamp((Timestamp) mapValue.get("createdTxStamp"));
        postInit();
    }

    /** {@inheritDoc} */
    @Override
    public Map<String, Object> toMap() {
        Map<String, Object> mapValue = new FastMap<String, Object>();
        mapValue.put("quantityBreakId", getQuantityBreakId());
        mapValue.put("quantityBreakTypeId", getQuantityBreakTypeId());
        mapValue.put("fromQuantity", getFromQuantity());
        mapValue.put("thruQuantity", getThruQuantity());
        mapValue.put("lastUpdatedStamp", getLastUpdatedStamp());
        mapValue.put("lastUpdatedTxStamp", getLastUpdatedTxStamp());
        mapValue.put("createdStamp", getCreatedStamp());
        mapValue.put("createdTxStamp", getCreatedTxStamp());
        return mapValue;
    }


}
