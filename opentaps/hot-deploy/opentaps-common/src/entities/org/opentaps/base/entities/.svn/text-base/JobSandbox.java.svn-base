package org.opentaps.base.entities;

/*
 * Copyright (c) Open Source Strategies, Inc.
 *
 * Opentaps is free software: you can redistribute it and/or modify it
 * under the terms of the GNU Affero General Public License as published
 * by the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Opentaps is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with Opentaps.  If not, see <http://www.gnu.org/licenses/>.
 */

// DO NOT EDIT THIS FILE!  THIS IS AUTO GENERATED AND WILL GET WRITTEN OVER PERIODICALLY WHEN THE DATA MODEL CHANGES
// EXTEND THIS CLASS INSTEAD.

import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;

import javolution.util.FastMap;

import org.opentaps.foundation.entity.Entity;
import org.opentaps.foundation.entity.EntityFieldInterface;
import org.opentaps.foundation.repository.RepositoryException;
import org.opentaps.foundation.repository.RepositoryInterface;
import javax.persistence.*;
import org.hibernate.search.annotations.*;
import java.lang.Long;
import java.lang.String;
import java.sql.Timestamp;

/**
 * Auto generated base entity JobSandbox.
 */
@javax.persistence.Entity
@Table(name="JOB_SANDBOX")
public class JobSandbox extends Entity {
static {
java.util.Map<String, String> fields = new java.util.HashMap<String, String>();
        fields.put("jobId", "JOB_ID");
        fields.put("jobName", "JOB_NAME");
        fields.put("runTime", "RUN_TIME");
        fields.put("poolId", "POOL_ID");
        fields.put("statusId", "STATUS_ID");
        fields.put("parentJobId", "PARENT_JOB_ID");
        fields.put("previousJobId", "PREVIOUS_JOB_ID");
        fields.put("serviceName", "SERVICE_NAME");
        fields.put("loaderName", "LOADER_NAME");
        fields.put("maxRetry", "MAX_RETRY");
        fields.put("authUserLoginId", "AUTH_USER_LOGIN_ID");
        fields.put("runAsUser", "RUN_AS_USER");
        fields.put("runtimeDataId", "RUNTIME_DATA_ID");
        fields.put("recurrenceInfoId", "RECURRENCE_INFO_ID");
        fields.put("tempExprId", "TEMP_EXPR_ID");
        fields.put("currentRecurrenceCount", "CURRENT_RECURRENCE_COUNT");
        fields.put("maxRecurrenceCount", "MAX_RECURRENCE_COUNT");
        fields.put("runByInstanceId", "RUN_BY_INSTANCE_ID");
        fields.put("startDateTime", "START_DATE_TIME");
        fields.put("finishDateTime", "FINISH_DATE_TIME");
        fields.put("cancelDateTime", "CANCEL_DATE_TIME");
        fields.put("lastUpdatedStamp", "LAST_UPDATED_STAMP");
        fields.put("lastUpdatedTxStamp", "LAST_UPDATED_TX_STAMP");
        fields.put("createdStamp", "CREATED_STAMP");
        fields.put("createdTxStamp", "CREATED_TX_STAMP");
fieldMapColumns.put("JobSandbox", fields);
}
  public static enum Fields implements EntityFieldInterface<JobSandbox> {
    jobId("jobId"),
    jobName("jobName"),
    runTime("runTime"),
    poolId("poolId"),
    statusId("statusId"),
    parentJobId("parentJobId"),
    previousJobId("previousJobId"),
    serviceName("serviceName"),
    loaderName("loaderName"),
    maxRetry("maxRetry"),
    authUserLoginId("authUserLoginId"),
    runAsUser("runAsUser"),
    runtimeDataId("runtimeDataId"),
    recurrenceInfoId("recurrenceInfoId"),
    tempExprId("tempExprId"),
    currentRecurrenceCount("currentRecurrenceCount"),
    maxRecurrenceCount("maxRecurrenceCount"),
    runByInstanceId("runByInstanceId"),
    startDateTime("startDateTime"),
    finishDateTime("finishDateTime"),
    cancelDateTime("cancelDateTime"),
    lastUpdatedStamp("lastUpdatedStamp"),
    lastUpdatedTxStamp("lastUpdatedTxStamp"),
    createdStamp("createdStamp"),
    createdTxStamp("createdTxStamp");
    private final String fieldName;
    private Fields(String name) { fieldName = name; }
    /** {@inheritDoc} */
    public String getName() { return fieldName; }
    /** {@inheritDoc} */
    public String asc() { return fieldName + " ASC"; }
    /** {@inheritDoc} */
    public String desc() { return fieldName + " DESC"; }
  }

   @org.hibernate.annotations.GenericGenerator(name="JobSandbox_GEN",  strategy="org.opentaps.foundation.entity.hibernate.OpentapsIdentifierGenerator")
   @GeneratedValue(generator="JobSandbox_GEN")
   @Id
   @Column(name="JOB_ID")
   private String jobId;
   @Column(name="JOB_NAME")
   private String jobName;
   @Column(name="RUN_TIME")
   private Timestamp runTime;
   @Column(name="POOL_ID")
   private String poolId;
   @Column(name="STATUS_ID")
   private String statusId;
   @Column(name="PARENT_JOB_ID")
   private String parentJobId;
   @Column(name="PREVIOUS_JOB_ID")
   private String previousJobId;
   @Column(name="SERVICE_NAME")
   private String serviceName;
   @Column(name="LOADER_NAME")
   private String loaderName;
   @Column(name="MAX_RETRY")
   private Long maxRetry;
   @Column(name="AUTH_USER_LOGIN_ID")
   private String authUserLoginId;
   @Column(name="RUN_AS_USER")
   private String runAsUser;
   @Column(name="RUNTIME_DATA_ID")
   private String runtimeDataId;
   @Column(name="RECURRENCE_INFO_ID")
   private String recurrenceInfoId;
   @Column(name="TEMP_EXPR_ID")
   private String tempExprId;
   @Column(name="CURRENT_RECURRENCE_COUNT")
   private Long currentRecurrenceCount;
   @Column(name="MAX_RECURRENCE_COUNT")
   private Long maxRecurrenceCount;
   @Column(name="RUN_BY_INSTANCE_ID")
   private String runByInstanceId;
   @Column(name="START_DATE_TIME")
   private Timestamp startDateTime;
   @Column(name="FINISH_DATE_TIME")
   private Timestamp finishDateTime;
   @Column(name="CANCEL_DATE_TIME")
   private Timestamp cancelDateTime;
   @Column(name="LAST_UPDATED_STAMP")
   private Timestamp lastUpdatedStamp;
   @Column(name="LAST_UPDATED_TX_STAMP")
   private Timestamp lastUpdatedTxStamp;
   @Column(name="CREATED_STAMP")
   private Timestamp createdStamp;
   @Column(name="CREATED_TX_STAMP")
   private Timestamp createdTxStamp;
   @ManyToOne(cascade = {CascadeType.PERSIST, CascadeType.MERGE}, fetch=FetchType.LAZY)
   @JoinColumn(name="RECURRENCE_INFO_ID", insertable=false, updatable=false)
   @org.hibernate.annotations.Generated(
      org.hibernate.annotations.GenerationTime.ALWAYS
   )
   
   private RecurrenceInfo recurrenceInfo = null;
   @ManyToOne(cascade = {CascadeType.PERSIST, CascadeType.MERGE}, fetch=FetchType.LAZY)
   @JoinColumn(name="TEMP_EXPR_ID", insertable=false, updatable=false)
   @org.hibernate.annotations.Generated(
      org.hibernate.annotations.GenerationTime.ALWAYS
   )
   
   private TemporalExpression temporalExpression = null;
   @ManyToOne(cascade = {CascadeType.PERSIST, CascadeType.MERGE}, fetch=FetchType.LAZY)
   @JoinColumn(name="RUNTIME_DATA_ID", insertable=false, updatable=false)
   @org.hibernate.annotations.Generated(
      org.hibernate.annotations.GenerationTime.ALWAYS
   )
   
   private RuntimeData runtimeData = null;
   @ManyToOne(cascade = {CascadeType.PERSIST, CascadeType.MERGE}, fetch=FetchType.LAZY)
   @JoinColumn(name="AUTH_USER_LOGIN_ID", insertable=false, updatable=false)
   @org.hibernate.annotations.Generated(
      org.hibernate.annotations.GenerationTime.ALWAYS
   )
   
   private UserLogin authUserLogin = null;
   @ManyToOne(cascade = {CascadeType.PERSIST, CascadeType.MERGE}, fetch=FetchType.LAZY)
   @JoinColumn(name="RUN_AS_USER", insertable=false, updatable=false)
   @org.hibernate.annotations.Generated(
      org.hibernate.annotations.GenerationTime.ALWAYS
   )
   
   private UserLogin runAsUserLogin = null;
   @ManyToOne(cascade = {CascadeType.PERSIST, CascadeType.MERGE}, fetch=FetchType.LAZY)
   @JoinColumn(name="STATUS_ID", insertable=false, updatable=false)
   @org.hibernate.annotations.Generated(
      org.hibernate.annotations.GenerationTime.ALWAYS
   )
   
   private StatusItem statusItem = null;

  /**
   * Default constructor.
   */
  public JobSandbox() {
      super();
      this.baseEntityName = "JobSandbox";
      this.isView = false;
      
      this.primaryKeyNames = new ArrayList<String>();
      this.primaryKeyNames.add("jobId");
      this.allFieldsNames = new ArrayList<String>();
      this.allFieldsNames.add("jobId");this.allFieldsNames.add("jobName");this.allFieldsNames.add("runTime");this.allFieldsNames.add("poolId");this.allFieldsNames.add("statusId");this.allFieldsNames.add("parentJobId");this.allFieldsNames.add("previousJobId");this.allFieldsNames.add("serviceName");this.allFieldsNames.add("loaderName");this.allFieldsNames.add("maxRetry");this.allFieldsNames.add("authUserLoginId");this.allFieldsNames.add("runAsUser");this.allFieldsNames.add("runtimeDataId");this.allFieldsNames.add("recurrenceInfoId");this.allFieldsNames.add("tempExprId");this.allFieldsNames.add("currentRecurrenceCount");this.allFieldsNames.add("maxRecurrenceCount");this.allFieldsNames.add("runByInstanceId");this.allFieldsNames.add("startDateTime");this.allFieldsNames.add("finishDateTime");this.allFieldsNames.add("cancelDateTime");this.allFieldsNames.add("lastUpdatedStamp");this.allFieldsNames.add("lastUpdatedTxStamp");this.allFieldsNames.add("createdStamp");this.allFieldsNames.add("createdTxStamp");
      this.nonPrimaryKeyNames = new ArrayList<String>();
      this.nonPrimaryKeyNames.addAll(allFieldsNames);
      this.nonPrimaryKeyNames.removeAll(primaryKeyNames);
  }

  /**
   * Constructor with a repository.
   * @param repository a <code>RepositoryInterface</code> value
   */
  public JobSandbox(RepositoryInterface repository) {
      this();
      initRepository(repository);
  }

    /**
     * Auto generated value setter.
     * @param jobId the jobId to set
     */
    public void setJobId(String jobId) {
        this.jobId = jobId;
    }
    /**
     * Auto generated value setter.
     * @param jobName the jobName to set
     */
    public void setJobName(String jobName) {
        this.jobName = jobName;
    }
    /**
     * Auto generated value setter.
     * @param runTime the runTime to set
     */
    public void setRunTime(Timestamp runTime) {
        this.runTime = runTime;
    }
    /**
     * Auto generated value setter.
     * @param poolId the poolId to set
     */
    public void setPoolId(String poolId) {
        this.poolId = poolId;
    }
    /**
     * Auto generated value setter.
     * @param statusId the statusId to set
     */
    public void setStatusId(String statusId) {
        this.statusId = statusId;
    }
    /**
     * Auto generated value setter.
     * @param parentJobId the parentJobId to set
     */
    public void setParentJobId(String parentJobId) {
        this.parentJobId = parentJobId;
    }
    /**
     * Auto generated value setter.
     * @param previousJobId the previousJobId to set
     */
    public void setPreviousJobId(String previousJobId) {
        this.previousJobId = previousJobId;
    }
    /**
     * Auto generated value setter.
     * @param serviceName the serviceName to set
     */
    public void setServiceName(String serviceName) {
        this.serviceName = serviceName;
    }
    /**
     * Auto generated value setter.
     * @param loaderName the loaderName to set
     */
    public void setLoaderName(String loaderName) {
        this.loaderName = loaderName;
    }
    /**
     * Auto generated value setter.
     * @param maxRetry the maxRetry to set
     */
    public void setMaxRetry(Long maxRetry) {
        this.maxRetry = maxRetry;
    }
    /**
     * Auto generated value setter.
     * @param authUserLoginId the authUserLoginId to set
     */
    public void setAuthUserLoginId(String authUserLoginId) {
        this.authUserLoginId = authUserLoginId;
    }
    /**
     * Auto generated value setter.
     * @param runAsUser the runAsUser to set
     */
    public void setRunAsUser(String runAsUser) {
        this.runAsUser = runAsUser;
    }
    /**
     * Auto generated value setter.
     * @param runtimeDataId the runtimeDataId to set
     */
    public void setRuntimeDataId(String runtimeDataId) {
        this.runtimeDataId = runtimeDataId;
    }
    /**
     * Auto generated value setter.
     * @param recurrenceInfoId the recurrenceInfoId to set
     */
    public void setRecurrenceInfoId(String recurrenceInfoId) {
        this.recurrenceInfoId = recurrenceInfoId;
    }
    /**
     * Auto generated value setter.
     * @param tempExprId the tempExprId to set
     */
    public void setTempExprId(String tempExprId) {
        this.tempExprId = tempExprId;
    }
    /**
     * Auto generated value setter.
     * @param currentRecurrenceCount the currentRecurrenceCount to set
     */
    public void setCurrentRecurrenceCount(Long currentRecurrenceCount) {
        this.currentRecurrenceCount = currentRecurrenceCount;
    }
    /**
     * Auto generated value setter.
     * @param maxRecurrenceCount the maxRecurrenceCount to set
     */
    public void setMaxRecurrenceCount(Long maxRecurrenceCount) {
        this.maxRecurrenceCount = maxRecurrenceCount;
    }
    /**
     * Auto generated value setter.
     * @param runByInstanceId the runByInstanceId to set
     */
    public void setRunByInstanceId(String runByInstanceId) {
        this.runByInstanceId = runByInstanceId;
    }
    /**
     * Auto generated value setter.
     * @param startDateTime the startDateTime to set
     */
    public void setStartDateTime(Timestamp startDateTime) {
        this.startDateTime = startDateTime;
    }
    /**
     * Auto generated value setter.
     * @param finishDateTime the finishDateTime to set
     */
    public void setFinishDateTime(Timestamp finishDateTime) {
        this.finishDateTime = finishDateTime;
    }
    /**
     * Auto generated value setter.
     * @param cancelDateTime the cancelDateTime to set
     */
    public void setCancelDateTime(Timestamp cancelDateTime) {
        this.cancelDateTime = cancelDateTime;
    }
    /**
     * Auto generated value setter.
     * @param lastUpdatedStamp the lastUpdatedStamp to set
     */
    public void setLastUpdatedStamp(Timestamp lastUpdatedStamp) {
        this.lastUpdatedStamp = lastUpdatedStamp;
    }
    /**
     * Auto generated value setter.
     * @param lastUpdatedTxStamp the lastUpdatedTxStamp to set
     */
    public void setLastUpdatedTxStamp(Timestamp lastUpdatedTxStamp) {
        this.lastUpdatedTxStamp = lastUpdatedTxStamp;
    }
    /**
     * Auto generated value setter.
     * @param createdStamp the createdStamp to set
     */
    public void setCreatedStamp(Timestamp createdStamp) {
        this.createdStamp = createdStamp;
    }
    /**
     * Auto generated value setter.
     * @param createdTxStamp the createdTxStamp to set
     */
    public void setCreatedTxStamp(Timestamp createdTxStamp) {
        this.createdTxStamp = createdTxStamp;
    }

    /**
     * Auto generated value accessor.
     * @return <code>String</code>
     */
    public String getJobId() {
        return this.jobId;
    }
    /**
     * Auto generated value accessor.
     * @return <code>String</code>
     */
    public String getJobName() {
        return this.jobName;
    }
    /**
     * Auto generated value accessor.
     * @return <code>Timestamp</code>
     */
    public Timestamp getRunTime() {
        return this.runTime;
    }
    /**
     * Auto generated value accessor.
     * @return <code>String</code>
     */
    public String getPoolId() {
        return this.poolId;
    }
    /**
     * Auto generated value accessor.
     * @return <code>String</code>
     */
    public String getStatusId() {
        return this.statusId;
    }
    /**
     * Auto generated value accessor.
     * @return <code>String</code>
     */
    public String getParentJobId() {
        return this.parentJobId;
    }
    /**
     * Auto generated value accessor.
     * @return <code>String</code>
     */
    public String getPreviousJobId() {
        return this.previousJobId;
    }
    /**
     * Auto generated value accessor.
     * @return <code>String</code>
     */
    public String getServiceName() {
        return this.serviceName;
    }
    /**
     * Auto generated value accessor.
     * @return <code>String</code>
     */
    public String getLoaderName() {
        return this.loaderName;
    }
    /**
     * Auto generated value accessor.
     * @return <code>Long</code>
     */
    public Long getMaxRetry() {
        return this.maxRetry;
    }
    /**
     * Auto generated value accessor.
     * @return <code>String</code>
     */
    public String getAuthUserLoginId() {
        return this.authUserLoginId;
    }
    /**
     * Auto generated value accessor.
     * @return <code>String</code>
     */
    public String getRunAsUser() {
        return this.runAsUser;
    }
    /**
     * Auto generated value accessor.
     * @return <code>String</code>
     */
    public String getRuntimeDataId() {
        return this.runtimeDataId;
    }
    /**
     * Auto generated value accessor.
     * @return <code>String</code>
     */
    public String getRecurrenceInfoId() {
        return this.recurrenceInfoId;
    }
    /**
     * Auto generated value accessor.
     * @return <code>String</code>
     */
    public String getTempExprId() {
        return this.tempExprId;
    }
    /**
     * Auto generated value accessor.
     * @return <code>Long</code>
     */
    public Long getCurrentRecurrenceCount() {
        return this.currentRecurrenceCount;
    }
    /**
     * Auto generated value accessor.
     * @return <code>Long</code>
     */
    public Long getMaxRecurrenceCount() {
        return this.maxRecurrenceCount;
    }
    /**
     * Auto generated value accessor.
     * @return <code>String</code>
     */
    public String getRunByInstanceId() {
        return this.runByInstanceId;
    }
    /**
     * Auto generated value accessor.
     * @return <code>Timestamp</code>
     */
    public Timestamp getStartDateTime() {
        return this.startDateTime;
    }
    /**
     * Auto generated value accessor.
     * @return <code>Timestamp</code>
     */
    public Timestamp getFinishDateTime() {
        return this.finishDateTime;
    }
    /**
     * Auto generated value accessor.
     * @return <code>Timestamp</code>
     */
    public Timestamp getCancelDateTime() {
        return this.cancelDateTime;
    }
    /**
     * Auto generated value accessor.
     * @return <code>Timestamp</code>
     */
    public Timestamp getLastUpdatedStamp() {
        return this.lastUpdatedStamp;
    }
    /**
     * Auto generated value accessor.
     * @return <code>Timestamp</code>
     */
    public Timestamp getLastUpdatedTxStamp() {
        return this.lastUpdatedTxStamp;
    }
    /**
     * Auto generated value accessor.
     * @return <code>Timestamp</code>
     */
    public Timestamp getCreatedStamp() {
        return this.createdStamp;
    }
    /**
     * Auto generated value accessor.
     * @return <code>Timestamp</code>
     */
    public Timestamp getCreatedTxStamp() {
        return this.createdTxStamp;
    }

    /**
     * Auto generated method that gets the related <code>RecurrenceInfo</code> by the relation named <code>RecurrenceInfo</code>.
     * @return the <code>RecurrenceInfo</code>
     * @throws RepositoryException if an error occurs
     */
    public RecurrenceInfo getRecurrenceInfo() throws RepositoryException {
        if (this.recurrenceInfo == null) {
            this.recurrenceInfo = getRelatedOne(RecurrenceInfo.class, "RecurrenceInfo");
        }
        return this.recurrenceInfo;
    }
    /**
     * Auto generated method that gets the related <code>TemporalExpression</code> by the relation named <code>TemporalExpression</code>.
     * @return the <code>TemporalExpression</code>
     * @throws RepositoryException if an error occurs
     */
    public TemporalExpression getTemporalExpression() throws RepositoryException {
        if (this.temporalExpression == null) {
            this.temporalExpression = getRelatedOne(TemporalExpression.class, "TemporalExpression");
        }
        return this.temporalExpression;
    }
    /**
     * Auto generated method that gets the related <code>RuntimeData</code> by the relation named <code>RuntimeData</code>.
     * @return the <code>RuntimeData</code>
     * @throws RepositoryException if an error occurs
     */
    public RuntimeData getRuntimeData() throws RepositoryException {
        if (this.runtimeData == null) {
            this.runtimeData = getRelatedOne(RuntimeData.class, "RuntimeData");
        }
        return this.runtimeData;
    }
    /**
     * Auto generated method that gets the related <code>UserLogin</code> by the relation named <code>AuthUserLogin</code>.
     * @return the <code>UserLogin</code>
     * @throws RepositoryException if an error occurs
     */
    public UserLogin getAuthUserLogin() throws RepositoryException {
        if (this.authUserLogin == null) {
            this.authUserLogin = getRelatedOne(UserLogin.class, "AuthUserLogin");
        }
        return this.authUserLogin;
    }
    /**
     * Auto generated method that gets the related <code>UserLogin</code> by the relation named <code>RunAsUserLogin</code>.
     * @return the <code>UserLogin</code>
     * @throws RepositoryException if an error occurs
     */
    public UserLogin getRunAsUserLogin() throws RepositoryException {
        if (this.runAsUserLogin == null) {
            this.runAsUserLogin = getRelatedOne(UserLogin.class, "RunAsUserLogin");
        }
        return this.runAsUserLogin;
    }
    /**
     * Auto generated method that gets the related <code>StatusItem</code> by the relation named <code>StatusItem</code>.
     * @return the <code>StatusItem</code>
     * @throws RepositoryException if an error occurs
     */
    public StatusItem getStatusItem() throws RepositoryException {
        if (this.statusItem == null) {
            this.statusItem = getRelatedOne(StatusItem.class, "StatusItem");
        }
        return this.statusItem;
    }

    /**
     * Auto generated value setter.
     * @param recurrenceInfo the recurrenceInfo to set
    */
    public void setRecurrenceInfo(RecurrenceInfo recurrenceInfo) {
        this.recurrenceInfo = recurrenceInfo;
    }
    /**
     * Auto generated value setter.
     * @param temporalExpression the temporalExpression to set
    */
    public void setTemporalExpression(TemporalExpression temporalExpression) {
        this.temporalExpression = temporalExpression;
    }
    /**
     * Auto generated value setter.
     * @param runtimeData the runtimeData to set
    */
    public void setRuntimeData(RuntimeData runtimeData) {
        this.runtimeData = runtimeData;
    }
    /**
     * Auto generated value setter.
     * @param authUserLogin the authUserLogin to set
    */
    public void setAuthUserLogin(UserLogin authUserLogin) {
        this.authUserLogin = authUserLogin;
    }
    /**
     * Auto generated value setter.
     * @param runAsUserLogin the runAsUserLogin to set
    */
    public void setRunAsUserLogin(UserLogin runAsUserLogin) {
        this.runAsUserLogin = runAsUserLogin;
    }
    /**
     * Auto generated value setter.
     * @param statusItem the statusItem to set
    */
    public void setStatusItem(StatusItem statusItem) {
        this.statusItem = statusItem;
    }


    /** {@inheritDoc} */
    @Override
    public void fromMap(Map<String, Object> mapValue) {
        preInit();
        setJobId((String) mapValue.get("jobId"));
        setJobName((String) mapValue.get("jobName"));
        setRunTime((Timestamp) mapValue.get("runTime"));
        setPoolId((String) mapValue.get("poolId"));
        setStatusId((String) mapValue.get("statusId"));
        setParentJobId((String) mapValue.get("parentJobId"));
        setPreviousJobId((String) mapValue.get("previousJobId"));
        setServiceName((String) mapValue.get("serviceName"));
        setLoaderName((String) mapValue.get("loaderName"));
        setMaxRetry((Long) mapValue.get("maxRetry"));
        setAuthUserLoginId((String) mapValue.get("authUserLoginId"));
        setRunAsUser((String) mapValue.get("runAsUser"));
        setRuntimeDataId((String) mapValue.get("runtimeDataId"));
        setRecurrenceInfoId((String) mapValue.get("recurrenceInfoId"));
        setTempExprId((String) mapValue.get("tempExprId"));
        setCurrentRecurrenceCount((Long) mapValue.get("currentRecurrenceCount"));
        setMaxRecurrenceCount((Long) mapValue.get("maxRecurrenceCount"));
        setRunByInstanceId((String) mapValue.get("runByInstanceId"));
        setStartDateTime((Timestamp) mapValue.get("startDateTime"));
        setFinishDateTime((Timestamp) mapValue.get("finishDateTime"));
        setCancelDateTime((Timestamp) mapValue.get("cancelDateTime"));
        setLastUpdatedStamp((Timestamp) mapValue.get("lastUpdatedStamp"));
        setLastUpdatedTxStamp((Timestamp) mapValue.get("lastUpdatedTxStamp"));
        setCreatedStamp((Timestamp) mapValue.get("createdStamp"));
        setCreatedTxStamp((Timestamp) mapValue.get("createdTxStamp"));
        postInit();
    }

    /** {@inheritDoc} */
    @Override
    public Map<String, Object> toMap() {
        Map<String, Object> mapValue = new FastMap<String, Object>();
        mapValue.put("jobId", getJobId());
        mapValue.put("jobName", getJobName());
        mapValue.put("runTime", getRunTime());
        mapValue.put("poolId", getPoolId());
        mapValue.put("statusId", getStatusId());
        mapValue.put("parentJobId", getParentJobId());
        mapValue.put("previousJobId", getPreviousJobId());
        mapValue.put("serviceName", getServiceName());
        mapValue.put("loaderName", getLoaderName());
        mapValue.put("maxRetry", getMaxRetry());
        mapValue.put("authUserLoginId", getAuthUserLoginId());
        mapValue.put("runAsUser", getRunAsUser());
        mapValue.put("runtimeDataId", getRuntimeDataId());
        mapValue.put("recurrenceInfoId", getRecurrenceInfoId());
        mapValue.put("tempExprId", getTempExprId());
        mapValue.put("currentRecurrenceCount", getCurrentRecurrenceCount());
        mapValue.put("maxRecurrenceCount", getMaxRecurrenceCount());
        mapValue.put("runByInstanceId", getRunByInstanceId());
        mapValue.put("startDateTime", getStartDateTime());
        mapValue.put("finishDateTime", getFinishDateTime());
        mapValue.put("cancelDateTime", getCancelDateTime());
        mapValue.put("lastUpdatedStamp", getLastUpdatedStamp());
        mapValue.put("lastUpdatedTxStamp", getLastUpdatedTxStamp());
        mapValue.put("createdStamp", getCreatedStamp());
        mapValue.put("createdTxStamp", getCreatedTxStamp());
        return mapValue;
    }


}
