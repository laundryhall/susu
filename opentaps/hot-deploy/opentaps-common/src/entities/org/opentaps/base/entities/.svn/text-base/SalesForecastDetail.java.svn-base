package org.opentaps.base.entities;

/*
 * Copyright (c) Open Source Strategies, Inc.
 *
 * Opentaps is free software: you can redistribute it and/or modify it
 * under the terms of the GNU Affero General Public License as published
 * by the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Opentaps is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with Opentaps.  If not, see <http://www.gnu.org/licenses/>.
 */

// DO NOT EDIT THIS FILE!  THIS IS AUTO GENERATED AND WILL GET WRITTEN OVER PERIODICALLY WHEN THE DATA MODEL CHANGES
// EXTEND THIS CLASS INSTEAD.

import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;

import javolution.util.FastMap;

import org.opentaps.foundation.entity.Entity;
import org.opentaps.foundation.entity.EntityFieldInterface;
import org.opentaps.foundation.repository.RepositoryException;
import org.opentaps.foundation.repository.RepositoryInterface;
import javax.persistence.*;
import org.hibernate.search.annotations.*;
import java.lang.String;
import java.math.BigDecimal;
import java.sql.Timestamp;

/**
 * Auto generated base entity SalesForecastDetail.
 */
@javax.persistence.Entity
@Table(name="SALES_FORECAST_DETAIL")
public class SalesForecastDetail extends Entity {
static {
java.util.Map<String, String> fields = new java.util.HashMap<String, String>();
        fields.put("salesForecastId", "SALES_FORECAST_ID");
        fields.put("salesForecastDetailId", "SALES_FORECAST_DETAIL_ID");
        fields.put("amount", "AMOUNT");
        fields.put("quantityUomId", "QUANTITY_UOM_ID");
        fields.put("quantity", "QUANTITY");
        fields.put("productId", "PRODUCT_ID");
        fields.put("productCategoryId", "PRODUCT_CATEGORY_ID");
        fields.put("lastUpdatedStamp", "LAST_UPDATED_STAMP");
        fields.put("lastUpdatedTxStamp", "LAST_UPDATED_TX_STAMP");
        fields.put("createdStamp", "CREATED_STAMP");
        fields.put("createdTxStamp", "CREATED_TX_STAMP");
fieldMapColumns.put("SalesForecastDetail", fields);
}
  public static enum Fields implements EntityFieldInterface<SalesForecastDetail> {
    salesForecastId("salesForecastId"),
    salesForecastDetailId("salesForecastDetailId"),
    amount("amount"),
    quantityUomId("quantityUomId"),
    quantity("quantity"),
    productId("productId"),
    productCategoryId("productCategoryId"),
    lastUpdatedStamp("lastUpdatedStamp"),
    lastUpdatedTxStamp("lastUpdatedTxStamp"),
    createdStamp("createdStamp"),
    createdTxStamp("createdTxStamp");
    private final String fieldName;
    private Fields(String name) { fieldName = name; }
    /** {@inheritDoc} */
    public String getName() { return fieldName; }
    /** {@inheritDoc} */
    public String asc() { return fieldName + " ASC"; }
    /** {@inheritDoc} */
    public String desc() { return fieldName + " DESC"; }
  }

   @EmbeddedId

   @FieldBridge(impl = org.opentaps.base.entities.bridge.SalesForecastDetailPkBridge.class)
     private SalesForecastDetailPk id = new SalesForecastDetailPk();
   
    /**
     * Auto generated Id accessor.
     * @return <code>SalesForecastDetailPk</code>
     */
      public SalesForecastDetailPk getId() {
         return id;
      }
    /**
     * Auto generated Id setter.
     * @param id a <code>SalesForecastDetailPk</code> value to set
    */   
      public void setId(SalesForecastDetailPk id) {
         this.id = id;
      }
   @Column(name="AMOUNT")
   private BigDecimal amount;
   @Column(name="QUANTITY_UOM_ID")
   private String quantityUomId;
   @Column(name="QUANTITY")
   private BigDecimal quantity;
   @Column(name="PRODUCT_ID")
   private String productId;
   @Column(name="PRODUCT_CATEGORY_ID")
   private String productCategoryId;
   @Column(name="LAST_UPDATED_STAMP")
   private Timestamp lastUpdatedStamp;
   @Column(name="LAST_UPDATED_TX_STAMP")
   private Timestamp lastUpdatedTxStamp;
   @Column(name="CREATED_STAMP")
   private Timestamp createdStamp;
   @Column(name="CREATED_TX_STAMP")
   private Timestamp createdTxStamp;
   @ManyToOne(cascade = {CascadeType.PERSIST, CascadeType.MERGE}, fetch=FetchType.LAZY)
   @JoinColumn(name="SALES_FORECAST_ID", insertable=false, updatable=false)
   @org.hibernate.annotations.Generated(
      org.hibernate.annotations.GenerationTime.ALWAYS
   )
   
   private SalesForecast salesForecast = null;
   @ManyToOne(cascade = {CascadeType.PERSIST, CascadeType.MERGE}, fetch=FetchType.LAZY)
   @JoinColumn(name="QUANTITY_UOM_ID", insertable=false, updatable=false)
   @org.hibernate.annotations.Generated(
      org.hibernate.annotations.GenerationTime.ALWAYS
   )
   
   private Uom quantityUom = null;
   @ManyToOne(cascade = {CascadeType.PERSIST, CascadeType.MERGE}, fetch=FetchType.LAZY)
   @JoinColumn(name="PRODUCT_ID", insertable=false, updatable=false)
   @org.hibernate.annotations.Generated(
      org.hibernate.annotations.GenerationTime.ALWAYS
   )
   
   private Product product = null;
   @ManyToOne(cascade = {CascadeType.PERSIST, CascadeType.MERGE}, fetch=FetchType.LAZY)
   @JoinColumn(name="PRODUCT_CATEGORY_ID", insertable=false, updatable=false)
   @org.hibernate.annotations.Generated(
      org.hibernate.annotations.GenerationTime.ALWAYS
   )
   
   private ProductCategory productCategory = null;

  /**
   * Default constructor.
   */
  public SalesForecastDetail() {
      super();
      this.baseEntityName = "SalesForecastDetail";
      this.isView = false;
      
      this.primaryKeyNames = new ArrayList<String>();
      this.primaryKeyNames.add("salesForecastId");this.primaryKeyNames.add("salesForecastDetailId");
      this.allFieldsNames = new ArrayList<String>();
      this.allFieldsNames.add("salesForecastId");this.allFieldsNames.add("salesForecastDetailId");this.allFieldsNames.add("amount");this.allFieldsNames.add("quantityUomId");this.allFieldsNames.add("quantity");this.allFieldsNames.add("productId");this.allFieldsNames.add("productCategoryId");this.allFieldsNames.add("lastUpdatedStamp");this.allFieldsNames.add("lastUpdatedTxStamp");this.allFieldsNames.add("createdStamp");this.allFieldsNames.add("createdTxStamp");
      this.nonPrimaryKeyNames = new ArrayList<String>();
      this.nonPrimaryKeyNames.addAll(allFieldsNames);
      this.nonPrimaryKeyNames.removeAll(primaryKeyNames);
  }

  /**
   * Constructor with a repository.
   * @param repository a <code>RepositoryInterface</code> value
   */
  public SalesForecastDetail(RepositoryInterface repository) {
      this();
      initRepository(repository);
  }

    /**
     * Auto generated value setter.
     * @param salesForecastId the salesForecastId to set
     */
    public void setSalesForecastId(String salesForecastId) {
        id.setSalesForecastId(salesForecastId);
    }
    /**
     * Auto generated value setter.
     * @param salesForecastDetailId the salesForecastDetailId to set
     */
    public void setSalesForecastDetailId(String salesForecastDetailId) {
        id.setSalesForecastDetailId(salesForecastDetailId);
    }
    /**
     * Auto generated value setter.
     * @param amount the amount to set
     */
    public void setAmount(BigDecimal amount) {
        this.amount = amount;
    }
    /**
     * Auto generated value setter.
     * @param quantityUomId the quantityUomId to set
     */
    public void setQuantityUomId(String quantityUomId) {
        this.quantityUomId = quantityUomId;
    }
    /**
     * Auto generated value setter.
     * @param quantity the quantity to set
     */
    public void setQuantity(BigDecimal quantity) {
        this.quantity = quantity;
    }
    /**
     * Auto generated value setter.
     * @param productId the productId to set
     */
    public void setProductId(String productId) {
        this.productId = productId;
    }
    /**
     * Auto generated value setter.
     * @param productCategoryId the productCategoryId to set
     */
    public void setProductCategoryId(String productCategoryId) {
        this.productCategoryId = productCategoryId;
    }
    /**
     * Auto generated value setter.
     * @param lastUpdatedStamp the lastUpdatedStamp to set
     */
    public void setLastUpdatedStamp(Timestamp lastUpdatedStamp) {
        this.lastUpdatedStamp = lastUpdatedStamp;
    }
    /**
     * Auto generated value setter.
     * @param lastUpdatedTxStamp the lastUpdatedTxStamp to set
     */
    public void setLastUpdatedTxStamp(Timestamp lastUpdatedTxStamp) {
        this.lastUpdatedTxStamp = lastUpdatedTxStamp;
    }
    /**
     * Auto generated value setter.
     * @param createdStamp the createdStamp to set
     */
    public void setCreatedStamp(Timestamp createdStamp) {
        this.createdStamp = createdStamp;
    }
    /**
     * Auto generated value setter.
     * @param createdTxStamp the createdTxStamp to set
     */
    public void setCreatedTxStamp(Timestamp createdTxStamp) {
        this.createdTxStamp = createdTxStamp;
    }

    /**
     * Auto generated value accessor.
     * @return <code>String</code>
     */
    public String getSalesForecastId() {
        return this.id.getSalesForecastId();
    }
    /**
     * Auto generated value accessor.
     * @return <code>String</code>
     */
    public String getSalesForecastDetailId() {
        return this.id.getSalesForecastDetailId();
    }
    /**
     * Auto generated value accessor.
     * @return <code>BigDecimal</code>
     */
    public BigDecimal getAmount() {
        return this.amount;
    }
    /**
     * Auto generated value accessor.
     * @return <code>String</code>
     */
    public String getQuantityUomId() {
        return this.quantityUomId;
    }
    /**
     * Auto generated value accessor.
     * @return <code>BigDecimal</code>
     */
    public BigDecimal getQuantity() {
        return this.quantity;
    }
    /**
     * Auto generated value accessor.
     * @return <code>String</code>
     */
    public String getProductId() {
        return this.productId;
    }
    /**
     * Auto generated value accessor.
     * @return <code>String</code>
     */
    public String getProductCategoryId() {
        return this.productCategoryId;
    }
    /**
     * Auto generated value accessor.
     * @return <code>Timestamp</code>
     */
    public Timestamp getLastUpdatedStamp() {
        return this.lastUpdatedStamp;
    }
    /**
     * Auto generated value accessor.
     * @return <code>Timestamp</code>
     */
    public Timestamp getLastUpdatedTxStamp() {
        return this.lastUpdatedTxStamp;
    }
    /**
     * Auto generated value accessor.
     * @return <code>Timestamp</code>
     */
    public Timestamp getCreatedStamp() {
        return this.createdStamp;
    }
    /**
     * Auto generated value accessor.
     * @return <code>Timestamp</code>
     */
    public Timestamp getCreatedTxStamp() {
        return this.createdTxStamp;
    }

    /**
     * Auto generated method that gets the related <code>SalesForecast</code> by the relation named <code>SalesForecast</code>.
     * @return the <code>SalesForecast</code>
     * @throws RepositoryException if an error occurs
     */
    public SalesForecast getSalesForecast() throws RepositoryException {
        if (this.salesForecast == null) {
            this.salesForecast = getRelatedOne(SalesForecast.class, "SalesForecast");
        }
        return this.salesForecast;
    }
    /**
     * Auto generated method that gets the related <code>Uom</code> by the relation named <code>QuantityUom</code>.
     * @return the <code>Uom</code>
     * @throws RepositoryException if an error occurs
     */
    public Uom getQuantityUom() throws RepositoryException {
        if (this.quantityUom == null) {
            this.quantityUom = getRelatedOne(Uom.class, "QuantityUom");
        }
        return this.quantityUom;
    }
    /**
     * Auto generated method that gets the related <code>Product</code> by the relation named <code>Product</code>.
     * @return the <code>Product</code>
     * @throws RepositoryException if an error occurs
     */
    public Product getProduct() throws RepositoryException {
        if (this.product == null) {
            this.product = getRelatedOne(Product.class, "Product");
        }
        return this.product;
    }
    /**
     * Auto generated method that gets the related <code>ProductCategory</code> by the relation named <code>ProductCategory</code>.
     * @return the <code>ProductCategory</code>
     * @throws RepositoryException if an error occurs
     */
    public ProductCategory getProductCategory() throws RepositoryException {
        if (this.productCategory == null) {
            this.productCategory = getRelatedOne(ProductCategory.class, "ProductCategory");
        }
        return this.productCategory;
    }

    /**
     * Auto generated value setter.
     * @param salesForecast the salesForecast to set
    */
    public void setSalesForecast(SalesForecast salesForecast) {
        this.salesForecast = salesForecast;
    }
    /**
     * Auto generated value setter.
     * @param quantityUom the quantityUom to set
    */
    public void setQuantityUom(Uom quantityUom) {
        this.quantityUom = quantityUom;
    }
    /**
     * Auto generated value setter.
     * @param product the product to set
    */
    public void setProduct(Product product) {
        this.product = product;
    }
    /**
     * Auto generated value setter.
     * @param productCategory the productCategory to set
    */
    public void setProductCategory(ProductCategory productCategory) {
        this.productCategory = productCategory;
    }


    /** {@inheritDoc} */
    @Override
    public void fromMap(Map<String, Object> mapValue) {
        preInit();
        setSalesForecastId((String) mapValue.get("salesForecastId"));
        setSalesForecastDetailId((String) mapValue.get("salesForecastDetailId"));
        setAmount(convertToBigDecimal(mapValue.get("amount")));
        setQuantityUomId((String) mapValue.get("quantityUomId"));
        setQuantity(convertToBigDecimal(mapValue.get("quantity")));
        setProductId((String) mapValue.get("productId"));
        setProductCategoryId((String) mapValue.get("productCategoryId"));
        setLastUpdatedStamp((Timestamp) mapValue.get("lastUpdatedStamp"));
        setLastUpdatedTxStamp((Timestamp) mapValue.get("lastUpdatedTxStamp"));
        setCreatedStamp((Timestamp) mapValue.get("createdStamp"));
        setCreatedTxStamp((Timestamp) mapValue.get("createdTxStamp"));
        postInit();
    }

    /** {@inheritDoc} */
    @Override
    public Map<String, Object> toMap() {
        Map<String, Object> mapValue = new FastMap<String, Object>();
        mapValue.put("salesForecastId", getSalesForecastId());
        mapValue.put("salesForecastDetailId", getSalesForecastDetailId());
        mapValue.put("amount", getAmount());
        mapValue.put("quantityUomId", getQuantityUomId());
        mapValue.put("quantity", getQuantity());
        mapValue.put("productId", getProductId());
        mapValue.put("productCategoryId", getProductCategoryId());
        mapValue.put("lastUpdatedStamp", getLastUpdatedStamp());
        mapValue.put("lastUpdatedTxStamp", getLastUpdatedTxStamp());
        mapValue.put("createdStamp", getCreatedStamp());
        mapValue.put("createdTxStamp", getCreatedTxStamp());
        return mapValue;
    }


}
