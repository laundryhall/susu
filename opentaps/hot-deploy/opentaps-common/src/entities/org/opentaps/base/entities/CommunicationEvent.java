package org.opentaps.base.entities;

/*
 * Copyright (c) Open Source Strategies, Inc.
 *
 * Opentaps is free software: you can redistribute it and/or modify it
 * under the terms of the GNU Affero General Public License as published
 * by the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Opentaps is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with Opentaps.  If not, see <http://www.gnu.org/licenses/>.
 */

// DO NOT EDIT THIS FILE!  THIS IS AUTO GENERATED AND WILL GET WRITTEN OVER PERIODICALLY WHEN THE DATA MODEL CHANGES
// EXTEND THIS CLASS INSTEAD.

import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;

import javolution.util.FastMap;

import org.opentaps.foundation.entity.Entity;
import org.opentaps.foundation.entity.EntityFieldInterface;
import org.opentaps.foundation.repository.RepositoryException;
import org.opentaps.foundation.repository.RepositoryInterface;
import javax.persistence.*;
import org.hibernate.search.annotations.*;
import java.lang.String;
import java.sql.Timestamp;

/**
 * Auto generated base entity CommunicationEvent.
 */
@javax.persistence.Entity
@Table(name="COMMUNICATION_EVENT")
public class CommunicationEvent extends Entity {
static {
java.util.Map<String, String> fields = new java.util.HashMap<String, String>();
        fields.put("communicationEventId", "COMMUNICATION_EVENT_ID");
        fields.put("communicationEventTypeId", "COMMUNICATION_EVENT_TYPE_ID");
        fields.put("origCommEventId", "ORIG_COMM_EVENT_ID");
        fields.put("parentCommEventId", "PARENT_COMM_EVENT_ID");
        fields.put("statusId", "STATUS_ID");
        fields.put("contactMechTypeId", "CONTACT_MECH_TYPE_ID");
        fields.put("contactMechIdFrom", "CONTACT_MECH_ID_FROM");
        fields.put("contactMechIdTo", "CONTACT_MECH_ID_TO");
        fields.put("roleTypeIdFrom", "ROLE_TYPE_ID_FROM");
        fields.put("roleTypeIdTo", "ROLE_TYPE_ID_TO");
        fields.put("partyIdFrom", "PARTY_ID_FROM");
        fields.put("partyIdTo", "PARTY_ID_TO");
        fields.put("entryDate", "ENTRY_DATE");
        fields.put("datetimeStarted", "DATETIME_STARTED");
        fields.put("datetimeEnded", "DATETIME_ENDED");
        fields.put("subject", "SUBJECT");
        fields.put("contentMimeTypeId", "CONTENT_MIME_TYPE_ID");
        fields.put("content", "CONTENT");
        fields.put("note", "NOTE");
        fields.put("reasonEnumId", "REASON_ENUM_ID");
        fields.put("contactListId", "CONTACT_LIST_ID");
        fields.put("headerString", "HEADER_STRING");
        fields.put("fromString", "FROM_STRING");
        fields.put("toString", "TO_STRING");
        fields.put("ccString", "CC_STRING");
        fields.put("bccString", "BCC_STRING");
        fields.put("messageId", "MESSAGE_ID");
        fields.put("lastUpdatedStamp", "LAST_UPDATED_STAMP");
        fields.put("lastUpdatedTxStamp", "LAST_UPDATED_TX_STAMP");
        fields.put("createdStamp", "CREATED_STAMP");
        fields.put("createdTxStamp", "CREATED_TX_STAMP");
fieldMapColumns.put("CommunicationEvent", fields);
}
  public static enum Fields implements EntityFieldInterface<CommunicationEvent> {
    communicationEventId("communicationEventId"),
    communicationEventTypeId("communicationEventTypeId"),
    origCommEventId("origCommEventId"),
    parentCommEventId("parentCommEventId"),
    statusId("statusId"),
    contactMechTypeId("contactMechTypeId"),
    contactMechIdFrom("contactMechIdFrom"),
    contactMechIdTo("contactMechIdTo"),
    roleTypeIdFrom("roleTypeIdFrom"),
    roleTypeIdTo("roleTypeIdTo"),
    partyIdFrom("partyIdFrom"),
    partyIdTo("partyIdTo"),
    entryDate("entryDate"),
    datetimeStarted("datetimeStarted"),
    datetimeEnded("datetimeEnded"),
    subject("subject"),
    contentMimeTypeId("contentMimeTypeId"),
    content("content"),
    note("note"),
    reasonEnumId("reasonEnumId"),
    contactListId("contactListId"),
    headerString("headerString"),
    fromString("fromString"),
    toString("toString"),
    ccString("ccString"),
    bccString("bccString"),
    messageId("messageId"),
    lastUpdatedStamp("lastUpdatedStamp"),
    lastUpdatedTxStamp("lastUpdatedTxStamp"),
    createdStamp("createdStamp"),
    createdTxStamp("createdTxStamp");
    private final String fieldName;
    private Fields(String name) { fieldName = name; }
    /** {@inheritDoc} */
    public String getName() { return fieldName; }
    /** {@inheritDoc} */
    public String asc() { return fieldName + " ASC"; }
    /** {@inheritDoc} */
    public String desc() { return fieldName + " DESC"; }
  }

   @org.hibernate.annotations.GenericGenerator(name="CommunicationEvent_GEN",  strategy="org.opentaps.foundation.entity.hibernate.OpentapsIdentifierGenerator")
   @GeneratedValue(generator="CommunicationEvent_GEN")
   @Id
   @Column(name="COMMUNICATION_EVENT_ID")
   private String communicationEventId;
   @Column(name="COMMUNICATION_EVENT_TYPE_ID")
   private String communicationEventTypeId;
   @Column(name="ORIG_COMM_EVENT_ID")
   private String origCommEventId;
   @Column(name="PARENT_COMM_EVENT_ID")
   private String parentCommEventId;
   @Column(name="STATUS_ID")
   private String statusId;
   @Column(name="CONTACT_MECH_TYPE_ID")
   private String contactMechTypeId;
   @Column(name="CONTACT_MECH_ID_FROM")
   private String contactMechIdFrom;
   @Column(name="CONTACT_MECH_ID_TO")
   private String contactMechIdTo;
   @Column(name="ROLE_TYPE_ID_FROM")
   private String roleTypeIdFrom;
   @Column(name="ROLE_TYPE_ID_TO")
   private String roleTypeIdTo;
   @Column(name="PARTY_ID_FROM")
   private String partyIdFrom;
   @Column(name="PARTY_ID_TO")
   private String partyIdTo;
   @Column(name="ENTRY_DATE")
   private Timestamp entryDate;
   @Column(name="DATETIME_STARTED")
   private Timestamp datetimeStarted;
   @Column(name="DATETIME_ENDED")
   private Timestamp datetimeEnded;
   @Column(name="SUBJECT")
   private String subject;
   @Column(name="CONTENT_MIME_TYPE_ID")
   private String contentMimeTypeId;
   @Column(name="CONTENT")
   private String content;
   @Column(name="NOTE")
   private String note;
   @Column(name="REASON_ENUM_ID")
   private String reasonEnumId;
   @Column(name="CONTACT_LIST_ID")
   private String contactListId;
   @Column(name="HEADER_STRING")
   private String headerString;
   @Column(name="FROM_STRING")
   private String fromString;
   @Column(name="TO_STRING")
   private String toString;
   @Column(name="CC_STRING")
   private String ccString;
   @Column(name="BCC_STRING")
   private String bccString;
   @Column(name="MESSAGE_ID")
   private String messageId;
   @Column(name="LAST_UPDATED_STAMP")
   private Timestamp lastUpdatedStamp;
   @Column(name="LAST_UPDATED_TX_STAMP")
   private Timestamp lastUpdatedTxStamp;
   @Column(name="CREATED_STAMP")
   private Timestamp createdStamp;
   @Column(name="CREATED_TX_STAMP")
   private Timestamp createdTxStamp;
   @ManyToOne(cascade = {CascadeType.PERSIST, CascadeType.MERGE}, fetch=FetchType.LAZY)
   @JoinColumn(name="COMMUNICATION_EVENT_TYPE_ID", insertable=false, updatable=false)
   @org.hibernate.annotations.Generated(
      org.hibernate.annotations.GenerationTime.ALWAYS
   )
   
   private CommunicationEventType communicationEventType = null;
   @ManyToOne(cascade = {CascadeType.PERSIST, CascadeType.MERGE}, fetch=FetchType.LAZY)
   @JoinColumn(name="PARTY_ID_TO", insertable=false, updatable=false)
   @org.hibernate.annotations.Generated(
      org.hibernate.annotations.GenerationTime.ALWAYS
   )
   
   private Party toParty = null;
   @ManyToOne(cascade = {CascadeType.PERSIST, CascadeType.MERGE}, fetch=FetchType.LAZY)
   @JoinColumn(name="ROLE_TYPE_ID_TO", insertable=false, updatable=false)
   @org.hibernate.annotations.Generated(
      org.hibernate.annotations.GenerationTime.ALWAYS
   )
   
   private RoleType toRoleType = null;
   private transient PartyRole toPartyRole = null;
   @ManyToOne(cascade = {CascadeType.PERSIST, CascadeType.MERGE}, fetch=FetchType.LAZY)
   @JoinColumn(name="PARTY_ID_FROM", insertable=false, updatable=false)
   @org.hibernate.annotations.Generated(
      org.hibernate.annotations.GenerationTime.ALWAYS
   )
   
   private Party fromParty = null;
   @ManyToOne(cascade = {CascadeType.PERSIST, CascadeType.MERGE}, fetch=FetchType.LAZY)
   @JoinColumn(name="ROLE_TYPE_ID_FROM", insertable=false, updatable=false)
   @org.hibernate.annotations.Generated(
      org.hibernate.annotations.GenerationTime.ALWAYS
   )
   
   private RoleType fromRoleType = null;
   private transient PartyRole fromPartyRole = null;
   @ManyToOne(cascade = {CascadeType.PERSIST, CascadeType.MERGE}, fetch=FetchType.LAZY)
   @JoinColumn(name="STATUS_ID", insertable=false, updatable=false)
   @org.hibernate.annotations.Generated(
      org.hibernate.annotations.GenerationTime.ALWAYS
   )
   
   private StatusItem statusItem = null;
   @ManyToOne(cascade = {CascadeType.PERSIST, CascadeType.MERGE}, fetch=FetchType.LAZY)
   @JoinColumn(name="CONTACT_MECH_TYPE_ID", insertable=false, updatable=false)
   @org.hibernate.annotations.Generated(
      org.hibernate.annotations.GenerationTime.ALWAYS
   )
   
   private ContactMechType contactMechType = null;
   @ManyToOne(cascade = {CascadeType.PERSIST, CascadeType.MERGE}, fetch=FetchType.LAZY)
   @JoinColumn(name="CONTACT_MECH_ID_FROM", insertable=false, updatable=false)
   @org.hibernate.annotations.Generated(
      org.hibernate.annotations.GenerationTime.ALWAYS
   )
   
   private ContactMech fromContactMech = null;
   @ManyToOne(cascade = {CascadeType.PERSIST, CascadeType.MERGE}, fetch=FetchType.LAZY)
   @JoinColumn(name="CONTACT_MECH_ID_TO", insertable=false, updatable=false)
   @org.hibernate.annotations.Generated(
      org.hibernate.annotations.GenerationTime.ALWAYS
   )
   
   private ContactMech toContactMech = null;
   @ManyToOne(cascade = {CascadeType.PERSIST, CascadeType.MERGE}, fetch=FetchType.LAZY)
   @JoinColumn(name="CONTACT_LIST_ID", insertable=false, updatable=false)
   @org.hibernate.annotations.Generated(
      org.hibernate.annotations.GenerationTime.ALWAYS
   )
   
   private ContactList contactList = null;
   @ManyToOne(cascade = {CascadeType.PERSIST, CascadeType.MERGE}, fetch=FetchType.LAZY)
   @JoinColumn(name="CONTENT_MIME_TYPE_ID", insertable=false, updatable=false)
   @org.hibernate.annotations.Generated(
      org.hibernate.annotations.GenerationTime.ALWAYS
   )
   
   private MimeType mimeType = null;
   @ManyToOne(cascade = {CascadeType.PERSIST, CascadeType.MERGE}, fetch=FetchType.LAZY)
   @JoinColumn(name="REASON_ENUM_ID", insertable=false, updatable=false)
   @org.hibernate.annotations.Generated(
      org.hibernate.annotations.GenerationTime.ALWAYS
   )
   
   private Enumeration enumeration = null;
   @OneToMany(fetch=FetchType.LAZY, mappedBy="communicationEvent", cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REMOVE})
   @JoinColumn(name="COMMUNICATION_EVENT_ID")
   
   private List<CommEventContentAssoc> commEventContentAssocs = null;
   @OneToMany(fetch=FetchType.LAZY, mappedBy="communicationEvent", cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REMOVE})
   @JoinColumn(name="COMMUNICATION_EVENT_ID")
   
   private List<CommunicationEventOrder> communicationEventOrders = null;
   @OneToMany(fetch=FetchType.LAZY, mappedBy="communicationEvent", cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REMOVE})
   @JoinColumn(name="COMMUNICATION_EVENT_ID")
   
   private List<CommunicationEventProduct> communicationEventProducts = null;
   @OneToMany(fetch=FetchType.LAZY, mappedBy="communicationEvent", cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REMOVE})
   @JoinColumn(name="COMMUNICATION_EVENT_ID")
   
   private List<CommunicationEventPurpose> communicationEventPurposes = null;
   @OneToMany(fetch=FetchType.LAZY, mappedBy="communicationEvent", cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REMOVE})
   @JoinColumn(name="COMMUNICATION_EVENT_ID")
   
   private List<CommunicationEventRole> communicationEventRoles = null;
   @OneToMany(fetch=FetchType.LAZY, mappedBy="communicationEvent", cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REMOVE})
   @JoinColumn(name="COMMUNICATION_EVENT_ID")
   
   private List<CommunicationEventWorkEff> communicationEventWorkEffs = null;
   @OneToMany(fetch=FetchType.LAZY, mappedBy="communicationEvent", cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REMOVE})
   @JoinColumn(name="COMMUNICATION_EVENT_ID")
   
   private List<ContactListCommStatus> contactListCommStatuses = null;
   @OneToMany(fetch=FetchType.LAZY, mappedBy="communicationEvent", cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REMOVE})
   @JoinColumn(name="COMMUNICATION_EVENT_ID")
   
   private List<CustRequestCommEvent> custRequestCommEvents = null;
   private transient List<PartyNeed> partyNeeds = null;
   @OneToMany(fetch=FetchType.LAZY, mappedBy="communicationEvent", cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REMOVE})
   @JoinColumn(name="COMMUNICATION_EVENT_ID")
   
   private List<SubscriptionCommEvent> subscriptionCommEvents = null;

  /**
   * Default constructor.
   */
  public CommunicationEvent() {
      super();
      this.baseEntityName = "CommunicationEvent";
      this.isView = false;
      
      this.primaryKeyNames = new ArrayList<String>();
      this.primaryKeyNames.add("communicationEventId");
      this.allFieldsNames = new ArrayList<String>();
      this.allFieldsNames.add("communicationEventId");this.allFieldsNames.add("communicationEventTypeId");this.allFieldsNames.add("origCommEventId");this.allFieldsNames.add("parentCommEventId");this.allFieldsNames.add("statusId");this.allFieldsNames.add("contactMechTypeId");this.allFieldsNames.add("contactMechIdFrom");this.allFieldsNames.add("contactMechIdTo");this.allFieldsNames.add("roleTypeIdFrom");this.allFieldsNames.add("roleTypeIdTo");this.allFieldsNames.add("partyIdFrom");this.allFieldsNames.add("partyIdTo");this.allFieldsNames.add("entryDate");this.allFieldsNames.add("datetimeStarted");this.allFieldsNames.add("datetimeEnded");this.allFieldsNames.add("subject");this.allFieldsNames.add("contentMimeTypeId");this.allFieldsNames.add("content");this.allFieldsNames.add("note");this.allFieldsNames.add("reasonEnumId");this.allFieldsNames.add("contactListId");this.allFieldsNames.add("headerString");this.allFieldsNames.add("fromString");this.allFieldsNames.add("toString");this.allFieldsNames.add("ccString");this.allFieldsNames.add("bccString");this.allFieldsNames.add("messageId");this.allFieldsNames.add("lastUpdatedStamp");this.allFieldsNames.add("lastUpdatedTxStamp");this.allFieldsNames.add("createdStamp");this.allFieldsNames.add("createdTxStamp");
      this.nonPrimaryKeyNames = new ArrayList<String>();
      this.nonPrimaryKeyNames.addAll(allFieldsNames);
      this.nonPrimaryKeyNames.removeAll(primaryKeyNames);
  }

  /**
   * Constructor with a repository.
   * @param repository a <code>RepositoryInterface</code> value
   */
  public CommunicationEvent(RepositoryInterface repository) {
      this();
      initRepository(repository);
  }

    /**
     * Auto generated value setter.
     * @param communicationEventId the communicationEventId to set
     */
    public void setCommunicationEventId(String communicationEventId) {
        this.communicationEventId = communicationEventId;
    }
    /**
     * Auto generated value setter.
     * @param communicationEventTypeId the communicationEventTypeId to set
     */
    public void setCommunicationEventTypeId(String communicationEventTypeId) {
        this.communicationEventTypeId = communicationEventTypeId;
    }
    /**
     * Auto generated value setter.
     * @param origCommEventId the origCommEventId to set
     */
    public void setOrigCommEventId(String origCommEventId) {
        this.origCommEventId = origCommEventId;
    }
    /**
     * Auto generated value setter.
     * @param parentCommEventId the parentCommEventId to set
     */
    public void setParentCommEventId(String parentCommEventId) {
        this.parentCommEventId = parentCommEventId;
    }
    /**
     * Auto generated value setter.
     * @param statusId the statusId to set
     */
    public void setStatusId(String statusId) {
        this.statusId = statusId;
    }
    /**
     * Auto generated value setter.
     * @param contactMechTypeId the contactMechTypeId to set
     */
    public void setContactMechTypeId(String contactMechTypeId) {
        this.contactMechTypeId = contactMechTypeId;
    }
    /**
     * Auto generated value setter.
     * @param contactMechIdFrom the contactMechIdFrom to set
     */
    public void setContactMechIdFrom(String contactMechIdFrom) {
        this.contactMechIdFrom = contactMechIdFrom;
    }
    /**
     * Auto generated value setter.
     * @param contactMechIdTo the contactMechIdTo to set
     */
    public void setContactMechIdTo(String contactMechIdTo) {
        this.contactMechIdTo = contactMechIdTo;
    }
    /**
     * Auto generated value setter.
     * @param roleTypeIdFrom the roleTypeIdFrom to set
     */
    public void setRoleTypeIdFrom(String roleTypeIdFrom) {
        this.roleTypeIdFrom = roleTypeIdFrom;
    }
    /**
     * Auto generated value setter.
     * @param roleTypeIdTo the roleTypeIdTo to set
     */
    public void setRoleTypeIdTo(String roleTypeIdTo) {
        this.roleTypeIdTo = roleTypeIdTo;
    }
    /**
     * Auto generated value setter.
     * @param partyIdFrom the partyIdFrom to set
     */
    public void setPartyIdFrom(String partyIdFrom) {
        this.partyIdFrom = partyIdFrom;
    }
    /**
     * Auto generated value setter.
     * @param partyIdTo the partyIdTo to set
     */
    public void setPartyIdTo(String partyIdTo) {
        this.partyIdTo = partyIdTo;
    }
    /**
     * Auto generated value setter.
     * @param entryDate the entryDate to set
     */
    public void setEntryDate(Timestamp entryDate) {
        this.entryDate = entryDate;
    }
    /**
     * Auto generated value setter.
     * @param datetimeStarted the datetimeStarted to set
     */
    public void setDatetimeStarted(Timestamp datetimeStarted) {
        this.datetimeStarted = datetimeStarted;
    }
    /**
     * Auto generated value setter.
     * @param datetimeEnded the datetimeEnded to set
     */
    public void setDatetimeEnded(Timestamp datetimeEnded) {
        this.datetimeEnded = datetimeEnded;
    }
    /**
     * Auto generated value setter.
     * @param subject the subject to set
     */
    public void setSubject(String subject) {
        this.subject = subject;
    }
    /**
     * Auto generated value setter.
     * @param contentMimeTypeId the contentMimeTypeId to set
     */
    public void setContentMimeTypeId(String contentMimeTypeId) {
        this.contentMimeTypeId = contentMimeTypeId;
    }
    /**
     * Auto generated value setter.
     * @param content the content to set
     */
    public void setContent(String content) {
        this.content = content;
    }
    /**
     * Auto generated value setter.
     * @param note the note to set
     */
    public void setNote(String note) {
        this.note = note;
    }
    /**
     * Auto generated value setter.
     * @param reasonEnumId the reasonEnumId to set
     */
    public void setReasonEnumId(String reasonEnumId) {
        this.reasonEnumId = reasonEnumId;
    }
    /**
     * Auto generated value setter.
     * @param contactListId the contactListId to set
     */
    public void setContactListId(String contactListId) {
        this.contactListId = contactListId;
    }
    /**
     * Auto generated value setter.
     * @param headerString the headerString to set
     */
    public void setHeaderString(String headerString) {
        this.headerString = headerString;
    }
    /**
     * Auto generated value setter.
     * @param fromString the fromString to set
     */
    public void setFromString(String fromString) {
        this.fromString = fromString;
    }
    /**
     * Auto generated value setter.
     * @param toString the toString to set
     */
    public void setToString(String toString) {
        this.toString = toString;
    }
    /**
     * Auto generated value setter.
     * @param ccString the ccString to set
     */
    public void setCcString(String ccString) {
        this.ccString = ccString;
    }
    /**
     * Auto generated value setter.
     * @param bccString the bccString to set
     */
    public void setBccString(String bccString) {
        this.bccString = bccString;
    }
    /**
     * Auto generated value setter.
     * @param messageId the messageId to set
     */
    public void setMessageId(String messageId) {
        this.messageId = messageId;
    }
    /**
     * Auto generated value setter.
     * @param lastUpdatedStamp the lastUpdatedStamp to set
     */
    public void setLastUpdatedStamp(Timestamp lastUpdatedStamp) {
        this.lastUpdatedStamp = lastUpdatedStamp;
    }
    /**
     * Auto generated value setter.
     * @param lastUpdatedTxStamp the lastUpdatedTxStamp to set
     */
    public void setLastUpdatedTxStamp(Timestamp lastUpdatedTxStamp) {
        this.lastUpdatedTxStamp = lastUpdatedTxStamp;
    }
    /**
     * Auto generated value setter.
     * @param createdStamp the createdStamp to set
     */
    public void setCreatedStamp(Timestamp createdStamp) {
        this.createdStamp = createdStamp;
    }
    /**
     * Auto generated value setter.
     * @param createdTxStamp the createdTxStamp to set
     */
    public void setCreatedTxStamp(Timestamp createdTxStamp) {
        this.createdTxStamp = createdTxStamp;
    }

    /**
     * Auto generated value accessor.
     * @return <code>String</code>
     */
    public String getCommunicationEventId() {
        return this.communicationEventId;
    }
    /**
     * Auto generated value accessor.
     * @return <code>String</code>
     */
    public String getCommunicationEventTypeId() {
        return this.communicationEventTypeId;
    }
    /**
     * Auto generated value accessor.
     * @return <code>String</code>
     */
    public String getOrigCommEventId() {
        return this.origCommEventId;
    }
    /**
     * Auto generated value accessor.
     * @return <code>String</code>
     */
    public String getParentCommEventId() {
        return this.parentCommEventId;
    }
    /**
     * Auto generated value accessor.
     * @return <code>String</code>
     */
    public String getStatusId() {
        return this.statusId;
    }
    /**
     * Auto generated value accessor.
     * @return <code>String</code>
     */
    public String getContactMechTypeId() {
        return this.contactMechTypeId;
    }
    /**
     * Auto generated value accessor.
     * @return <code>String</code>
     */
    public String getContactMechIdFrom() {
        return this.contactMechIdFrom;
    }
    /**
     * Auto generated value accessor.
     * @return <code>String</code>
     */
    public String getContactMechIdTo() {
        return this.contactMechIdTo;
    }
    /**
     * Auto generated value accessor.
     * @return <code>String</code>
     */
    public String getRoleTypeIdFrom() {
        return this.roleTypeIdFrom;
    }
    /**
     * Auto generated value accessor.
     * @return <code>String</code>
     */
    public String getRoleTypeIdTo() {
        return this.roleTypeIdTo;
    }
    /**
     * Auto generated value accessor.
     * @return <code>String</code>
     */
    public String getPartyIdFrom() {
        return this.partyIdFrom;
    }
    /**
     * Auto generated value accessor.
     * @return <code>String</code>
     */
    public String getPartyIdTo() {
        return this.partyIdTo;
    }
    /**
     * Auto generated value accessor.
     * @return <code>Timestamp</code>
     */
    public Timestamp getEntryDate() {
        return this.entryDate;
    }
    /**
     * Auto generated value accessor.
     * @return <code>Timestamp</code>
     */
    public Timestamp getDatetimeStarted() {
        return this.datetimeStarted;
    }
    /**
     * Auto generated value accessor.
     * @return <code>Timestamp</code>
     */
    public Timestamp getDatetimeEnded() {
        return this.datetimeEnded;
    }
    /**
     * Auto generated value accessor.
     * @return <code>String</code>
     */
    public String getSubject() {
        return this.subject;
    }
    /**
     * Auto generated value accessor.
     * @return <code>String</code>
     */
    public String getContentMimeTypeId() {
        return this.contentMimeTypeId;
    }
    /**
     * Auto generated value accessor.
     * @return <code>String</code>
     */
    public String getContent() {
        return this.content;
    }
    /**
     * Auto generated value accessor.
     * @return <code>String</code>
     */
    public String getNote() {
        return this.note;
    }
    /**
     * Auto generated value accessor.
     * @return <code>String</code>
     */
    public String getReasonEnumId() {
        return this.reasonEnumId;
    }
    /**
     * Auto generated value accessor.
     * @return <code>String</code>
     */
    public String getContactListId() {
        return this.contactListId;
    }
    /**
     * Auto generated value accessor.
     * @return <code>String</code>
     */
    public String getHeaderString() {
        return this.headerString;
    }
    /**
     * Auto generated value accessor.
     * @return <code>String</code>
     */
    public String getFromString() {
        return this.fromString;
    }
    /**
     * Auto generated value accessor.
     * @return <code>String</code>
     */
    public String getToString() {
        return this.toString;
    }
    /**
     * Auto generated value accessor.
     * @return <code>String</code>
     */
    public String getCcString() {
        return this.ccString;
    }
    /**
     * Auto generated value accessor.
     * @return <code>String</code>
     */
    public String getBccString() {
        return this.bccString;
    }
    /**
     * Auto generated value accessor.
     * @return <code>String</code>
     */
    public String getMessageId() {
        return this.messageId;
    }
    /**
     * Auto generated value accessor.
     * @return <code>Timestamp</code>
     */
    public Timestamp getLastUpdatedStamp() {
        return this.lastUpdatedStamp;
    }
    /**
     * Auto generated value accessor.
     * @return <code>Timestamp</code>
     */
    public Timestamp getLastUpdatedTxStamp() {
        return this.lastUpdatedTxStamp;
    }
    /**
     * Auto generated value accessor.
     * @return <code>Timestamp</code>
     */
    public Timestamp getCreatedStamp() {
        return this.createdStamp;
    }
    /**
     * Auto generated value accessor.
     * @return <code>Timestamp</code>
     */
    public Timestamp getCreatedTxStamp() {
        return this.createdTxStamp;
    }

    /**
     * Auto generated method that gets the related <code>CommunicationEventType</code> by the relation named <code>CommunicationEventType</code>.
     * @return the <code>CommunicationEventType</code>
     * @throws RepositoryException if an error occurs
     */
    public CommunicationEventType getCommunicationEventType() throws RepositoryException {
        if (this.communicationEventType == null) {
            this.communicationEventType = getRelatedOne(CommunicationEventType.class, "CommunicationEventType");
        }
        return this.communicationEventType;
    }
    /**
     * Auto generated method that gets the related <code>Party</code> by the relation named <code>ToParty</code>.
     * @return the <code>Party</code>
     * @throws RepositoryException if an error occurs
     */
    public Party getToParty() throws RepositoryException {
        if (this.toParty == null) {
            this.toParty = getRelatedOne(Party.class, "ToParty");
        }
        return this.toParty;
    }
    /**
     * Auto generated method that gets the related <code>RoleType</code> by the relation named <code>ToRoleType</code>.
     * @return the <code>RoleType</code>
     * @throws RepositoryException if an error occurs
     */
    public RoleType getToRoleType() throws RepositoryException {
        if (this.toRoleType == null) {
            this.toRoleType = getRelatedOne(RoleType.class, "ToRoleType");
        }
        return this.toRoleType;
    }
    /**
     * Auto generated method that gets the related <code>PartyRole</code> by the relation named <code>ToPartyRole</code>.
     * @return the <code>PartyRole</code>
     * @throws RepositoryException if an error occurs
     */
    public PartyRole getToPartyRole() throws RepositoryException {
        if (this.toPartyRole == null) {
            this.toPartyRole = getRelatedOne(PartyRole.class, "ToPartyRole");
        }
        return this.toPartyRole;
    }
    /**
     * Auto generated method that gets the related <code>Party</code> by the relation named <code>FromParty</code>.
     * @return the <code>Party</code>
     * @throws RepositoryException if an error occurs
     */
    public Party getFromParty() throws RepositoryException {
        if (this.fromParty == null) {
            this.fromParty = getRelatedOne(Party.class, "FromParty");
        }
        return this.fromParty;
    }
    /**
     * Auto generated method that gets the related <code>RoleType</code> by the relation named <code>FromRoleType</code>.
     * @return the <code>RoleType</code>
     * @throws RepositoryException if an error occurs
     */
    public RoleType getFromRoleType() throws RepositoryException {
        if (this.fromRoleType == null) {
            this.fromRoleType = getRelatedOne(RoleType.class, "FromRoleType");
        }
        return this.fromRoleType;
    }
    /**
     * Auto generated method that gets the related <code>PartyRole</code> by the relation named <code>FromPartyRole</code>.
     * @return the <code>PartyRole</code>
     * @throws RepositoryException if an error occurs
     */
    public PartyRole getFromPartyRole() throws RepositoryException {
        if (this.fromPartyRole == null) {
            this.fromPartyRole = getRelatedOne(PartyRole.class, "FromPartyRole");
        }
        return this.fromPartyRole;
    }
    /**
     * Auto generated method that gets the related <code>StatusItem</code> by the relation named <code>StatusItem</code>.
     * @return the <code>StatusItem</code>
     * @throws RepositoryException if an error occurs
     */
    public StatusItem getStatusItem() throws RepositoryException {
        if (this.statusItem == null) {
            this.statusItem = getRelatedOne(StatusItem.class, "StatusItem");
        }
        return this.statusItem;
    }
    /**
     * Auto generated method that gets the related <code>ContactMechType</code> by the relation named <code>ContactMechType</code>.
     * @return the <code>ContactMechType</code>
     * @throws RepositoryException if an error occurs
     */
    public ContactMechType getContactMechType() throws RepositoryException {
        if (this.contactMechType == null) {
            this.contactMechType = getRelatedOne(ContactMechType.class, "ContactMechType");
        }
        return this.contactMechType;
    }
    /**
     * Auto generated method that gets the related <code>ContactMech</code> by the relation named <code>FromContactMech</code>.
     * @return the <code>ContactMech</code>
     * @throws RepositoryException if an error occurs
     */
    public ContactMech getFromContactMech() throws RepositoryException {
        if (this.fromContactMech == null) {
            this.fromContactMech = getRelatedOne(ContactMech.class, "FromContactMech");
        }
        return this.fromContactMech;
    }
    /**
     * Auto generated method that gets the related <code>ContactMech</code> by the relation named <code>ToContactMech</code>.
     * @return the <code>ContactMech</code>
     * @throws RepositoryException if an error occurs
     */
    public ContactMech getToContactMech() throws RepositoryException {
        if (this.toContactMech == null) {
            this.toContactMech = getRelatedOne(ContactMech.class, "ToContactMech");
        }
        return this.toContactMech;
    }
    /**
     * Auto generated method that gets the related <code>ContactList</code> by the relation named <code>ContactList</code>.
     * @return the <code>ContactList</code>
     * @throws RepositoryException if an error occurs
     */
    public ContactList getContactList() throws RepositoryException {
        if (this.contactList == null) {
            this.contactList = getRelatedOne(ContactList.class, "ContactList");
        }
        return this.contactList;
    }
    /**
     * Auto generated method that gets the related <code>MimeType</code> by the relation named <code>MimeType</code>.
     * @return the <code>MimeType</code>
     * @throws RepositoryException if an error occurs
     */
    public MimeType getMimeType() throws RepositoryException {
        if (this.mimeType == null) {
            this.mimeType = getRelatedOne(MimeType.class, "MimeType");
        }
        return this.mimeType;
    }
    /**
     * Auto generated method that gets the related <code>Enumeration</code> by the relation named <code>Enumeration</code>.
     * @return the <code>Enumeration</code>
     * @throws RepositoryException if an error occurs
     */
    public Enumeration getEnumeration() throws RepositoryException {
        if (this.enumeration == null) {
            this.enumeration = getRelatedOne(Enumeration.class, "Enumeration");
        }
        return this.enumeration;
    }
    /**
     * Auto generated method that gets the related <code>CommEventContentAssoc</code> by the relation named <code>CommEventContentAssoc</code>.
     * @return the list of <code>CommEventContentAssoc</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends CommEventContentAssoc> getCommEventContentAssocs() throws RepositoryException {
        if (this.commEventContentAssocs == null) {
            this.commEventContentAssocs = getRelated(CommEventContentAssoc.class, "CommEventContentAssoc");
        }
        return this.commEventContentAssocs;
    }
    /**
     * Auto generated method that gets the related <code>CommunicationEventOrder</code> by the relation named <code>CommunicationEventOrder</code>.
     * @return the list of <code>CommunicationEventOrder</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends CommunicationEventOrder> getCommunicationEventOrders() throws RepositoryException {
        if (this.communicationEventOrders == null) {
            this.communicationEventOrders = getRelated(CommunicationEventOrder.class, "CommunicationEventOrder");
        }
        return this.communicationEventOrders;
    }
    /**
     * Auto generated method that gets the related <code>CommunicationEventProduct</code> by the relation named <code>CommunicationEventProduct</code>.
     * @return the list of <code>CommunicationEventProduct</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends CommunicationEventProduct> getCommunicationEventProducts() throws RepositoryException {
        if (this.communicationEventProducts == null) {
            this.communicationEventProducts = getRelated(CommunicationEventProduct.class, "CommunicationEventProduct");
        }
        return this.communicationEventProducts;
    }
    /**
     * Auto generated method that gets the related <code>CommunicationEventPurpose</code> by the relation named <code>CommunicationEventPurpose</code>.
     * @return the list of <code>CommunicationEventPurpose</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends CommunicationEventPurpose> getCommunicationEventPurposes() throws RepositoryException {
        if (this.communicationEventPurposes == null) {
            this.communicationEventPurposes = getRelated(CommunicationEventPurpose.class, "CommunicationEventPurpose");
        }
        return this.communicationEventPurposes;
    }
    /**
     * Auto generated method that gets the related <code>CommunicationEventRole</code> by the relation named <code>CommunicationEventRole</code>.
     * @return the list of <code>CommunicationEventRole</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends CommunicationEventRole> getCommunicationEventRoles() throws RepositoryException {
        if (this.communicationEventRoles == null) {
            this.communicationEventRoles = getRelated(CommunicationEventRole.class, "CommunicationEventRole");
        }
        return this.communicationEventRoles;
    }
    /**
     * Auto generated method that gets the related <code>CommunicationEventWorkEff</code> by the relation named <code>CommunicationEventWorkEff</code>.
     * @return the list of <code>CommunicationEventWorkEff</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends CommunicationEventWorkEff> getCommunicationEventWorkEffs() throws RepositoryException {
        if (this.communicationEventWorkEffs == null) {
            this.communicationEventWorkEffs = getRelated(CommunicationEventWorkEff.class, "CommunicationEventWorkEff");
        }
        return this.communicationEventWorkEffs;
    }
    /**
     * Auto generated method that gets the related <code>ContactListCommStatus</code> by the relation named <code>ContactListCommStatus</code>.
     * @return the list of <code>ContactListCommStatus</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends ContactListCommStatus> getContactListCommStatuses() throws RepositoryException {
        if (this.contactListCommStatuses == null) {
            this.contactListCommStatuses = getRelated(ContactListCommStatus.class, "ContactListCommStatus");
        }
        return this.contactListCommStatuses;
    }
    /**
     * Auto generated method that gets the related <code>CustRequestCommEvent</code> by the relation named <code>CustRequestCommEvent</code>.
     * @return the list of <code>CustRequestCommEvent</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends CustRequestCommEvent> getCustRequestCommEvents() throws RepositoryException {
        if (this.custRequestCommEvents == null) {
            this.custRequestCommEvents = getRelated(CustRequestCommEvent.class, "CustRequestCommEvent");
        }
        return this.custRequestCommEvents;
    }
    /**
     * Auto generated method that gets the related <code>PartyNeed</code> by the relation named <code>PartyNeed</code>.
     * @return the list of <code>PartyNeed</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends PartyNeed> getPartyNeeds() throws RepositoryException {
        if (this.partyNeeds == null) {
            this.partyNeeds = getRelated(PartyNeed.class, "PartyNeed");
        }
        return this.partyNeeds;
    }
    /**
     * Auto generated method that gets the related <code>SubscriptionCommEvent</code> by the relation named <code>SubscriptionCommEvent</code>.
     * @return the list of <code>SubscriptionCommEvent</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends SubscriptionCommEvent> getSubscriptionCommEvents() throws RepositoryException {
        if (this.subscriptionCommEvents == null) {
            this.subscriptionCommEvents = getRelated(SubscriptionCommEvent.class, "SubscriptionCommEvent");
        }
        return this.subscriptionCommEvents;
    }

    /**
     * Auto generated value setter.
     * @param communicationEventType the communicationEventType to set
    */
    public void setCommunicationEventType(CommunicationEventType communicationEventType) {
        this.communicationEventType = communicationEventType;
    }
    /**
     * Auto generated value setter.
     * @param toParty the toParty to set
    */
    public void setToParty(Party toParty) {
        this.toParty = toParty;
    }
    /**
     * Auto generated value setter.
     * @param toRoleType the toRoleType to set
    */
    public void setToRoleType(RoleType toRoleType) {
        this.toRoleType = toRoleType;
    }
    /**
     * Auto generated value setter.
     * @param toPartyRole the toPartyRole to set
    */
    public void setToPartyRole(PartyRole toPartyRole) {
        this.toPartyRole = toPartyRole;
    }
    /**
     * Auto generated value setter.
     * @param fromParty the fromParty to set
    */
    public void setFromParty(Party fromParty) {
        this.fromParty = fromParty;
    }
    /**
     * Auto generated value setter.
     * @param fromRoleType the fromRoleType to set
    */
    public void setFromRoleType(RoleType fromRoleType) {
        this.fromRoleType = fromRoleType;
    }
    /**
     * Auto generated value setter.
     * @param fromPartyRole the fromPartyRole to set
    */
    public void setFromPartyRole(PartyRole fromPartyRole) {
        this.fromPartyRole = fromPartyRole;
    }
    /**
     * Auto generated value setter.
     * @param statusItem the statusItem to set
    */
    public void setStatusItem(StatusItem statusItem) {
        this.statusItem = statusItem;
    }
    /**
     * Auto generated value setter.
     * @param contactMechType the contactMechType to set
    */
    public void setContactMechType(ContactMechType contactMechType) {
        this.contactMechType = contactMechType;
    }
    /**
     * Auto generated value setter.
     * @param fromContactMech the fromContactMech to set
    */
    public void setFromContactMech(ContactMech fromContactMech) {
        this.fromContactMech = fromContactMech;
    }
    /**
     * Auto generated value setter.
     * @param toContactMech the toContactMech to set
    */
    public void setToContactMech(ContactMech toContactMech) {
        this.toContactMech = toContactMech;
    }
    /**
     * Auto generated value setter.
     * @param contactList the contactList to set
    */
    public void setContactList(ContactList contactList) {
        this.contactList = contactList;
    }
    /**
     * Auto generated value setter.
     * @param mimeType the mimeType to set
    */
    public void setMimeType(MimeType mimeType) {
        this.mimeType = mimeType;
    }
    /**
     * Auto generated value setter.
     * @param enumeration the enumeration to set
    */
    public void setEnumeration(Enumeration enumeration) {
        this.enumeration = enumeration;
    }
    /**
     * Auto generated value setter.
     * @param commEventContentAssocs the commEventContentAssocs to set
    */
    public void setCommEventContentAssocs(List<CommEventContentAssoc> commEventContentAssocs) {
        this.commEventContentAssocs = commEventContentAssocs;
    }
    /**
     * Auto generated value setter.
     * @param communicationEventOrders the communicationEventOrders to set
    */
    public void setCommunicationEventOrders(List<CommunicationEventOrder> communicationEventOrders) {
        this.communicationEventOrders = communicationEventOrders;
    }
    /**
     * Auto generated value setter.
     * @param communicationEventProducts the communicationEventProducts to set
    */
    public void setCommunicationEventProducts(List<CommunicationEventProduct> communicationEventProducts) {
        this.communicationEventProducts = communicationEventProducts;
    }
    /**
     * Auto generated value setter.
     * @param communicationEventPurposes the communicationEventPurposes to set
    */
    public void setCommunicationEventPurposes(List<CommunicationEventPurpose> communicationEventPurposes) {
        this.communicationEventPurposes = communicationEventPurposes;
    }
    /**
     * Auto generated value setter.
     * @param communicationEventRoles the communicationEventRoles to set
    */
    public void setCommunicationEventRoles(List<CommunicationEventRole> communicationEventRoles) {
        this.communicationEventRoles = communicationEventRoles;
    }
    /**
     * Auto generated value setter.
     * @param communicationEventWorkEffs the communicationEventWorkEffs to set
    */
    public void setCommunicationEventWorkEffs(List<CommunicationEventWorkEff> communicationEventWorkEffs) {
        this.communicationEventWorkEffs = communicationEventWorkEffs;
    }
    /**
     * Auto generated value setter.
     * @param contactListCommStatuses the contactListCommStatuses to set
    */
    public void setContactListCommStatuses(List<ContactListCommStatus> contactListCommStatuses) {
        this.contactListCommStatuses = contactListCommStatuses;
    }
    /**
     * Auto generated value setter.
     * @param custRequestCommEvents the custRequestCommEvents to set
    */
    public void setCustRequestCommEvents(List<CustRequestCommEvent> custRequestCommEvents) {
        this.custRequestCommEvents = custRequestCommEvents;
    }
    /**
     * Auto generated value setter.
     * @param partyNeeds the partyNeeds to set
    */
    public void setPartyNeeds(List<PartyNeed> partyNeeds) {
        this.partyNeeds = partyNeeds;
    }
    /**
     * Auto generated value setter.
     * @param subscriptionCommEvents the subscriptionCommEvents to set
    */
    public void setSubscriptionCommEvents(List<SubscriptionCommEvent> subscriptionCommEvents) {
        this.subscriptionCommEvents = subscriptionCommEvents;
    }

    /**
     * Auto generated method that add item to collection.
     */
    public void addCommEventContentAssoc(CommEventContentAssoc commEventContentAssoc) {
        if (this.commEventContentAssocs == null) {
            this.commEventContentAssocs = new ArrayList<CommEventContentAssoc>();
        }
        this.commEventContentAssocs.add(commEventContentAssoc);
    }
    /**
     * Auto generated method that remove item from collection.
     */
    public void removeCommEventContentAssoc(CommEventContentAssoc commEventContentAssoc) {
        if (this.commEventContentAssocs == null) {
            return;
        }
        this.commEventContentAssocs.remove(commEventContentAssoc);
    }
    /**
     * Auto generated method that clear items from collection.
     */
    public void clearCommEventContentAssoc() {
        if (this.commEventContentAssocs == null) {
            return;
        }
        this.commEventContentAssocs.clear();
    }
    /**
     * Auto generated method that add item to collection.
     */
    public void addCommunicationEventOrder(CommunicationEventOrder communicationEventOrder) {
        if (this.communicationEventOrders == null) {
            this.communicationEventOrders = new ArrayList<CommunicationEventOrder>();
        }
        this.communicationEventOrders.add(communicationEventOrder);
    }
    /**
     * Auto generated method that remove item from collection.
     */
    public void removeCommunicationEventOrder(CommunicationEventOrder communicationEventOrder) {
        if (this.communicationEventOrders == null) {
            return;
        }
        this.communicationEventOrders.remove(communicationEventOrder);
    }
    /**
     * Auto generated method that clear items from collection.
     */
    public void clearCommunicationEventOrder() {
        if (this.communicationEventOrders == null) {
            return;
        }
        this.communicationEventOrders.clear();
    }
    /**
     * Auto generated method that add item to collection.
     */
    public void addCommunicationEventProduct(CommunicationEventProduct communicationEventProduct) {
        if (this.communicationEventProducts == null) {
            this.communicationEventProducts = new ArrayList<CommunicationEventProduct>();
        }
        this.communicationEventProducts.add(communicationEventProduct);
    }
    /**
     * Auto generated method that remove item from collection.
     */
    public void removeCommunicationEventProduct(CommunicationEventProduct communicationEventProduct) {
        if (this.communicationEventProducts == null) {
            return;
        }
        this.communicationEventProducts.remove(communicationEventProduct);
    }
    /**
     * Auto generated method that clear items from collection.
     */
    public void clearCommunicationEventProduct() {
        if (this.communicationEventProducts == null) {
            return;
        }
        this.communicationEventProducts.clear();
    }
    /**
     * Auto generated method that add item to collection.
     */
    public void addCommunicationEventPurpose(CommunicationEventPurpose communicationEventPurpose) {
        if (this.communicationEventPurposes == null) {
            this.communicationEventPurposes = new ArrayList<CommunicationEventPurpose>();
        }
        this.communicationEventPurposes.add(communicationEventPurpose);
    }
    /**
     * Auto generated method that remove item from collection.
     */
    public void removeCommunicationEventPurpose(CommunicationEventPurpose communicationEventPurpose) {
        if (this.communicationEventPurposes == null) {
            return;
        }
        this.communicationEventPurposes.remove(communicationEventPurpose);
    }
    /**
     * Auto generated method that clear items from collection.
     */
    public void clearCommunicationEventPurpose() {
        if (this.communicationEventPurposes == null) {
            return;
        }
        this.communicationEventPurposes.clear();
    }
    /**
     * Auto generated method that add item to collection.
     */
    public void addCommunicationEventRole(CommunicationEventRole communicationEventRole) {
        if (this.communicationEventRoles == null) {
            this.communicationEventRoles = new ArrayList<CommunicationEventRole>();
        }
        this.communicationEventRoles.add(communicationEventRole);
    }
    /**
     * Auto generated method that remove item from collection.
     */
    public void removeCommunicationEventRole(CommunicationEventRole communicationEventRole) {
        if (this.communicationEventRoles == null) {
            return;
        }
        this.communicationEventRoles.remove(communicationEventRole);
    }
    /**
     * Auto generated method that clear items from collection.
     */
    public void clearCommunicationEventRole() {
        if (this.communicationEventRoles == null) {
            return;
        }
        this.communicationEventRoles.clear();
    }
    /**
     * Auto generated method that add item to collection.
     */
    public void addCommunicationEventWorkEff(CommunicationEventWorkEff communicationEventWorkEff) {
        if (this.communicationEventWorkEffs == null) {
            this.communicationEventWorkEffs = new ArrayList<CommunicationEventWorkEff>();
        }
        this.communicationEventWorkEffs.add(communicationEventWorkEff);
    }
    /**
     * Auto generated method that remove item from collection.
     */
    public void removeCommunicationEventWorkEff(CommunicationEventWorkEff communicationEventWorkEff) {
        if (this.communicationEventWorkEffs == null) {
            return;
        }
        this.communicationEventWorkEffs.remove(communicationEventWorkEff);
    }
    /**
     * Auto generated method that clear items from collection.
     */
    public void clearCommunicationEventWorkEff() {
        if (this.communicationEventWorkEffs == null) {
            return;
        }
        this.communicationEventWorkEffs.clear();
    }
    /**
     * Auto generated method that add item to collection.
     */
    public void addContactListCommStatuse(ContactListCommStatus contactListCommStatuse) {
        if (this.contactListCommStatuses == null) {
            this.contactListCommStatuses = new ArrayList<ContactListCommStatus>();
        }
        this.contactListCommStatuses.add(contactListCommStatuse);
    }
    /**
     * Auto generated method that remove item from collection.
     */
    public void removeContactListCommStatuse(ContactListCommStatus contactListCommStatuse) {
        if (this.contactListCommStatuses == null) {
            return;
        }
        this.contactListCommStatuses.remove(contactListCommStatuse);
    }
    /**
     * Auto generated method that clear items from collection.
     */
    public void clearContactListCommStatuse() {
        if (this.contactListCommStatuses == null) {
            return;
        }
        this.contactListCommStatuses.clear();
    }
    /**
     * Auto generated method that add item to collection.
     */
    public void addCustRequestCommEvent(CustRequestCommEvent custRequestCommEvent) {
        if (this.custRequestCommEvents == null) {
            this.custRequestCommEvents = new ArrayList<CustRequestCommEvent>();
        }
        this.custRequestCommEvents.add(custRequestCommEvent);
    }
    /**
     * Auto generated method that remove item from collection.
     */
    public void removeCustRequestCommEvent(CustRequestCommEvent custRequestCommEvent) {
        if (this.custRequestCommEvents == null) {
            return;
        }
        this.custRequestCommEvents.remove(custRequestCommEvent);
    }
    /**
     * Auto generated method that clear items from collection.
     */
    public void clearCustRequestCommEvent() {
        if (this.custRequestCommEvents == null) {
            return;
        }
        this.custRequestCommEvents.clear();
    }
    /**
     * Auto generated method that add item to collection.
     */
    public void addSubscriptionCommEvent(SubscriptionCommEvent subscriptionCommEvent) {
        if (this.subscriptionCommEvents == null) {
            this.subscriptionCommEvents = new ArrayList<SubscriptionCommEvent>();
        }
        this.subscriptionCommEvents.add(subscriptionCommEvent);
    }
    /**
     * Auto generated method that remove item from collection.
     */
    public void removeSubscriptionCommEvent(SubscriptionCommEvent subscriptionCommEvent) {
        if (this.subscriptionCommEvents == null) {
            return;
        }
        this.subscriptionCommEvents.remove(subscriptionCommEvent);
    }
    /**
     * Auto generated method that clear items from collection.
     */
    public void clearSubscriptionCommEvent() {
        if (this.subscriptionCommEvents == null) {
            return;
        }
        this.subscriptionCommEvents.clear();
    }

    /** {@inheritDoc} */
    @Override
    public void fromMap(Map<String, Object> mapValue) {
        preInit();
        setCommunicationEventId((String) mapValue.get("communicationEventId"));
        setCommunicationEventTypeId((String) mapValue.get("communicationEventTypeId"));
        setOrigCommEventId((String) mapValue.get("origCommEventId"));
        setParentCommEventId((String) mapValue.get("parentCommEventId"));
        setStatusId((String) mapValue.get("statusId"));
        setContactMechTypeId((String) mapValue.get("contactMechTypeId"));
        setContactMechIdFrom((String) mapValue.get("contactMechIdFrom"));
        setContactMechIdTo((String) mapValue.get("contactMechIdTo"));
        setRoleTypeIdFrom((String) mapValue.get("roleTypeIdFrom"));
        setRoleTypeIdTo((String) mapValue.get("roleTypeIdTo"));
        setPartyIdFrom((String) mapValue.get("partyIdFrom"));
        setPartyIdTo((String) mapValue.get("partyIdTo"));
        setEntryDate((Timestamp) mapValue.get("entryDate"));
        setDatetimeStarted((Timestamp) mapValue.get("datetimeStarted"));
        setDatetimeEnded((Timestamp) mapValue.get("datetimeEnded"));
        setSubject((String) mapValue.get("subject"));
        setContentMimeTypeId((String) mapValue.get("contentMimeTypeId"));
        setContent((String) mapValue.get("content"));
        setNote((String) mapValue.get("note"));
        setReasonEnumId((String) mapValue.get("reasonEnumId"));
        setContactListId((String) mapValue.get("contactListId"));
        setHeaderString((String) mapValue.get("headerString"));
        setFromString((String) mapValue.get("fromString"));
        setToString((String) mapValue.get("toString"));
        setCcString((String) mapValue.get("ccString"));
        setBccString((String) mapValue.get("bccString"));
        setMessageId((String) mapValue.get("messageId"));
        setLastUpdatedStamp((Timestamp) mapValue.get("lastUpdatedStamp"));
        setLastUpdatedTxStamp((Timestamp) mapValue.get("lastUpdatedTxStamp"));
        setCreatedStamp((Timestamp) mapValue.get("createdStamp"));
        setCreatedTxStamp((Timestamp) mapValue.get("createdTxStamp"));
        postInit();
    }

    /** {@inheritDoc} */
    @Override
    public Map<String, Object> toMap() {
        Map<String, Object> mapValue = new FastMap<String, Object>();
        mapValue.put("communicationEventId", getCommunicationEventId());
        mapValue.put("communicationEventTypeId", getCommunicationEventTypeId());
        mapValue.put("origCommEventId", getOrigCommEventId());
        mapValue.put("parentCommEventId", getParentCommEventId());
        mapValue.put("statusId", getStatusId());
        mapValue.put("contactMechTypeId", getContactMechTypeId());
        mapValue.put("contactMechIdFrom", getContactMechIdFrom());
        mapValue.put("contactMechIdTo", getContactMechIdTo());
        mapValue.put("roleTypeIdFrom", getRoleTypeIdFrom());
        mapValue.put("roleTypeIdTo", getRoleTypeIdTo());
        mapValue.put("partyIdFrom", getPartyIdFrom());
        mapValue.put("partyIdTo", getPartyIdTo());
        mapValue.put("entryDate", getEntryDate());
        mapValue.put("datetimeStarted", getDatetimeStarted());
        mapValue.put("datetimeEnded", getDatetimeEnded());
        mapValue.put("subject", getSubject());
        mapValue.put("contentMimeTypeId", getContentMimeTypeId());
        mapValue.put("content", getContent());
        mapValue.put("note", getNote());
        mapValue.put("reasonEnumId", getReasonEnumId());
        mapValue.put("contactListId", getContactListId());
        mapValue.put("headerString", getHeaderString());
        mapValue.put("fromString", getFromString());
        mapValue.put("toString", getToString());
        mapValue.put("ccString", getCcString());
        mapValue.put("bccString", getBccString());
        mapValue.put("messageId", getMessageId());
        mapValue.put("lastUpdatedStamp", getLastUpdatedStamp());
        mapValue.put("lastUpdatedTxStamp", getLastUpdatedTxStamp());
        mapValue.put("createdStamp", getCreatedStamp());
        mapValue.put("createdTxStamp", getCreatedTxStamp());
        return mapValue;
    }


}
