package org.opentaps.base.entities;

/*
 * Copyright (c) Open Source Strategies, Inc.
 *
 * Opentaps is free software: you can redistribute it and/or modify it
 * under the terms of the GNU Affero General Public License as published
 * by the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Opentaps is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with Opentaps.  If not, see <http://www.gnu.org/licenses/>.
 */

// DO NOT EDIT THIS FILE!  THIS IS AUTO GENERATED AND WILL GET WRITTEN OVER PERIODICALLY WHEN THE DATA MODEL CHANGES
// EXTEND THIS CLASS INSTEAD.

import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;

import javolution.util.FastMap;

import org.opentaps.foundation.entity.Entity;
import org.opentaps.foundation.entity.EntityFieldInterface;
import org.opentaps.foundation.repository.RepositoryException;
import org.opentaps.foundation.repository.RepositoryInterface;
import javax.persistence.*;
import org.hibernate.search.annotations.*;
import java.lang.String;
import java.math.BigDecimal;
import java.sql.Timestamp;

/**
 * Auto generated base entity ProductAndPriceAndGoodIdentificationView.
 */
@javax.persistence.Entity
@NamedNativeQuery(name="selectProductAndPriceAndGoodIdentificationViews", query="SELECT PR.PRODUCT_ID AS \"productId\",PR.PRODUCT_TYPE_ID AS \"productTypeId\",PR.PRODUCT_NAME AS \"productName\",PR.INTERNAL_NAME AS \"internalName\",PR.DESCRIPTION AS \"description\",PR.PRIMARY_PRODUCT_CATEGORY_ID AS \"primaryProductCategoryId\",PR.IS_VIRTUAL AS \"isVirtual\",PR.SALES_DISCONTINUATION_DATE AS \"salesDiscontinuationDate\",PP.PRODUCT_PRICE_TYPE_ID AS \"productPriceTypeId\",PP.PRODUCT_PRICE_PURPOSE_ID AS \"productPricePurposeId\",PP.CURRENCY_UOM_ID AS \"currencyUomId\",PP.FROM_DATE AS \"fromDate\",PP.THRU_DATE AS \"thruDate\",PP.PRICE AS \"price\" FROM PRODUCT PR INNER JOIN PRODUCT_PRICE PP ON PR.PRODUCT_ID = PP.PRODUCT_ID", resultSetMapping="ProductAndPriceAndGoodIdentificationViewMapping")
@SqlResultSetMapping(name="ProductAndPriceAndGoodIdentificationViewMapping", entities={
@EntityResult(entityClass=ProductAndPriceAndGoodIdentificationView.class, fields = {
@FieldResult(name="productId", column="productId")
,@FieldResult(name="productTypeId", column="productTypeId")
,@FieldResult(name="productName", column="productName")
,@FieldResult(name="internalName", column="internalName")
,@FieldResult(name="description", column="description")
,@FieldResult(name="primaryProductCategoryId", column="primaryProductCategoryId")
,@FieldResult(name="isVirtual", column="isVirtual")
,@FieldResult(name="salesDiscontinuationDate", column="salesDiscontinuationDate")
,@FieldResult(name="productPriceTypeId", column="productPriceTypeId")
,@FieldResult(name="productPricePurposeId", column="productPricePurposeId")
,@FieldResult(name="currencyUomId", column="currencyUomId")
,@FieldResult(name="fromDate", column="fromDate")
,@FieldResult(name="thruDate", column="thruDate")
,@FieldResult(name="price", column="price")
})})
@org.hibernate.annotations.Entity(mutable = false)
@org.hibernate.annotations.AccessType("field")
public class ProductAndPriceAndGoodIdentificationView extends Entity {
static {
java.util.Map<String, String> fields = new java.util.HashMap<String, String>();
        fields.put("productId", "PR.PRODUCT_ID");
        fields.put("productTypeId", "PR.PRODUCT_TYPE_ID");
        fields.put("productName", "PR.PRODUCT_NAME");
        fields.put("internalName", "PR.INTERNAL_NAME");
        fields.put("description", "PR.DESCRIPTION");
        fields.put("primaryProductCategoryId", "PR.PRIMARY_PRODUCT_CATEGORY_ID");
        fields.put("isVirtual", "PR.IS_VIRTUAL");
        fields.put("salesDiscontinuationDate", "PR.SALES_DISCONTINUATION_DATE");
        fields.put("productPriceTypeId", "PP.PRODUCT_PRICE_TYPE_ID");
        fields.put("productPricePurposeId", "PP.PRODUCT_PRICE_PURPOSE_ID");
        fields.put("currencyUomId", "PP.CURRENCY_UOM_ID");
        fields.put("fromDate", "PP.FROM_DATE");
        fields.put("thruDate", "PP.THRU_DATE");
        fields.put("price", "PP.PRICE");
fieldMapColumns.put("ProductAndPriceAndGoodIdentificationView", fields);
}
  public static enum Fields implements EntityFieldInterface<ProductAndPriceAndGoodIdentificationView> {
    productId("productId"),
    productTypeId("productTypeId"),
    productName("productName"),
    internalName("internalName"),
    description("description"),
    primaryProductCategoryId("primaryProductCategoryId"),
    isVirtual("isVirtual"),
    salesDiscontinuationDate("salesDiscontinuationDate"),
    productPriceTypeId("productPriceTypeId"),
    productPricePurposeId("productPricePurposeId"),
    currencyUomId("currencyUomId"),
    fromDate("fromDate"),
    thruDate("thruDate"),
    price("price");
    private final String fieldName;
    private Fields(String name) { fieldName = name; }
    /** {@inheritDoc} */
    public String getName() { return fieldName; }
    /** {@inheritDoc} */
    public String asc() { return fieldName + " ASC"; }
    /** {@inheritDoc} */
    public String desc() { return fieldName + " DESC"; }
  }

    @Id
   private String productId;
    
   private String productTypeId;
    
   private String productName;
    
   private String internalName;
    
   private String description;
    
   private String primaryProductCategoryId;
    
   private String isVirtual;
    
   private Timestamp salesDiscontinuationDate;
    
   private String productPriceTypeId;
    
   private String productPricePurposeId;
    
   private String currencyUomId;
    
   private Timestamp fromDate;
    
   private Timestamp thruDate;
    
   private BigDecimal price;

  /**
   * Default constructor.
   */
  public ProductAndPriceAndGoodIdentificationView() {
      super();
      this.baseEntityName = "ProductAndPriceAndGoodIdentificationView";
      this.isView = true;
      
      this.primaryKeyNames = new ArrayList<String>();
      this.primaryKeyNames.add("productId");this.primaryKeyNames.add("productPriceTypeId");this.primaryKeyNames.add("productPricePurposeId");this.primaryKeyNames.add("currencyUomId");this.primaryKeyNames.add("fromDate");
      this.allFieldsNames = new ArrayList<String>();
      this.allFieldsNames.add("productId");this.allFieldsNames.add("productTypeId");this.allFieldsNames.add("productName");this.allFieldsNames.add("internalName");this.allFieldsNames.add("description");this.allFieldsNames.add("primaryProductCategoryId");this.allFieldsNames.add("isVirtual");this.allFieldsNames.add("salesDiscontinuationDate");this.allFieldsNames.add("productPriceTypeId");this.allFieldsNames.add("productPricePurposeId");this.allFieldsNames.add("currencyUomId");this.allFieldsNames.add("fromDate");this.allFieldsNames.add("thruDate");this.allFieldsNames.add("price");
      this.nonPrimaryKeyNames = new ArrayList<String>();
      this.nonPrimaryKeyNames.addAll(allFieldsNames);
      this.nonPrimaryKeyNames.removeAll(primaryKeyNames);
  }

  /**
   * Constructor with a repository.
   * @param repository a <code>RepositoryInterface</code> value
   */
  public ProductAndPriceAndGoodIdentificationView(RepositoryInterface repository) {
      this();
      initRepository(repository);
  }

    /**
     * This is a view-entity, so the setter methods will be private to this class and for use in its fromMap constructor only
     */
    /**
     * Auto generated value setter.
     * @param productId the productId to set
     */
    public void setProductId(String productId) {
        this.productId = productId;
    }
    /**
     * Auto generated value setter.
     * @param productTypeId the productTypeId to set
     */
    public void setProductTypeId(String productTypeId) {
        this.productTypeId = productTypeId;
    }
    /**
     * Auto generated value setter.
     * @param productName the productName to set
     */
    public void setProductName(String productName) {
        this.productName = productName;
    }
    /**
     * Auto generated value setter.
     * @param internalName the internalName to set
     */
    public void setInternalName(String internalName) {
        this.internalName = internalName;
    }
    /**
     * Auto generated value setter.
     * @param description the description to set
     */
    public void setDescription(String description) {
        this.description = description;
    }
    /**
     * Auto generated value setter.
     * @param primaryProductCategoryId the primaryProductCategoryId to set
     */
    public void setPrimaryProductCategoryId(String primaryProductCategoryId) {
        this.primaryProductCategoryId = primaryProductCategoryId;
    }
    /**
     * Auto generated value setter.
     * @param isVirtual the isVirtual to set
     */
    public void setIsVirtual(String isVirtual) {
        this.isVirtual = isVirtual;
    }
    /**
     * Auto generated value setter.
     * @param salesDiscontinuationDate the salesDiscontinuationDate to set
     */
    public void setSalesDiscontinuationDate(Timestamp salesDiscontinuationDate) {
        this.salesDiscontinuationDate = salesDiscontinuationDate;
    }
    /**
     * Auto generated value setter.
     * @param productPriceTypeId the productPriceTypeId to set
     */
    public void setProductPriceTypeId(String productPriceTypeId) {
        this.productPriceTypeId = productPriceTypeId;
    }
    /**
     * Auto generated value setter.
     * @param productPricePurposeId the productPricePurposeId to set
     */
    public void setProductPricePurposeId(String productPricePurposeId) {
        this.productPricePurposeId = productPricePurposeId;
    }
    /**
     * Auto generated value setter.
     * @param currencyUomId the currencyUomId to set
     */
    public void setCurrencyUomId(String currencyUomId) {
        this.currencyUomId = currencyUomId;
    }
    /**
     * Auto generated value setter.
     * @param fromDate the fromDate to set
     */
    public void setFromDate(Timestamp fromDate) {
        this.fromDate = fromDate;
    }
    /**
     * Auto generated value setter.
     * @param thruDate the thruDate to set
     */
    public void setThruDate(Timestamp thruDate) {
        this.thruDate = thruDate;
    }
    /**
     * Auto generated value setter.
     * @param price the price to set
     */
    public void setPrice(BigDecimal price) {
        this.price = price;
    }

    /**
     * Auto generated value accessor.
     * @return <code>String</code>
     */
    public String getProductId() {
        return this.productId;
    }
    /**
     * Auto generated value accessor.
     * @return <code>String</code>
     */
    public String getProductTypeId() {
        return this.productTypeId;
    }
    /**
     * Auto generated value accessor.
     * @return <code>String</code>
     */
    public String getProductName() {
        return this.productName;
    }
    /**
     * Auto generated value accessor.
     * @return <code>String</code>
     */
    public String getInternalName() {
        return this.internalName;
    }
    /**
     * Auto generated value accessor.
     * @return <code>String</code>
     */
    public String getDescription() {
        return this.description;
    }
    /**
     * Auto generated value accessor.
     * @return <code>String</code>
     */
    public String getPrimaryProductCategoryId() {
        return this.primaryProductCategoryId;
    }
    /**
     * Auto generated value accessor.
     * @return <code>String</code>
     */
    public String getIsVirtual() {
        return this.isVirtual;
    }
    /**
     * Auto generated value accessor.
     * @return <code>Timestamp</code>
     */
    public Timestamp getSalesDiscontinuationDate() {
        return this.salesDiscontinuationDate;
    }
    /**
     * Auto generated value accessor.
     * @return <code>String</code>
     */
    public String getProductPriceTypeId() {
        return this.productPriceTypeId;
    }
    /**
     * Auto generated value accessor.
     * @return <code>String</code>
     */
    public String getProductPricePurposeId() {
        return this.productPricePurposeId;
    }
    /**
     * Auto generated value accessor.
     * @return <code>String</code>
     */
    public String getCurrencyUomId() {
        return this.currencyUomId;
    }
    /**
     * Auto generated value accessor.
     * @return <code>Timestamp</code>
     */
    public Timestamp getFromDate() {
        return this.fromDate;
    }
    /**
     * Auto generated value accessor.
     * @return <code>Timestamp</code>
     */
    public Timestamp getThruDate() {
        return this.thruDate;
    }
    /**
     * Auto generated value accessor.
     * @return <code>BigDecimal</code>
     */
    public BigDecimal getPrice() {
        return this.price;
    }




    /** {@inheritDoc} */
    @Override
    public void fromMap(Map<String, Object> mapValue) {
        preInit();
        setProductId((String) mapValue.get("productId"));
        setProductTypeId((String) mapValue.get("productTypeId"));
        setProductName((String) mapValue.get("productName"));
        setInternalName((String) mapValue.get("internalName"));
        setDescription((String) mapValue.get("description"));
        setPrimaryProductCategoryId((String) mapValue.get("primaryProductCategoryId"));
        setIsVirtual((String) mapValue.get("isVirtual"));
        setSalesDiscontinuationDate((Timestamp) mapValue.get("salesDiscontinuationDate"));
        setProductPriceTypeId((String) mapValue.get("productPriceTypeId"));
        setProductPricePurposeId((String) mapValue.get("productPricePurposeId"));
        setCurrencyUomId((String) mapValue.get("currencyUomId"));
        setFromDate((Timestamp) mapValue.get("fromDate"));
        setThruDate((Timestamp) mapValue.get("thruDate"));
        setPrice(convertToBigDecimal(mapValue.get("price")));
        postInit();
    }

    /** {@inheritDoc} */
    @Override
    public Map<String, Object> toMap() {
        Map<String, Object> mapValue = new FastMap<String, Object>();
        mapValue.put("productId", getProductId());
        mapValue.put("productTypeId", getProductTypeId());
        mapValue.put("productName", getProductName());
        mapValue.put("internalName", getInternalName());
        mapValue.put("description", getDescription());
        mapValue.put("primaryProductCategoryId", getPrimaryProductCategoryId());
        mapValue.put("isVirtual", getIsVirtual());
        mapValue.put("salesDiscontinuationDate", getSalesDiscontinuationDate());
        mapValue.put("productPriceTypeId", getProductPriceTypeId());
        mapValue.put("productPricePurposeId", getProductPricePurposeId());
        mapValue.put("currencyUomId", getCurrencyUomId());
        mapValue.put("fromDate", getFromDate());
        mapValue.put("thruDate", getThruDate());
        mapValue.put("price", getPrice());
        return mapValue;
    }


}
