package org.opentaps.base.entities;

/*
 * Copyright (c) Open Source Strategies, Inc.
 *
 * Opentaps is free software: you can redistribute it and/or modify it
 * under the terms of the GNU Affero General Public License as published
 * by the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Opentaps is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with Opentaps.  If not, see <http://www.gnu.org/licenses/>.
 */

// DO NOT EDIT THIS FILE!  THIS IS AUTO GENERATED AND WILL GET WRITTEN OVER PERIODICALLY WHEN THE DATA MODEL CHANGES
// EXTEND THIS CLASS INSTEAD.

import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;

import javolution.util.FastMap;

import org.opentaps.foundation.entity.Entity;
import org.opentaps.foundation.entity.EntityFieldInterface;
import org.opentaps.foundation.repository.RepositoryException;
import org.opentaps.foundation.repository.RepositoryInterface;
import javax.persistence.*;
import org.hibernate.search.annotations.*;
import java.lang.String;
import java.math.BigDecimal;
import java.sql.Timestamp;

/**
 * Auto generated base entity GeoPoint.
 */
@javax.persistence.Entity
@Table(name="GEO_POINT")
public class GeoPoint extends Entity {
static {
java.util.Map<String, String> fields = new java.util.HashMap<String, String>();
        fields.put("geoPointId", "GEO_POINT_ID");
        fields.put("dataSourceId", "DATA_SOURCE_ID");
        fields.put("latitude", "LATITUDE");
        fields.put("longitude", "LONGITUDE");
        fields.put("elevation", "ELEVATION");
        fields.put("elevationUomId", "ELEVATION_UOM_ID");
        fields.put("information", "INFORMATION");
        fields.put("lastUpdatedStamp", "LAST_UPDATED_STAMP");
        fields.put("lastUpdatedTxStamp", "LAST_UPDATED_TX_STAMP");
        fields.put("createdStamp", "CREATED_STAMP");
        fields.put("createdTxStamp", "CREATED_TX_STAMP");
fieldMapColumns.put("GeoPoint", fields);
}
  public static enum Fields implements EntityFieldInterface<GeoPoint> {
    geoPointId("geoPointId"),
    dataSourceId("dataSourceId"),
    latitude("latitude"),
    longitude("longitude"),
    elevation("elevation"),
    elevationUomId("elevationUomId"),
    information("information"),
    lastUpdatedStamp("lastUpdatedStamp"),
    lastUpdatedTxStamp("lastUpdatedTxStamp"),
    createdStamp("createdStamp"),
    createdTxStamp("createdTxStamp");
    private final String fieldName;
    private Fields(String name) { fieldName = name; }
    /** {@inheritDoc} */
    public String getName() { return fieldName; }
    /** {@inheritDoc} */
    public String asc() { return fieldName + " ASC"; }
    /** {@inheritDoc} */
    public String desc() { return fieldName + " DESC"; }
  }

   @org.hibernate.annotations.GenericGenerator(name="GeoPoint_GEN",  strategy="org.opentaps.foundation.entity.hibernate.OpentapsIdentifierGenerator")
   @GeneratedValue(generator="GeoPoint_GEN")
   @Id
   @Column(name="GEO_POINT_ID")
   private String geoPointId;
   @Column(name="DATA_SOURCE_ID")
   private String dataSourceId;
   @Column(name="LATITUDE")
   private BigDecimal latitude;
   @Column(name="LONGITUDE")
   private BigDecimal longitude;
   @Column(name="ELEVATION")
   private BigDecimal elevation;
   @Column(name="ELEVATION_UOM_ID")
   private String elevationUomId;
   @Column(name="INFORMATION")
   private String information;
   @Column(name="LAST_UPDATED_STAMP")
   private Timestamp lastUpdatedStamp;
   @Column(name="LAST_UPDATED_TX_STAMP")
   private Timestamp lastUpdatedTxStamp;
   @Column(name="CREATED_STAMP")
   private Timestamp createdStamp;
   @Column(name="CREATED_TX_STAMP")
   private Timestamp createdTxStamp;
   @ManyToOne(cascade = {CascadeType.PERSIST, CascadeType.MERGE}, fetch=FetchType.LAZY)
   @JoinColumn(name="DATA_SOURCE_ID", insertable=false, updatable=false)
   @org.hibernate.annotations.Generated(
      org.hibernate.annotations.GenerationTime.ALWAYS
   )
   
   private DataSource dataSource = null;
   @ManyToOne(cascade = {CascadeType.PERSIST, CascadeType.MERGE}, fetch=FetchType.LAZY)
   @JoinColumn(name="ELEVATION_UOM_ID", insertable=false, updatable=false)
   @org.hibernate.annotations.Generated(
      org.hibernate.annotations.GenerationTime.ALWAYS
   )
   
   private Uom elevationUom = null;
   @OneToMany(fetch=FetchType.LAZY, mappedBy="geoPoint", cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REMOVE})
   @JoinColumn(name="GEO_POINT_ID")
   
   private List<ContainerGeoPoint> containerGeoPoints = null;
   @OneToMany(fetch=FetchType.LAZY, mappedBy="geoPoint", cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REMOVE})
   @JoinColumn(name="GEO_POINT_ID")
   
   private List<Facility> facilitys = null;
   @OneToMany(fetch=FetchType.LAZY, mappedBy="geoPoint", cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REMOVE})
   @JoinColumn(name="GEO_POINT_ID")
   
   private List<FacilityLocationGeoPoint> facilityLocationGeoPoints = null;
   @OneToMany(fetch=FetchType.LAZY, mappedBy="geoPoint", cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REMOVE})
   @JoinColumn(name="GEO_POINT_ID")
   
   private List<FixedAssetGeoPoint> fixedAssetGeoPoints = null;
   @OneToMany(fetch=FetchType.LAZY, mappedBy="geoPoint", cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REMOVE})
   @JoinColumn(name="GEO_POINT_ID")
   
   private List<PartyGeoPoint> partyGeoPoints = null;
   @OneToMany(fetch=FetchType.LAZY, mappedBy="geoPoint", cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REMOVE})
   @JoinColumn(name="GEO_POINT_ID")
   
   private List<PostalAddress> postalAddresses = null;

  /**
   * Default constructor.
   */
  public GeoPoint() {
      super();
      this.baseEntityName = "GeoPoint";
      this.isView = false;
      this.resourceName = "CommonEntityLabels";
      this.primaryKeyNames = new ArrayList<String>();
      this.primaryKeyNames.add("geoPointId");
      this.allFieldsNames = new ArrayList<String>();
      this.allFieldsNames.add("geoPointId");this.allFieldsNames.add("dataSourceId");this.allFieldsNames.add("latitude");this.allFieldsNames.add("longitude");this.allFieldsNames.add("elevation");this.allFieldsNames.add("elevationUomId");this.allFieldsNames.add("information");this.allFieldsNames.add("lastUpdatedStamp");this.allFieldsNames.add("lastUpdatedTxStamp");this.allFieldsNames.add("createdStamp");this.allFieldsNames.add("createdTxStamp");
      this.nonPrimaryKeyNames = new ArrayList<String>();
      this.nonPrimaryKeyNames.addAll(allFieldsNames);
      this.nonPrimaryKeyNames.removeAll(primaryKeyNames);
  }

  /**
   * Constructor with a repository.
   * @param repository a <code>RepositoryInterface</code> value
   */
  public GeoPoint(RepositoryInterface repository) {
      this();
      initRepository(repository);
  }

    /**
     * Auto generated value setter.
     * @param geoPointId the geoPointId to set
     */
    public void setGeoPointId(String geoPointId) {
        this.geoPointId = geoPointId;
    }
    /**
     * Auto generated value setter.
     * @param dataSourceId the dataSourceId to set
     */
    public void setDataSourceId(String dataSourceId) {
        this.dataSourceId = dataSourceId;
    }
    /**
     * Auto generated value setter.
     * @param latitude the latitude to set
     */
    public void setLatitude(BigDecimal latitude) {
        this.latitude = latitude;
    }
    /**
     * Auto generated value setter.
     * @param longitude the longitude to set
     */
    public void setLongitude(BigDecimal longitude) {
        this.longitude = longitude;
    }
    /**
     * Auto generated value setter.
     * @param elevation the elevation to set
     */
    public void setElevation(BigDecimal elevation) {
        this.elevation = elevation;
    }
    /**
     * Auto generated value setter.
     * @param elevationUomId the elevationUomId to set
     */
    public void setElevationUomId(String elevationUomId) {
        this.elevationUomId = elevationUomId;
    }
    /**
     * Auto generated value setter.
     * @param information the information to set
     */
    public void setInformation(String information) {
        this.information = information;
    }
    /**
     * Auto generated value setter.
     * @param lastUpdatedStamp the lastUpdatedStamp to set
     */
    public void setLastUpdatedStamp(Timestamp lastUpdatedStamp) {
        this.lastUpdatedStamp = lastUpdatedStamp;
    }
    /**
     * Auto generated value setter.
     * @param lastUpdatedTxStamp the lastUpdatedTxStamp to set
     */
    public void setLastUpdatedTxStamp(Timestamp lastUpdatedTxStamp) {
        this.lastUpdatedTxStamp = lastUpdatedTxStamp;
    }
    /**
     * Auto generated value setter.
     * @param createdStamp the createdStamp to set
     */
    public void setCreatedStamp(Timestamp createdStamp) {
        this.createdStamp = createdStamp;
    }
    /**
     * Auto generated value setter.
     * @param createdTxStamp the createdTxStamp to set
     */
    public void setCreatedTxStamp(Timestamp createdTxStamp) {
        this.createdTxStamp = createdTxStamp;
    }

    /**
     * Auto generated value accessor.
     * @return <code>String</code>
     */
    public String getGeoPointId() {
        return this.geoPointId;
    }
    /**
     * Auto generated value accessor.
     * @return <code>String</code>
     */
    public String getDataSourceId() {
        return this.dataSourceId;
    }
    /**
     * Auto generated value accessor.
     * @return <code>BigDecimal</code>
     */
    public BigDecimal getLatitude() {
        return this.latitude;
    }
    /**
     * Auto generated value accessor.
     * @return <code>BigDecimal</code>
     */
    public BigDecimal getLongitude() {
        return this.longitude;
    }
    /**
     * Auto generated value accessor.
     * @return <code>BigDecimal</code>
     */
    public BigDecimal getElevation() {
        return this.elevation;
    }
    /**
     * Auto generated value accessor.
     * @return <code>String</code>
     */
    public String getElevationUomId() {
        return this.elevationUomId;
    }
    /**
     * Auto generated value accessor.
     * @return <code>String</code>
     */
    public String getInformation() {
        return this.information;
    }
    /**
     * Auto generated value accessor.
     * @return <code>Timestamp</code>
     */
    public Timestamp getLastUpdatedStamp() {
        return this.lastUpdatedStamp;
    }
    /**
     * Auto generated value accessor.
     * @return <code>Timestamp</code>
     */
    public Timestamp getLastUpdatedTxStamp() {
        return this.lastUpdatedTxStamp;
    }
    /**
     * Auto generated value accessor.
     * @return <code>Timestamp</code>
     */
    public Timestamp getCreatedStamp() {
        return this.createdStamp;
    }
    /**
     * Auto generated value accessor.
     * @return <code>Timestamp</code>
     */
    public Timestamp getCreatedTxStamp() {
        return this.createdTxStamp;
    }

    /**
     * Auto generated method that gets the related <code>DataSource</code> by the relation named <code>DataSource</code>.
     * @return the <code>DataSource</code>
     * @throws RepositoryException if an error occurs
     */
    public DataSource getDataSource() throws RepositoryException {
        if (this.dataSource == null) {
            this.dataSource = getRelatedOne(DataSource.class, "DataSource");
        }
        return this.dataSource;
    }
    /**
     * Auto generated method that gets the related <code>Uom</code> by the relation named <code>ElevationUom</code>.
     * @return the <code>Uom</code>
     * @throws RepositoryException if an error occurs
     */
    public Uom getElevationUom() throws RepositoryException {
        if (this.elevationUom == null) {
            this.elevationUom = getRelatedOne(Uom.class, "ElevationUom");
        }
        return this.elevationUom;
    }
    /**
     * Auto generated method that gets the related <code>ContainerGeoPoint</code> by the relation named <code>ContainerGeoPoint</code>.
     * @return the list of <code>ContainerGeoPoint</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends ContainerGeoPoint> getContainerGeoPoints() throws RepositoryException {
        if (this.containerGeoPoints == null) {
            this.containerGeoPoints = getRelated(ContainerGeoPoint.class, "ContainerGeoPoint");
        }
        return this.containerGeoPoints;
    }
    /**
     * Auto generated method that gets the related <code>Facility</code> by the relation named <code>Facility</code>.
     * @return the list of <code>Facility</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends Facility> getFacilitys() throws RepositoryException {
        if (this.facilitys == null) {
            this.facilitys = getRelated(Facility.class, "Facility");
        }
        return this.facilitys;
    }
    /**
     * Auto generated method that gets the related <code>FacilityLocationGeoPoint</code> by the relation named <code>FacilityLocationGeoPoint</code>.
     * @return the list of <code>FacilityLocationGeoPoint</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends FacilityLocationGeoPoint> getFacilityLocationGeoPoints() throws RepositoryException {
        if (this.facilityLocationGeoPoints == null) {
            this.facilityLocationGeoPoints = getRelated(FacilityLocationGeoPoint.class, "FacilityLocationGeoPoint");
        }
        return this.facilityLocationGeoPoints;
    }
    /**
     * Auto generated method that gets the related <code>FixedAssetGeoPoint</code> by the relation named <code>FixedAssetGeoPoint</code>.
     * @return the list of <code>FixedAssetGeoPoint</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends FixedAssetGeoPoint> getFixedAssetGeoPoints() throws RepositoryException {
        if (this.fixedAssetGeoPoints == null) {
            this.fixedAssetGeoPoints = getRelated(FixedAssetGeoPoint.class, "FixedAssetGeoPoint");
        }
        return this.fixedAssetGeoPoints;
    }
    /**
     * Auto generated method that gets the related <code>PartyGeoPoint</code> by the relation named <code>PartyGeoPoint</code>.
     * @return the list of <code>PartyGeoPoint</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends PartyGeoPoint> getPartyGeoPoints() throws RepositoryException {
        if (this.partyGeoPoints == null) {
            this.partyGeoPoints = getRelated(PartyGeoPoint.class, "PartyGeoPoint");
        }
        return this.partyGeoPoints;
    }
    /**
     * Auto generated method that gets the related <code>PostalAddress</code> by the relation named <code>PostalAddress</code>.
     * @return the list of <code>PostalAddress</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends PostalAddress> getPostalAddresses() throws RepositoryException {
        if (this.postalAddresses == null) {
            this.postalAddresses = getRelated(PostalAddress.class, "PostalAddress");
        }
        return this.postalAddresses;
    }

    /**
     * Auto generated value setter.
     * @param dataSource the dataSource to set
    */
    public void setDataSource(DataSource dataSource) {
        this.dataSource = dataSource;
    }
    /**
     * Auto generated value setter.
     * @param elevationUom the elevationUom to set
    */
    public void setElevationUom(Uom elevationUom) {
        this.elevationUom = elevationUom;
    }
    /**
     * Auto generated value setter.
     * @param containerGeoPoints the containerGeoPoints to set
    */
    public void setContainerGeoPoints(List<ContainerGeoPoint> containerGeoPoints) {
        this.containerGeoPoints = containerGeoPoints;
    }
    /**
     * Auto generated value setter.
     * @param facilitys the facilitys to set
    */
    public void setFacilitys(List<Facility> facilitys) {
        this.facilitys = facilitys;
    }
    /**
     * Auto generated value setter.
     * @param facilityLocationGeoPoints the facilityLocationGeoPoints to set
    */
    public void setFacilityLocationGeoPoints(List<FacilityLocationGeoPoint> facilityLocationGeoPoints) {
        this.facilityLocationGeoPoints = facilityLocationGeoPoints;
    }
    /**
     * Auto generated value setter.
     * @param fixedAssetGeoPoints the fixedAssetGeoPoints to set
    */
    public void setFixedAssetGeoPoints(List<FixedAssetGeoPoint> fixedAssetGeoPoints) {
        this.fixedAssetGeoPoints = fixedAssetGeoPoints;
    }
    /**
     * Auto generated value setter.
     * @param partyGeoPoints the partyGeoPoints to set
    */
    public void setPartyGeoPoints(List<PartyGeoPoint> partyGeoPoints) {
        this.partyGeoPoints = partyGeoPoints;
    }
    /**
     * Auto generated value setter.
     * @param postalAddresses the postalAddresses to set
    */
    public void setPostalAddresses(List<PostalAddress> postalAddresses) {
        this.postalAddresses = postalAddresses;
    }

    /**
     * Auto generated method that add item to collection.
     */
    public void addContainerGeoPoint(ContainerGeoPoint containerGeoPoint) {
        if (this.containerGeoPoints == null) {
            this.containerGeoPoints = new ArrayList<ContainerGeoPoint>();
        }
        this.containerGeoPoints.add(containerGeoPoint);
    }
    /**
     * Auto generated method that remove item from collection.
     */
    public void removeContainerGeoPoint(ContainerGeoPoint containerGeoPoint) {
        if (this.containerGeoPoints == null) {
            return;
        }
        this.containerGeoPoints.remove(containerGeoPoint);
    }
    /**
     * Auto generated method that clear items from collection.
     */
    public void clearContainerGeoPoint() {
        if (this.containerGeoPoints == null) {
            return;
        }
        this.containerGeoPoints.clear();
    }
    /**
     * Auto generated method that add item to collection.
     */
    public void addFacilityLocationGeoPoint(FacilityLocationGeoPoint facilityLocationGeoPoint) {
        if (this.facilityLocationGeoPoints == null) {
            this.facilityLocationGeoPoints = new ArrayList<FacilityLocationGeoPoint>();
        }
        this.facilityLocationGeoPoints.add(facilityLocationGeoPoint);
    }
    /**
     * Auto generated method that remove item from collection.
     */
    public void removeFacilityLocationGeoPoint(FacilityLocationGeoPoint facilityLocationGeoPoint) {
        if (this.facilityLocationGeoPoints == null) {
            return;
        }
        this.facilityLocationGeoPoints.remove(facilityLocationGeoPoint);
    }
    /**
     * Auto generated method that clear items from collection.
     */
    public void clearFacilityLocationGeoPoint() {
        if (this.facilityLocationGeoPoints == null) {
            return;
        }
        this.facilityLocationGeoPoints.clear();
    }
    /**
     * Auto generated method that add item to collection.
     */
    public void addFixedAssetGeoPoint(FixedAssetGeoPoint fixedAssetGeoPoint) {
        if (this.fixedAssetGeoPoints == null) {
            this.fixedAssetGeoPoints = new ArrayList<FixedAssetGeoPoint>();
        }
        this.fixedAssetGeoPoints.add(fixedAssetGeoPoint);
    }
    /**
     * Auto generated method that remove item from collection.
     */
    public void removeFixedAssetGeoPoint(FixedAssetGeoPoint fixedAssetGeoPoint) {
        if (this.fixedAssetGeoPoints == null) {
            return;
        }
        this.fixedAssetGeoPoints.remove(fixedAssetGeoPoint);
    }
    /**
     * Auto generated method that clear items from collection.
     */
    public void clearFixedAssetGeoPoint() {
        if (this.fixedAssetGeoPoints == null) {
            return;
        }
        this.fixedAssetGeoPoints.clear();
    }
    /**
     * Auto generated method that add item to collection.
     */
    public void addPartyGeoPoint(PartyGeoPoint partyGeoPoint) {
        if (this.partyGeoPoints == null) {
            this.partyGeoPoints = new ArrayList<PartyGeoPoint>();
        }
        this.partyGeoPoints.add(partyGeoPoint);
    }
    /**
     * Auto generated method that remove item from collection.
     */
    public void removePartyGeoPoint(PartyGeoPoint partyGeoPoint) {
        if (this.partyGeoPoints == null) {
            return;
        }
        this.partyGeoPoints.remove(partyGeoPoint);
    }
    /**
     * Auto generated method that clear items from collection.
     */
    public void clearPartyGeoPoint() {
        if (this.partyGeoPoints == null) {
            return;
        }
        this.partyGeoPoints.clear();
    }

    /** {@inheritDoc} */
    @Override
    public void fromMap(Map<String, Object> mapValue) {
        preInit();
        setGeoPointId((String) mapValue.get("geoPointId"));
        setDataSourceId((String) mapValue.get("dataSourceId"));
        setLatitude(convertToBigDecimal(mapValue.get("latitude")));
        setLongitude(convertToBigDecimal(mapValue.get("longitude")));
        setElevation(convertToBigDecimal(mapValue.get("elevation")));
        setElevationUomId((String) mapValue.get("elevationUomId"));
        setInformation((String) mapValue.get("information"));
        setLastUpdatedStamp((Timestamp) mapValue.get("lastUpdatedStamp"));
        setLastUpdatedTxStamp((Timestamp) mapValue.get("lastUpdatedTxStamp"));
        setCreatedStamp((Timestamp) mapValue.get("createdStamp"));
        setCreatedTxStamp((Timestamp) mapValue.get("createdTxStamp"));
        postInit();
    }

    /** {@inheritDoc} */
    @Override
    public Map<String, Object> toMap() {
        Map<String, Object> mapValue = new FastMap<String, Object>();
        mapValue.put("geoPointId", getGeoPointId());
        mapValue.put("dataSourceId", getDataSourceId());
        mapValue.put("latitude", getLatitude());
        mapValue.put("longitude", getLongitude());
        mapValue.put("elevation", getElevation());
        mapValue.put("elevationUomId", getElevationUomId());
        mapValue.put("information", getInformation());
        mapValue.put("lastUpdatedStamp", getLastUpdatedStamp());
        mapValue.put("lastUpdatedTxStamp", getLastUpdatedTxStamp());
        mapValue.put("createdStamp", getCreatedStamp());
        mapValue.put("createdTxStamp", getCreatedTxStamp());
        return mapValue;
    }


}
