package org.opentaps.base.entities;

/*
 * Copyright (c) Open Source Strategies, Inc.
 *
 * Opentaps is free software: you can redistribute it and/or modify it
 * under the terms of the GNU Affero General Public License as published
 * by the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Opentaps is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with Opentaps.  If not, see <http://www.gnu.org/licenses/>.
 */

// DO NOT EDIT THIS FILE!  THIS IS AUTO GENERATED AND WILL GET WRITTEN OVER PERIODICALLY WHEN THE DATA MODEL CHANGES
// EXTEND THIS CLASS INSTEAD.

import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;

import javolution.util.FastMap;

import org.opentaps.foundation.entity.Entity;
import org.opentaps.foundation.entity.EntityFieldInterface;
import org.opentaps.foundation.repository.RepositoryException;
import org.opentaps.foundation.repository.RepositoryInterface;
import javax.persistence.*;
import org.hibernate.search.annotations.*;
import java.lang.String;
import java.sql.Timestamp;

/**
 * Auto generated base entity ContextHelpResource.
 */
@javax.persistence.Entity
@Table(name="CONTEXT_HELP_RESOURCE")
public class ContextHelpResource extends Entity {
static {
java.util.Map<String, String> fields = new java.util.HashMap<String, String>();
        fields.put("contextHelpResourceId", "CONTEXT_HELP_RESOURCE_ID");
        fields.put("screenName", "SCREEN_NAME");
        fields.put("applicationName", "APPLICATION_NAME");
        fields.put("screenState", "SCREEN_STATE");
        fields.put("remotePageName", "REMOTE_PAGE_NAME");
        fields.put("remotePageVersion", "REMOTE_PAGE_VERSION");
        fields.put("overrideUrlPattern", "OVERRIDE_URL_PATTERN");
        fields.put("lastUpdatedStamp", "LAST_UPDATED_STAMP");
        fields.put("lastUpdatedTxStamp", "LAST_UPDATED_TX_STAMP");
        fields.put("createdStamp", "CREATED_STAMP");
        fields.put("createdTxStamp", "CREATED_TX_STAMP");
fieldMapColumns.put("ContextHelpResource", fields);
}
  public static enum Fields implements EntityFieldInterface<ContextHelpResource> {
    contextHelpResourceId("contextHelpResourceId"),
    screenName("screenName"),
    applicationName("applicationName"),
    screenState("screenState"),
    remotePageName("remotePageName"),
    remotePageVersion("remotePageVersion"),
    overrideUrlPattern("overrideUrlPattern"),
    lastUpdatedStamp("lastUpdatedStamp"),
    lastUpdatedTxStamp("lastUpdatedTxStamp"),
    createdStamp("createdStamp"),
    createdTxStamp("createdTxStamp");
    private final String fieldName;
    private Fields(String name) { fieldName = name; }
    /** {@inheritDoc} */
    public String getName() { return fieldName; }
    /** {@inheritDoc} */
    public String asc() { return fieldName + " ASC"; }
    /** {@inheritDoc} */
    public String desc() { return fieldName + " DESC"; }
  }

   @org.hibernate.annotations.GenericGenerator(name="ContextHelpResource_GEN",  strategy="org.opentaps.foundation.entity.hibernate.OpentapsIdentifierGenerator")
   @GeneratedValue(generator="ContextHelpResource_GEN")
   @Id
   @Column(name="CONTEXT_HELP_RESOURCE_ID")
   private String contextHelpResourceId;
   @Column(name="SCREEN_NAME")
   private String screenName;
   @Column(name="APPLICATION_NAME")
   private String applicationName;
   @Column(name="SCREEN_STATE")
   private String screenState;
   @Column(name="REMOTE_PAGE_NAME")
   private String remotePageName;
   @Column(name="REMOTE_PAGE_VERSION")
   private String remotePageVersion;
   @Column(name="OVERRIDE_URL_PATTERN")
   private String overrideUrlPattern;
   @Column(name="LAST_UPDATED_STAMP")
   private Timestamp lastUpdatedStamp;
   @Column(name="LAST_UPDATED_TX_STAMP")
   private Timestamp lastUpdatedTxStamp;
   @Column(name="CREATED_STAMP")
   private Timestamp createdStamp;
   @Column(name="CREATED_TX_STAMP")
   private Timestamp createdTxStamp;

  /**
   * Default constructor.
   */
  public ContextHelpResource() {
      super();
      this.baseEntityName = "ContextHelpResource";
      this.isView = false;
      
      this.primaryKeyNames = new ArrayList<String>();
      this.primaryKeyNames.add("contextHelpResourceId");
      this.allFieldsNames = new ArrayList<String>();
      this.allFieldsNames.add("contextHelpResourceId");this.allFieldsNames.add("screenName");this.allFieldsNames.add("applicationName");this.allFieldsNames.add("screenState");this.allFieldsNames.add("remotePageName");this.allFieldsNames.add("remotePageVersion");this.allFieldsNames.add("overrideUrlPattern");this.allFieldsNames.add("lastUpdatedStamp");this.allFieldsNames.add("lastUpdatedTxStamp");this.allFieldsNames.add("createdStamp");this.allFieldsNames.add("createdTxStamp");
      this.nonPrimaryKeyNames = new ArrayList<String>();
      this.nonPrimaryKeyNames.addAll(allFieldsNames);
      this.nonPrimaryKeyNames.removeAll(primaryKeyNames);
  }

  /**
   * Constructor with a repository.
   * @param repository a <code>RepositoryInterface</code> value
   */
  public ContextHelpResource(RepositoryInterface repository) {
      this();
      initRepository(repository);
  }

    /**
     * Auto generated value setter.
     * @param contextHelpResourceId the contextHelpResourceId to set
     */
    public void setContextHelpResourceId(String contextHelpResourceId) {
        this.contextHelpResourceId = contextHelpResourceId;
    }
    /**
     * Auto generated value setter.
     * @param screenName the screenName to set
     */
    public void setScreenName(String screenName) {
        this.screenName = screenName;
    }
    /**
     * Auto generated value setter.
     * @param applicationName the applicationName to set
     */
    public void setApplicationName(String applicationName) {
        this.applicationName = applicationName;
    }
    /**
     * Auto generated value setter.
     * @param screenState the screenState to set
     */
    public void setScreenState(String screenState) {
        this.screenState = screenState;
    }
    /**
     * Auto generated value setter.
     * @param remotePageName the remotePageName to set
     */
    public void setRemotePageName(String remotePageName) {
        this.remotePageName = remotePageName;
    }
    /**
     * Auto generated value setter.
     * @param remotePageVersion the remotePageVersion to set
     */
    public void setRemotePageVersion(String remotePageVersion) {
        this.remotePageVersion = remotePageVersion;
    }
    /**
     * Auto generated value setter.
     * @param overrideUrlPattern the overrideUrlPattern to set
     */
    public void setOverrideUrlPattern(String overrideUrlPattern) {
        this.overrideUrlPattern = overrideUrlPattern;
    }
    /**
     * Auto generated value setter.
     * @param lastUpdatedStamp the lastUpdatedStamp to set
     */
    public void setLastUpdatedStamp(Timestamp lastUpdatedStamp) {
        this.lastUpdatedStamp = lastUpdatedStamp;
    }
    /**
     * Auto generated value setter.
     * @param lastUpdatedTxStamp the lastUpdatedTxStamp to set
     */
    public void setLastUpdatedTxStamp(Timestamp lastUpdatedTxStamp) {
        this.lastUpdatedTxStamp = lastUpdatedTxStamp;
    }
    /**
     * Auto generated value setter.
     * @param createdStamp the createdStamp to set
     */
    public void setCreatedStamp(Timestamp createdStamp) {
        this.createdStamp = createdStamp;
    }
    /**
     * Auto generated value setter.
     * @param createdTxStamp the createdTxStamp to set
     */
    public void setCreatedTxStamp(Timestamp createdTxStamp) {
        this.createdTxStamp = createdTxStamp;
    }

    /**
     * Auto generated value accessor.
     * @return <code>String</code>
     */
    public String getContextHelpResourceId() {
        return this.contextHelpResourceId;
    }
    /**
     * Auto generated value accessor.
     * @return <code>String</code>
     */
    public String getScreenName() {
        return this.screenName;
    }
    /**
     * Auto generated value accessor.
     * @return <code>String</code>
     */
    public String getApplicationName() {
        return this.applicationName;
    }
    /**
     * Auto generated value accessor.
     * @return <code>String</code>
     */
    public String getScreenState() {
        return this.screenState;
    }
    /**
     * Auto generated value accessor.
     * @return <code>String</code>
     */
    public String getRemotePageName() {
        return this.remotePageName;
    }
    /**
     * Auto generated value accessor.
     * @return <code>String</code>
     */
    public String getRemotePageVersion() {
        return this.remotePageVersion;
    }
    /**
     * Auto generated value accessor.
     * @return <code>String</code>
     */
    public String getOverrideUrlPattern() {
        return this.overrideUrlPattern;
    }
    /**
     * Auto generated value accessor.
     * @return <code>Timestamp</code>
     */
    public Timestamp getLastUpdatedStamp() {
        return this.lastUpdatedStamp;
    }
    /**
     * Auto generated value accessor.
     * @return <code>Timestamp</code>
     */
    public Timestamp getLastUpdatedTxStamp() {
        return this.lastUpdatedTxStamp;
    }
    /**
     * Auto generated value accessor.
     * @return <code>Timestamp</code>
     */
    public Timestamp getCreatedStamp() {
        return this.createdStamp;
    }
    /**
     * Auto generated value accessor.
     * @return <code>Timestamp</code>
     */
    public Timestamp getCreatedTxStamp() {
        return this.createdTxStamp;
    }




    /** {@inheritDoc} */
    @Override
    public void fromMap(Map<String, Object> mapValue) {
        preInit();
        setContextHelpResourceId((String) mapValue.get("contextHelpResourceId"));
        setScreenName((String) mapValue.get("screenName"));
        setApplicationName((String) mapValue.get("applicationName"));
        setScreenState((String) mapValue.get("screenState"));
        setRemotePageName((String) mapValue.get("remotePageName"));
        setRemotePageVersion((String) mapValue.get("remotePageVersion"));
        setOverrideUrlPattern((String) mapValue.get("overrideUrlPattern"));
        setLastUpdatedStamp((Timestamp) mapValue.get("lastUpdatedStamp"));
        setLastUpdatedTxStamp((Timestamp) mapValue.get("lastUpdatedTxStamp"));
        setCreatedStamp((Timestamp) mapValue.get("createdStamp"));
        setCreatedTxStamp((Timestamp) mapValue.get("createdTxStamp"));
        postInit();
    }

    /** {@inheritDoc} */
    @Override
    public Map<String, Object> toMap() {
        Map<String, Object> mapValue = new FastMap<String, Object>();
        mapValue.put("contextHelpResourceId", getContextHelpResourceId());
        mapValue.put("screenName", getScreenName());
        mapValue.put("applicationName", getApplicationName());
        mapValue.put("screenState", getScreenState());
        mapValue.put("remotePageName", getRemotePageName());
        mapValue.put("remotePageVersion", getRemotePageVersion());
        mapValue.put("overrideUrlPattern", getOverrideUrlPattern());
        mapValue.put("lastUpdatedStamp", getLastUpdatedStamp());
        mapValue.put("lastUpdatedTxStamp", getLastUpdatedTxStamp());
        mapValue.put("createdStamp", getCreatedStamp());
        mapValue.put("createdTxStamp", getCreatedTxStamp());
        return mapValue;
    }


}
