package org.opentaps.base.entities;

/*
 * Copyright (c) Open Source Strategies, Inc.
 *
 * Opentaps is free software: you can redistribute it and/or modify it
 * under the terms of the GNU Affero General Public License as published
 * by the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Opentaps is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with Opentaps.  If not, see <http://www.gnu.org/licenses/>.
 */

// DO NOT EDIT THIS FILE!  THIS IS AUTO GENERATED AND WILL GET WRITTEN OVER PERIODICALLY WHEN THE DATA MODEL CHANGES
// EXTEND THIS CLASS INSTEAD.

import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;

import javolution.util.FastMap;

import org.opentaps.foundation.entity.Entity;
import org.opentaps.foundation.entity.EntityFieldInterface;
import org.opentaps.foundation.repository.RepositoryException;
import org.opentaps.foundation.repository.RepositoryInterface;
import javax.persistence.*;
import org.hibernate.search.annotations.*;
import java.lang.Long;
import java.lang.String;
import java.sql.Timestamp;

/**
 * Auto generated base entity Facility.
 */
@javax.persistence.Entity
@Table(name="FACILITY")
public class Facility extends Entity {
static {
java.util.Map<String, String> fields = new java.util.HashMap<String, String>();
        fields.put("facilityId", "FACILITY_ID");
        fields.put("facilityTypeId", "FACILITY_TYPE_ID");
        fields.put("parentFacilityId", "PARENT_FACILITY_ID");
        fields.put("ownerPartyId", "OWNER_PARTY_ID");
        fields.put("defaultInventoryItemTypeId", "DEFAULT_INVENTORY_ITEM_TYPE_ID");
        fields.put("facilityName", "FACILITY_NAME");
        fields.put("primaryFacilityGroupId", "PRIMARY_FACILITY_GROUP_ID");
        fields.put("squareFootage", "SQUARE_FOOTAGE");
        fields.put("productStoreId", "PRODUCT_STORE_ID");
        fields.put("defaultDaysToShip", "DEFAULT_DAYS_TO_SHIP");
        fields.put("openedDate", "OPENED_DATE");
        fields.put("closedDate", "CLOSED_DATE");
        fields.put("description", "DESCRIPTION");
        fields.put("defaultWeightUomId", "DEFAULT_WEIGHT_UOM_ID");
        fields.put("geoPointId", "GEO_POINT_ID");
        fields.put("lastUpdatedStamp", "LAST_UPDATED_STAMP");
        fields.put("lastUpdatedTxStamp", "LAST_UPDATED_TX_STAMP");
        fields.put("createdStamp", "CREATED_STAMP");
        fields.put("createdTxStamp", "CREATED_TX_STAMP");
        fields.put("inventoryReserveOrderEnumId", "RESERVE_ORDER_ENUM_ID");
fieldMapColumns.put("Facility", fields);
}
  public static enum Fields implements EntityFieldInterface<Facility> {
    facilityId("facilityId"),
    facilityTypeId("facilityTypeId"),
    parentFacilityId("parentFacilityId"),
    ownerPartyId("ownerPartyId"),
    defaultInventoryItemTypeId("defaultInventoryItemTypeId"),
    facilityName("facilityName"),
    primaryFacilityGroupId("primaryFacilityGroupId"),
    squareFootage("squareFootage"),
    productStoreId("productStoreId"),
    defaultDaysToShip("defaultDaysToShip"),
    openedDate("openedDate"),
    closedDate("closedDate"),
    description("description"),
    defaultWeightUomId("defaultWeightUomId"),
    geoPointId("geoPointId"),
    lastUpdatedStamp("lastUpdatedStamp"),
    lastUpdatedTxStamp("lastUpdatedTxStamp"),
    createdStamp("createdStamp"),
    createdTxStamp("createdTxStamp"),
    inventoryReserveOrderEnumId("inventoryReserveOrderEnumId");
    private final String fieldName;
    private Fields(String name) { fieldName = name; }
    /** {@inheritDoc} */
    public String getName() { return fieldName; }
    /** {@inheritDoc} */
    public String asc() { return fieldName + " ASC"; }
    /** {@inheritDoc} */
    public String desc() { return fieldName + " DESC"; }
  }

   @org.hibernate.annotations.GenericGenerator(name="Facility_GEN",  strategy="org.opentaps.foundation.entity.hibernate.OpentapsIdentifierGenerator")
   @GeneratedValue(generator="Facility_GEN")
   @Id
   @Column(name="FACILITY_ID")
   private String facilityId;
   @Column(name="FACILITY_TYPE_ID")
   private String facilityTypeId;
   @Column(name="PARENT_FACILITY_ID")
   private String parentFacilityId;
   @Column(name="OWNER_PARTY_ID")
   private String ownerPartyId;
   @Column(name="DEFAULT_INVENTORY_ITEM_TYPE_ID")
   private String defaultInventoryItemTypeId;
   @Column(name="FACILITY_NAME")
   private String facilityName;
   @Column(name="PRIMARY_FACILITY_GROUP_ID")
   private String primaryFacilityGroupId;
   @Column(name="SQUARE_FOOTAGE")
   private Long squareFootage;
   @Column(name="PRODUCT_STORE_ID")
   private String productStoreId;
   @Column(name="DEFAULT_DAYS_TO_SHIP")
   private Long defaultDaysToShip;
   @Column(name="OPENED_DATE")
   private Timestamp openedDate;
   @Column(name="CLOSED_DATE")
   private Timestamp closedDate;
   @Column(name="DESCRIPTION")
   private String description;
   @Column(name="DEFAULT_WEIGHT_UOM_ID")
   private String defaultWeightUomId;
   @Column(name="GEO_POINT_ID")
   private String geoPointId;
   @Column(name="LAST_UPDATED_STAMP")
   private Timestamp lastUpdatedStamp;
   @Column(name="LAST_UPDATED_TX_STAMP")
   private Timestamp lastUpdatedTxStamp;
   @Column(name="CREATED_STAMP")
   private Timestamp createdStamp;
   @Column(name="CREATED_TX_STAMP")
   private Timestamp createdTxStamp;
   @Column(name="RESERVE_ORDER_ENUM_ID")
   private String inventoryReserveOrderEnumId;
   @ManyToOne(cascade = {CascadeType.PERSIST, CascadeType.MERGE}, fetch=FetchType.LAZY)
   @JoinColumn(name="FACILITY_TYPE_ID", insertable=false, updatable=false)
   @org.hibernate.annotations.Generated(
      org.hibernate.annotations.GenerationTime.ALWAYS
   )
   
   private FacilityType facilityType = null;
   @ManyToOne(cascade = {CascadeType.PERSIST, CascadeType.MERGE}, fetch=FetchType.LAZY)
   @JoinColumn(name="PARENT_FACILITY_ID", insertable=false, updatable=false)
   @org.hibernate.annotations.Generated(
      org.hibernate.annotations.GenerationTime.ALWAYS
   )
   
   private Facility parentFacility = null;
   @ManyToOne(cascade = {CascadeType.PERSIST, CascadeType.MERGE}, fetch=FetchType.LAZY)
   @JoinColumn(name="PRIMARY_FACILITY_GROUP_ID", insertable=false, updatable=false)
   @org.hibernate.annotations.Generated(
      org.hibernate.annotations.GenerationTime.ALWAYS
   )
   
   private FacilityGroup facilityGroup = null;
   @ManyToOne(cascade = {CascadeType.PERSIST, CascadeType.MERGE}, fetch=FetchType.LAZY)
   @JoinColumn(name="OWNER_PARTY_ID", insertable=false, updatable=false)
   @org.hibernate.annotations.Generated(
      org.hibernate.annotations.GenerationTime.ALWAYS
   )
   
   private Party ownerParty = null;
   @ManyToOne(cascade = {CascadeType.PERSIST, CascadeType.MERGE}, fetch=FetchType.LAZY)
   @JoinColumn(name="DEFAULT_INVENTORY_ITEM_TYPE_ID", insertable=false, updatable=false)
   @org.hibernate.annotations.Generated(
      org.hibernate.annotations.GenerationTime.ALWAYS
   )
   
   private InventoryItemType defaultInventoryItemType = null;
   @ManyToOne(cascade = {CascadeType.PERSIST, CascadeType.MERGE}, fetch=FetchType.LAZY)
   @JoinColumn(name="DEFAULT_WEIGHT_UOM_ID", insertable=false, updatable=false)
   @org.hibernate.annotations.Generated(
      org.hibernate.annotations.GenerationTime.ALWAYS
   )
   
   private Uom uom = null;
   @ManyToOne(cascade = {CascadeType.PERSIST, CascadeType.MERGE}, fetch=FetchType.LAZY)
   @JoinColumn(name="PRODUCT_STORE_ID", insertable=false, updatable=false)
   @org.hibernate.annotations.Generated(
      org.hibernate.annotations.GenerationTime.ALWAYS
   )
   
   private ProductStore productStore = null;
   private transient List<FacilityTypeAttr> facilityTypeAttrs = null;
   @ManyToOne(cascade = {CascadeType.PERSIST, CascadeType.MERGE}, fetch=FetchType.LAZY)
   @JoinColumn(name="GEO_POINT_ID", insertable=false, updatable=false)
   @org.hibernate.annotations.Generated(
      org.hibernate.annotations.GenerationTime.ALWAYS
   )
   
   private GeoPoint geoPoint = null;
   @ManyToOne(cascade = {CascadeType.PERSIST, CascadeType.MERGE}, fetch=FetchType.LAZY)
   @JoinColumn(name="RESERVE_ORDER_ENUM_ID", insertable=false, updatable=false)
   @org.hibernate.annotations.Generated(
      org.hibernate.annotations.GenerationTime.ALWAYS
   )
   
   private Enumeration enumeration = null;
   @OneToMany(fetch=FetchType.LAZY, mappedBy="facility", cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REMOVE})
   @JoinColumn(name="FACILITY_ID")
   
   private List<Container> containers = null;
   @OneToMany(fetch=FetchType.LAZY, mappedBy="facility", cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REMOVE})
   @JoinColumn(name="FACILITY_ID")
   
   private List<DataImportInventory> dataImportInventorys = null;
   @OneToMany(fetch=FetchType.LAZY, mappedBy="originFacility", cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REMOVE})
   @JoinColumn(name="ORIGIN_FACILITY_ID")
   
   private List<Delivery> originDeliverys = null;
   @OneToMany(fetch=FetchType.LAZY, mappedBy="destFacility", cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REMOVE})
   @JoinColumn(name="DEST_FACILITY_ID")
   
   private List<Delivery> destDeliverys = null;
   @OneToMany(fetch=FetchType.LAZY, mappedBy="parentFacility", cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REMOVE})
   @JoinColumn(name="PARENT_FACILITY_ID")
   
   private List<Facility> childFacilitys = null;
   @OneToMany(fetch=FetchType.LAZY, mappedBy="fromFacility", cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REMOVE})
   @JoinColumn(name="FACILITY_ID")
   
   private List<FacilityAssoc> fromFacilityAssocs = null;
   @OneToMany(fetch=FetchType.LAZY, mappedBy="toFacility", cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REMOVE})
   @JoinColumn(name="FACILITY_ID_TO")
   
   private List<FacilityAssoc> toFacilityAssocs = null;
   @OneToMany(fetch=FetchType.LAZY, mappedBy="facility", cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REMOVE})
   @JoinColumn(name="FACILITY_ID")
   
   private List<FacilityAttribute> facilityAttributes = null;
   @OneToMany(fetch=FetchType.LAZY, mappedBy="facility", cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REMOVE})
   @JoinColumn(name="FACILITY_ID")
   
   private List<FacilityCarrierShipment> facilityCarrierShipments = null;
   @OneToMany(fetch=FetchType.LAZY, mappedBy="facility", cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REMOVE})
   @JoinColumn(name="FACILITY_ID")
   
   private List<FacilityContactMech> facilityContactMeches = null;
   @OneToMany(fetch=FetchType.LAZY, mappedBy="facility", cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REMOVE})
   @JoinColumn(name="FACILITY_ID")
   
   private List<FacilityContactMechPurpose> facilityContactMechPurposes = null;
   @OneToMany(fetch=FetchType.LAZY, mappedBy="facility", cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REMOVE})
   @JoinColumn(name="FACILITY_ID")
   
   private List<FacilityGroupMember> facilityGroupMembers = null;
   @OneToMany(fetch=FetchType.LAZY, mappedBy="facility", cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REMOVE})
   @JoinColumn(name="FACILITY_ID")
   
   private List<FacilityLocation> facilityLocations = null;
   @OneToMany(fetch=FetchType.LAZY, mappedBy="facility", cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REMOVE})
   @JoinColumn(name="FACILITY_ID")
   
   private List<FacilityParty> facilityPartys = null;
   @OneToMany(fetch=FetchType.LAZY, mappedBy="facility", cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REMOVE})
   @JoinColumn(name="FACILITY_ID")
   
   private List<FacilityPartyPermission> facilityPartyPermissions = null;
   @OneToMany(fetch=FetchType.LAZY, mappedBy="facility", cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REMOVE})
   @JoinColumn(name="FACILITY_ID")
   
   private List<FacilityRole> facilityRoles = null;
   private transient List<FacilityTransferPlan> fromFacilityTransferPlans = null;
   private transient List<FacilityTransferPlan> toFacilityTransferPlans = null;
   @OneToMany(fetch=FetchType.LAZY, mappedBy="locatedAtFacility", cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REMOVE})
   @JoinColumn(name="LOCATED_AT_FACILITY_ID")
   
   private List<FixedAsset> locatedAtFixedAssets = null;
   private transient List<InventoryEventPlanned> inventoryEventPlanneds = null;
   @OneToMany(fetch=FetchType.LAZY, mappedBy="facility", cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REMOVE})
   @JoinColumn(name="FACILITY_ID")
   
   private List<InventoryItem> inventoryItems = null;
   @OneToMany(fetch=FetchType.LAZY, mappedBy="facility", cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REMOVE})
   @JoinColumn(name="FACILITY_ID")
   
   private List<InventoryTransfer> inventoryTransfers = null;
   @OneToMany(fetch=FetchType.LAZY, mappedBy="toFacility", cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REMOVE})
   @JoinColumn(name="FACILITY_ID_TO")
   
   private List<InventoryTransfer> toInventoryTransfers = null;
   private transient List<MrpEvent> mrpEvents = null;
   @OneToMany(fetch=FetchType.LAZY, mappedBy="facility", cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REMOVE})
   @JoinColumn(name="FACILITY_ID")
   
   private List<MrpInventoryEvent> mrpInventoryEvents = null;
   @OneToMany(fetch=FetchType.LAZY, mappedBy="originFacility", cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REMOVE})
   @JoinColumn(name="ORIGIN_FACILITY_ID")
   
   private List<OrderHeader> originOrderHeaders = null;
   private transient List<OrderItemShipGroup> orderItemShipGroups = null;
   @OneToMany(fetch=FetchType.LAZY, mappedBy="facility", cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REMOVE})
   @JoinColumn(name="FACILITY_ID")
   
   private List<OrderSummaryEntry> orderSummaryEntrys = null;
   @OneToMany(fetch=FetchType.LAZY, mappedBy="facility", cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REMOVE})
   @JoinColumn(name="FACILITY_ID")
   
   private List<Picklist> picklists = null;
   @OneToMany(fetch=FetchType.LAZY, mappedBy="facility", cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REMOVE})
   @JoinColumn(name="FACILITY_ID")
   
   private List<ProdCatalogInvFacility> prodCatalogInvFacilitys = null;
   @OneToMany(fetch=FetchType.LAZY, mappedBy="facility", cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REMOVE})
   @JoinColumn(name="FACILITY_ID")
   
   private List<Product> products = null;
   @OneToMany(fetch=FetchType.LAZY, mappedBy="facility", cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REMOVE})
   @JoinColumn(name="FACILITY_ID")
   
   private List<ProductFacility> productFacilitys = null;
   @OneToMany(fetch=FetchType.LAZY, mappedBy="facility", cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REMOVE})
   @JoinColumn(name="FACILITY_ID")
   
   private List<ProductFacility> resplenishFromFacilityProductFacilitys = null;
   @OneToMany(fetch=FetchType.LAZY, mappedBy="facility", cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REMOVE})
   @JoinColumn(name="FACILITY_ID")
   
   private List<ProductFacilityLocation> productFacilityLocations = null;
   @OneToMany(fetch=FetchType.LAZY, mappedBy="facility", cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REMOVE})
   @JoinColumn(name="FACILITY_ID")
   
   private List<ProductStoreFacility> productStoreFacilitys = null;
   private transient List<ProductStoreFacilityByAddress> productStoreFacilityByAddresses = null;
   @OneToMany(fetch=FetchType.LAZY, mappedBy="facility", cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REMOVE})
   @JoinColumn(name="FACILITY_ID")
   
   private List<ReorderGuideline> reorderGuidelines = null;
   @OneToMany(fetch=FetchType.LAZY, mappedBy="facility", cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REMOVE})
   @JoinColumn(name="FACILITY_ID")
   
   private List<Requirement> requirements = null;
   @OneToMany(fetch=FetchType.LAZY, mappedBy="toFacility", cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REMOVE})
   @JoinColumn(name="FACILITY_ID_TO")
   
   private List<Requirement> toRequirements = null;
   private transient List<ReturnHeader> returnHeaders = null;
   @OneToMany(fetch=FetchType.LAZY, mappedBy="facility", cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REMOVE})
   @JoinColumn(name="FACILITY_ID")
   
   private List<SalesForecastItem> salesForecastItems = null;
   @OneToMany(fetch=FetchType.LAZY, mappedBy="originFacility", cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REMOVE})
   @JoinColumn(name="ORIGIN_FACILITY_ID")
   
   private List<Shipment> originShipments = null;
   @OneToMany(fetch=FetchType.LAZY, mappedBy="destinationFacility", cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REMOVE})
   @JoinColumn(name="DESTINATION_FACILITY_ID")
   
   private List<Shipment> destinationShipments = null;
   private transient List<ShipmentRouteSegment> originShipmentRouteSegments = null;
   private transient List<ShipmentRouteSegment> destShipmentRouteSegments = null;
   @OneToMany(fetch=FetchType.LAZY, mappedBy="facility", cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REMOVE})
   @JoinColumn(name="FACILITY_ID")
   
   private List<WorkEffort> workEfforts = null;
   private transient List<WorkEffortPartyAssignment> workEffortPartyAssignments = null;

  /**
   * Default constructor.
   */
  public Facility() {
      super();
      this.baseEntityName = "Facility";
      this.isView = false;
      
      this.primaryKeyNames = new ArrayList<String>();
      this.primaryKeyNames.add("facilityId");
      this.allFieldsNames = new ArrayList<String>();
      this.allFieldsNames.add("facilityId");this.allFieldsNames.add("facilityTypeId");this.allFieldsNames.add("parentFacilityId");this.allFieldsNames.add("ownerPartyId");this.allFieldsNames.add("defaultInventoryItemTypeId");this.allFieldsNames.add("facilityName");this.allFieldsNames.add("primaryFacilityGroupId");this.allFieldsNames.add("squareFootage");this.allFieldsNames.add("productStoreId");this.allFieldsNames.add("defaultDaysToShip");this.allFieldsNames.add("openedDate");this.allFieldsNames.add("closedDate");this.allFieldsNames.add("description");this.allFieldsNames.add("defaultWeightUomId");this.allFieldsNames.add("geoPointId");this.allFieldsNames.add("lastUpdatedStamp");this.allFieldsNames.add("lastUpdatedTxStamp");this.allFieldsNames.add("createdStamp");this.allFieldsNames.add("createdTxStamp");this.allFieldsNames.add("inventoryReserveOrderEnumId");
      this.nonPrimaryKeyNames = new ArrayList<String>();
      this.nonPrimaryKeyNames.addAll(allFieldsNames);
      this.nonPrimaryKeyNames.removeAll(primaryKeyNames);
  }

  /**
   * Constructor with a repository.
   * @param repository a <code>RepositoryInterface</code> value
   */
  public Facility(RepositoryInterface repository) {
      this();
      initRepository(repository);
  }

    /**
     * Auto generated value setter.
     * @param facilityId the facilityId to set
     */
    public void setFacilityId(String facilityId) {
        this.facilityId = facilityId;
    }
    /**
     * Auto generated value setter.
     * @param facilityTypeId the facilityTypeId to set
     */
    public void setFacilityTypeId(String facilityTypeId) {
        this.facilityTypeId = facilityTypeId;
    }
    /**
     * Auto generated value setter.
     * @param parentFacilityId the parentFacilityId to set
     */
    public void setParentFacilityId(String parentFacilityId) {
        this.parentFacilityId = parentFacilityId;
    }
    /**
     * Auto generated value setter.
     * @param ownerPartyId the ownerPartyId to set
     */
    public void setOwnerPartyId(String ownerPartyId) {
        this.ownerPartyId = ownerPartyId;
    }
    /**
     * Auto generated value setter.
     * @param defaultInventoryItemTypeId the defaultInventoryItemTypeId to set
     */
    public void setDefaultInventoryItemTypeId(String defaultInventoryItemTypeId) {
        this.defaultInventoryItemTypeId = defaultInventoryItemTypeId;
    }
    /**
     * Auto generated value setter.
     * @param facilityName the facilityName to set
     */
    public void setFacilityName(String facilityName) {
        this.facilityName = facilityName;
    }
    /**
     * Auto generated value setter.
     * @param primaryFacilityGroupId the primaryFacilityGroupId to set
     */
    public void setPrimaryFacilityGroupId(String primaryFacilityGroupId) {
        this.primaryFacilityGroupId = primaryFacilityGroupId;
    }
    /**
     * Auto generated value setter.
     * @param squareFootage the squareFootage to set
     */
    public void setSquareFootage(Long squareFootage) {
        this.squareFootage = squareFootage;
    }
    /**
     * Auto generated value setter.
     * @param productStoreId the productStoreId to set
     */
    public void setProductStoreId(String productStoreId) {
        this.productStoreId = productStoreId;
    }
    /**
     * Auto generated value setter.
     * @param defaultDaysToShip the defaultDaysToShip to set
     */
    public void setDefaultDaysToShip(Long defaultDaysToShip) {
        this.defaultDaysToShip = defaultDaysToShip;
    }
    /**
     * Auto generated value setter.
     * @param openedDate the openedDate to set
     */
    public void setOpenedDate(Timestamp openedDate) {
        this.openedDate = openedDate;
    }
    /**
     * Auto generated value setter.
     * @param closedDate the closedDate to set
     */
    public void setClosedDate(Timestamp closedDate) {
        this.closedDate = closedDate;
    }
    /**
     * Auto generated value setter.
     * @param description the description to set
     */
    public void setDescription(String description) {
        this.description = description;
    }
    /**
     * Auto generated value setter.
     * @param defaultWeightUomId the defaultWeightUomId to set
     */
    public void setDefaultWeightUomId(String defaultWeightUomId) {
        this.defaultWeightUomId = defaultWeightUomId;
    }
    /**
     * Auto generated value setter.
     * @param geoPointId the geoPointId to set
     */
    public void setGeoPointId(String geoPointId) {
        this.geoPointId = geoPointId;
    }
    /**
     * Auto generated value setter.
     * @param lastUpdatedStamp the lastUpdatedStamp to set
     */
    public void setLastUpdatedStamp(Timestamp lastUpdatedStamp) {
        this.lastUpdatedStamp = lastUpdatedStamp;
    }
    /**
     * Auto generated value setter.
     * @param lastUpdatedTxStamp the lastUpdatedTxStamp to set
     */
    public void setLastUpdatedTxStamp(Timestamp lastUpdatedTxStamp) {
        this.lastUpdatedTxStamp = lastUpdatedTxStamp;
    }
    /**
     * Auto generated value setter.
     * @param createdStamp the createdStamp to set
     */
    public void setCreatedStamp(Timestamp createdStamp) {
        this.createdStamp = createdStamp;
    }
    /**
     * Auto generated value setter.
     * @param createdTxStamp the createdTxStamp to set
     */
    public void setCreatedTxStamp(Timestamp createdTxStamp) {
        this.createdTxStamp = createdTxStamp;
    }
    /**
     * Auto generated value setter.
     * @param inventoryReserveOrderEnumId the inventoryReserveOrderEnumId to set
     */
    public void setInventoryReserveOrderEnumId(String inventoryReserveOrderEnumId) {
        this.inventoryReserveOrderEnumId = inventoryReserveOrderEnumId;
    }

    /**
     * Auto generated value accessor.
     * @return <code>String</code>
     */
    public String getFacilityId() {
        return this.facilityId;
    }
    /**
     * Auto generated value accessor.
     * @return <code>String</code>
     */
    public String getFacilityTypeId() {
        return this.facilityTypeId;
    }
    /**
     * Auto generated value accessor.
     * @return <code>String</code>
     */
    public String getParentFacilityId() {
        return this.parentFacilityId;
    }
    /**
     * Auto generated value accessor.
     * @return <code>String</code>
     */
    public String getOwnerPartyId() {
        return this.ownerPartyId;
    }
    /**
     * Auto generated value accessor.
     * @return <code>String</code>
     */
    public String getDefaultInventoryItemTypeId() {
        return this.defaultInventoryItemTypeId;
    }
    /**
     * Auto generated value accessor.
     * @return <code>String</code>
     */
    public String getFacilityName() {
        return this.facilityName;
    }
    /**
     * Auto generated value accessor.
     * @return <code>String</code>
     */
    public String getPrimaryFacilityGroupId() {
        return this.primaryFacilityGroupId;
    }
    /**
     * Auto generated value accessor.
     * @return <code>Long</code>
     */
    public Long getSquareFootage() {
        return this.squareFootage;
    }
    /**
     * Auto generated value accessor.
     * @return <code>String</code>
     */
    public String getProductStoreId() {
        return this.productStoreId;
    }
    /**
     * Auto generated value accessor.
     * @return <code>Long</code>
     */
    public Long getDefaultDaysToShip() {
        return this.defaultDaysToShip;
    }
    /**
     * Auto generated value accessor.
     * @return <code>Timestamp</code>
     */
    public Timestamp getOpenedDate() {
        return this.openedDate;
    }
    /**
     * Auto generated value accessor.
     * @return <code>Timestamp</code>
     */
    public Timestamp getClosedDate() {
        return this.closedDate;
    }
    /**
     * Auto generated value accessor.
     * @return <code>String</code>
     */
    public String getDescription() {
        return this.description;
    }
    /**
     * Auto generated value accessor.
     * @return <code>String</code>
     */
    public String getDefaultWeightUomId() {
        return this.defaultWeightUomId;
    }
    /**
     * Auto generated value accessor.
     * @return <code>String</code>
     */
    public String getGeoPointId() {
        return this.geoPointId;
    }
    /**
     * Auto generated value accessor.
     * @return <code>Timestamp</code>
     */
    public Timestamp getLastUpdatedStamp() {
        return this.lastUpdatedStamp;
    }
    /**
     * Auto generated value accessor.
     * @return <code>Timestamp</code>
     */
    public Timestamp getLastUpdatedTxStamp() {
        return this.lastUpdatedTxStamp;
    }
    /**
     * Auto generated value accessor.
     * @return <code>Timestamp</code>
     */
    public Timestamp getCreatedStamp() {
        return this.createdStamp;
    }
    /**
     * Auto generated value accessor.
     * @return <code>Timestamp</code>
     */
    public Timestamp getCreatedTxStamp() {
        return this.createdTxStamp;
    }
    /**
     * Auto generated value accessor.
     * @return <code>String</code>
     */
    public String getInventoryReserveOrderEnumId() {
        return this.inventoryReserveOrderEnumId;
    }

    /**
     * Auto generated method that gets the related <code>FacilityType</code> by the relation named <code>FacilityType</code>.
     * @return the <code>FacilityType</code>
     * @throws RepositoryException if an error occurs
     */
    public FacilityType getFacilityType() throws RepositoryException {
        if (this.facilityType == null) {
            this.facilityType = getRelatedOne(FacilityType.class, "FacilityType");
        }
        return this.facilityType;
    }
    /**
     * Auto generated method that gets the related <code>Facility</code> by the relation named <code>ParentFacility</code>.
     * @return the <code>Facility</code>
     * @throws RepositoryException if an error occurs
     */
    public Facility getParentFacility() throws RepositoryException {
        if (this.parentFacility == null) {
            this.parentFacility = getRelatedOne(Facility.class, "ParentFacility");
        }
        return this.parentFacility;
    }
    /**
     * Auto generated method that gets the related <code>FacilityGroup</code> by the relation named <code>FacilityGroup</code>.
     * @return the <code>FacilityGroup</code>
     * @throws RepositoryException if an error occurs
     */
    public FacilityGroup getFacilityGroup() throws RepositoryException {
        if (this.facilityGroup == null) {
            this.facilityGroup = getRelatedOne(FacilityGroup.class, "FacilityGroup");
        }
        return this.facilityGroup;
    }
    /**
     * Auto generated method that gets the related <code>Party</code> by the relation named <code>OwnerParty</code>.
     * @return the <code>Party</code>
     * @throws RepositoryException if an error occurs
     */
    public Party getOwnerParty() throws RepositoryException {
        if (this.ownerParty == null) {
            this.ownerParty = getRelatedOne(Party.class, "OwnerParty");
        }
        return this.ownerParty;
    }
    /**
     * Auto generated method that gets the related <code>InventoryItemType</code> by the relation named <code>DefaultInventoryItemType</code>.
     * @return the <code>InventoryItemType</code>
     * @throws RepositoryException if an error occurs
     */
    public InventoryItemType getDefaultInventoryItemType() throws RepositoryException {
        if (this.defaultInventoryItemType == null) {
            this.defaultInventoryItemType = getRelatedOne(InventoryItemType.class, "DefaultInventoryItemType");
        }
        return this.defaultInventoryItemType;
    }
    /**
     * Auto generated method that gets the related <code>Uom</code> by the relation named <code>Uom</code>.
     * @return the <code>Uom</code>
     * @throws RepositoryException if an error occurs
     */
    public Uom getUom() throws RepositoryException {
        if (this.uom == null) {
            this.uom = getRelatedOne(Uom.class, "Uom");
        }
        return this.uom;
    }
    /**
     * Auto generated method that gets the related <code>ProductStore</code> by the relation named <code>ProductStore</code>.
     * @return the <code>ProductStore</code>
     * @throws RepositoryException if an error occurs
     */
    public ProductStore getProductStore() throws RepositoryException {
        if (this.productStore == null) {
            this.productStore = getRelatedOne(ProductStore.class, "ProductStore");
        }
        return this.productStore;
    }
    /**
     * Auto generated method that gets the related <code>FacilityTypeAttr</code> by the relation named <code>FacilityTypeAttr</code>.
     * @return the list of <code>FacilityTypeAttr</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends FacilityTypeAttr> getFacilityTypeAttrs() throws RepositoryException {
        if (this.facilityTypeAttrs == null) {
            this.facilityTypeAttrs = getRelated(FacilityTypeAttr.class, "FacilityTypeAttr");
        }
        return this.facilityTypeAttrs;
    }
    /**
     * Auto generated method that gets the related <code>GeoPoint</code> by the relation named <code>GeoPoint</code>.
     * @return the <code>GeoPoint</code>
     * @throws RepositoryException if an error occurs
     */
    public GeoPoint getGeoPoint() throws RepositoryException {
        if (this.geoPoint == null) {
            this.geoPoint = getRelatedOne(GeoPoint.class, "GeoPoint");
        }
        return this.geoPoint;
    }
    /**
     * Auto generated method that gets the related <code>Enumeration</code> by the relation named <code>Enumeration</code>.
     * @return the <code>Enumeration</code>
     * @throws RepositoryException if an error occurs
     */
    public Enumeration getEnumeration() throws RepositoryException {
        if (this.enumeration == null) {
            this.enumeration = getRelatedOne(Enumeration.class, "Enumeration");
        }
        return this.enumeration;
    }
    /**
     * Auto generated method that gets the related <code>Container</code> by the relation named <code>Container</code>.
     * @return the list of <code>Container</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends Container> getContainers() throws RepositoryException {
        if (this.containers == null) {
            this.containers = getRelated(Container.class, "Container");
        }
        return this.containers;
    }
    /**
     * Auto generated method that gets the related <code>DataImportInventory</code> by the relation named <code>DataImportInventory</code>.
     * @return the list of <code>DataImportInventory</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends DataImportInventory> getDataImportInventorys() throws RepositoryException {
        if (this.dataImportInventorys == null) {
            this.dataImportInventorys = getRelated(DataImportInventory.class, "DataImportInventory");
        }
        return this.dataImportInventorys;
    }
    /**
     * Auto generated method that gets the related <code>Delivery</code> by the relation named <code>OriginDelivery</code>.
     * @return the list of <code>Delivery</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends Delivery> getOriginDeliverys() throws RepositoryException {
        if (this.originDeliverys == null) {
            this.originDeliverys = getRelated(Delivery.class, "OriginDelivery");
        }
        return this.originDeliverys;
    }
    /**
     * Auto generated method that gets the related <code>Delivery</code> by the relation named <code>DestDelivery</code>.
     * @return the list of <code>Delivery</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends Delivery> getDestDeliverys() throws RepositoryException {
        if (this.destDeliverys == null) {
            this.destDeliverys = getRelated(Delivery.class, "DestDelivery");
        }
        return this.destDeliverys;
    }
    /**
     * Auto generated method that gets the related <code>Facility</code> by the relation named <code>ChildFacility</code>.
     * @return the list of <code>Facility</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends Facility> getChildFacilitys() throws RepositoryException {
        if (this.childFacilitys == null) {
            this.childFacilitys = getRelated(Facility.class, "ChildFacility");
        }
        return this.childFacilitys;
    }
    /**
     * Auto generated method that gets the related <code>FacilityAssoc</code> by the relation named <code>FromFacilityAssoc</code>.
     * @return the list of <code>FacilityAssoc</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends FacilityAssoc> getFromFacilityAssocs() throws RepositoryException {
        if (this.fromFacilityAssocs == null) {
            this.fromFacilityAssocs = getRelated(FacilityAssoc.class, "FromFacilityAssoc");
        }
        return this.fromFacilityAssocs;
    }
    /**
     * Auto generated method that gets the related <code>FacilityAssoc</code> by the relation named <code>ToFacilityAssoc</code>.
     * @return the list of <code>FacilityAssoc</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends FacilityAssoc> getToFacilityAssocs() throws RepositoryException {
        if (this.toFacilityAssocs == null) {
            this.toFacilityAssocs = getRelated(FacilityAssoc.class, "ToFacilityAssoc");
        }
        return this.toFacilityAssocs;
    }
    /**
     * Auto generated method that gets the related <code>FacilityAttribute</code> by the relation named <code>FacilityAttribute</code>.
     * @return the list of <code>FacilityAttribute</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends FacilityAttribute> getFacilityAttributes() throws RepositoryException {
        if (this.facilityAttributes == null) {
            this.facilityAttributes = getRelated(FacilityAttribute.class, "FacilityAttribute");
        }
        return this.facilityAttributes;
    }
    /**
     * Auto generated method that gets the related <code>FacilityCarrierShipment</code> by the relation named <code>FacilityCarrierShipment</code>.
     * @return the list of <code>FacilityCarrierShipment</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends FacilityCarrierShipment> getFacilityCarrierShipments() throws RepositoryException {
        if (this.facilityCarrierShipments == null) {
            this.facilityCarrierShipments = getRelated(FacilityCarrierShipment.class, "FacilityCarrierShipment");
        }
        return this.facilityCarrierShipments;
    }
    /**
     * Auto generated method that gets the related <code>FacilityContactMech</code> by the relation named <code>FacilityContactMech</code>.
     * @return the list of <code>FacilityContactMech</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends FacilityContactMech> getFacilityContactMeches() throws RepositoryException {
        if (this.facilityContactMeches == null) {
            this.facilityContactMeches = getRelated(FacilityContactMech.class, "FacilityContactMech");
        }
        return this.facilityContactMeches;
    }
    /**
     * Auto generated method that gets the related <code>FacilityContactMechPurpose</code> by the relation named <code>FacilityContactMechPurpose</code>.
     * @return the list of <code>FacilityContactMechPurpose</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends FacilityContactMechPurpose> getFacilityContactMechPurposes() throws RepositoryException {
        if (this.facilityContactMechPurposes == null) {
            this.facilityContactMechPurposes = getRelated(FacilityContactMechPurpose.class, "FacilityContactMechPurpose");
        }
        return this.facilityContactMechPurposes;
    }
    /**
     * Auto generated method that gets the related <code>FacilityGroupMember</code> by the relation named <code>FacilityGroupMember</code>.
     * @return the list of <code>FacilityGroupMember</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends FacilityGroupMember> getFacilityGroupMembers() throws RepositoryException {
        if (this.facilityGroupMembers == null) {
            this.facilityGroupMembers = getRelated(FacilityGroupMember.class, "FacilityGroupMember");
        }
        return this.facilityGroupMembers;
    }
    /**
     * Auto generated method that gets the related <code>FacilityLocation</code> by the relation named <code>FacilityLocation</code>.
     * @return the list of <code>FacilityLocation</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends FacilityLocation> getFacilityLocations() throws RepositoryException {
        if (this.facilityLocations == null) {
            this.facilityLocations = getRelated(FacilityLocation.class, "FacilityLocation");
        }
        return this.facilityLocations;
    }
    /**
     * Auto generated method that gets the related <code>FacilityParty</code> by the relation named <code>FacilityParty</code>.
     * @return the list of <code>FacilityParty</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends FacilityParty> getFacilityPartys() throws RepositoryException {
        if (this.facilityPartys == null) {
            this.facilityPartys = getRelated(FacilityParty.class, "FacilityParty");
        }
        return this.facilityPartys;
    }
    /**
     * Auto generated method that gets the related <code>FacilityPartyPermission</code> by the relation named <code>FacilityPartyPermission</code>.
     * @return the list of <code>FacilityPartyPermission</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends FacilityPartyPermission> getFacilityPartyPermissions() throws RepositoryException {
        if (this.facilityPartyPermissions == null) {
            this.facilityPartyPermissions = getRelated(FacilityPartyPermission.class, "FacilityPartyPermission");
        }
        return this.facilityPartyPermissions;
    }
    /**
     * Auto generated method that gets the related <code>FacilityRole</code> by the relation named <code>FacilityRole</code>.
     * @return the list of <code>FacilityRole</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends FacilityRole> getFacilityRoles() throws RepositoryException {
        if (this.facilityRoles == null) {
            this.facilityRoles = getRelated(FacilityRole.class, "FacilityRole");
        }
        return this.facilityRoles;
    }
    /**
     * Auto generated method that gets the related <code>FacilityTransferPlan</code> by the relation named <code>FromFacilityTransferPlan</code>.
     * @return the list of <code>FacilityTransferPlan</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends FacilityTransferPlan> getFromFacilityTransferPlans() throws RepositoryException {
        if (this.fromFacilityTransferPlans == null) {
            this.fromFacilityTransferPlans = getRelated(FacilityTransferPlan.class, "FromFacilityTransferPlan");
        }
        return this.fromFacilityTransferPlans;
    }
    /**
     * Auto generated method that gets the related <code>FacilityTransferPlan</code> by the relation named <code>ToFacilityTransferPlan</code>.
     * @return the list of <code>FacilityTransferPlan</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends FacilityTransferPlan> getToFacilityTransferPlans() throws RepositoryException {
        if (this.toFacilityTransferPlans == null) {
            this.toFacilityTransferPlans = getRelated(FacilityTransferPlan.class, "ToFacilityTransferPlan");
        }
        return this.toFacilityTransferPlans;
    }
    /**
     * Auto generated method that gets the related <code>FixedAsset</code> by the relation named <code>LocatedAtFixedAsset</code>.
     * @return the list of <code>FixedAsset</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends FixedAsset> getLocatedAtFixedAssets() throws RepositoryException {
        if (this.locatedAtFixedAssets == null) {
            this.locatedAtFixedAssets = getRelated(FixedAsset.class, "LocatedAtFixedAsset");
        }
        return this.locatedAtFixedAssets;
    }
    /**
     * Auto generated method that gets the related <code>InventoryEventPlanned</code> by the relation named <code>InventoryEventPlanned</code>.
     * @return the list of <code>InventoryEventPlanned</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends InventoryEventPlanned> getInventoryEventPlanneds() throws RepositoryException {
        if (this.inventoryEventPlanneds == null) {
            this.inventoryEventPlanneds = getRelated(InventoryEventPlanned.class, "InventoryEventPlanned");
        }
        return this.inventoryEventPlanneds;
    }
    /**
     * Auto generated method that gets the related <code>InventoryItem</code> by the relation named <code>InventoryItem</code>.
     * @return the list of <code>InventoryItem</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends InventoryItem> getInventoryItems() throws RepositoryException {
        if (this.inventoryItems == null) {
            this.inventoryItems = getRelated(InventoryItem.class, "InventoryItem");
        }
        return this.inventoryItems;
    }
    /**
     * Auto generated method that gets the related <code>InventoryTransfer</code> by the relation named <code>InventoryTransfer</code>.
     * @return the list of <code>InventoryTransfer</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends InventoryTransfer> getInventoryTransfers() throws RepositoryException {
        if (this.inventoryTransfers == null) {
            this.inventoryTransfers = getRelated(InventoryTransfer.class, "InventoryTransfer");
        }
        return this.inventoryTransfers;
    }
    /**
     * Auto generated method that gets the related <code>InventoryTransfer</code> by the relation named <code>ToInventoryTransfer</code>.
     * @return the list of <code>InventoryTransfer</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends InventoryTransfer> getToInventoryTransfers() throws RepositoryException {
        if (this.toInventoryTransfers == null) {
            this.toInventoryTransfers = getRelated(InventoryTransfer.class, "ToInventoryTransfer");
        }
        return this.toInventoryTransfers;
    }
    /**
     * Auto generated method that gets the related <code>MrpEvent</code> by the relation named <code>MrpEvent</code>.
     * @return the list of <code>MrpEvent</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends MrpEvent> getMrpEvents() throws RepositoryException {
        if (this.mrpEvents == null) {
            this.mrpEvents = getRelated(MrpEvent.class, "MrpEvent");
        }
        return this.mrpEvents;
    }
    /**
     * Auto generated method that gets the related <code>MrpInventoryEvent</code> by the relation named <code>MrpInventoryEvent</code>.
     * @return the list of <code>MrpInventoryEvent</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends MrpInventoryEvent> getMrpInventoryEvents() throws RepositoryException {
        if (this.mrpInventoryEvents == null) {
            this.mrpInventoryEvents = getRelated(MrpInventoryEvent.class, "MrpInventoryEvent");
        }
        return this.mrpInventoryEvents;
    }
    /**
     * Auto generated method that gets the related <code>OrderHeader</code> by the relation named <code>OriginOrderHeader</code>.
     * @return the list of <code>OrderHeader</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends OrderHeader> getOriginOrderHeaders() throws RepositoryException {
        if (this.originOrderHeaders == null) {
            this.originOrderHeaders = getRelated(OrderHeader.class, "OriginOrderHeader");
        }
        return this.originOrderHeaders;
    }
    /**
     * Auto generated method that gets the related <code>OrderItemShipGroup</code> by the relation named <code>OrderItemShipGroup</code>.
     * @return the list of <code>OrderItemShipGroup</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends OrderItemShipGroup> getOrderItemShipGroups() throws RepositoryException {
        if (this.orderItemShipGroups == null) {
            this.orderItemShipGroups = getRelated(OrderItemShipGroup.class, "OrderItemShipGroup");
        }
        return this.orderItemShipGroups;
    }
    /**
     * Auto generated method that gets the related <code>OrderSummaryEntry</code> by the relation named <code>OrderSummaryEntry</code>.
     * @return the list of <code>OrderSummaryEntry</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends OrderSummaryEntry> getOrderSummaryEntrys() throws RepositoryException {
        if (this.orderSummaryEntrys == null) {
            this.orderSummaryEntrys = getRelated(OrderSummaryEntry.class, "OrderSummaryEntry");
        }
        return this.orderSummaryEntrys;
    }
    /**
     * Auto generated method that gets the related <code>Picklist</code> by the relation named <code>Picklist</code>.
     * @return the list of <code>Picklist</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends Picklist> getPicklists() throws RepositoryException {
        if (this.picklists == null) {
            this.picklists = getRelated(Picklist.class, "Picklist");
        }
        return this.picklists;
    }
    /**
     * Auto generated method that gets the related <code>ProdCatalogInvFacility</code> by the relation named <code>ProdCatalogInvFacility</code>.
     * @return the list of <code>ProdCatalogInvFacility</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends ProdCatalogInvFacility> getProdCatalogInvFacilitys() throws RepositoryException {
        if (this.prodCatalogInvFacilitys == null) {
            this.prodCatalogInvFacilitys = getRelated(ProdCatalogInvFacility.class, "ProdCatalogInvFacility");
        }
        return this.prodCatalogInvFacilitys;
    }
    /**
     * Auto generated method that gets the related <code>Product</code> by the relation named <code>Product</code>.
     * @return the list of <code>Product</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends Product> getProducts() throws RepositoryException {
        if (this.products == null) {
            this.products = getRelated(Product.class, "Product");
        }
        return this.products;
    }
    /**
     * Auto generated method that gets the related <code>ProductFacility</code> by the relation named <code>ProductFacility</code>.
     * @return the list of <code>ProductFacility</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends ProductFacility> getProductFacilitys() throws RepositoryException {
        if (this.productFacilitys == null) {
            this.productFacilitys = getRelated(ProductFacility.class, "ProductFacility");
        }
        return this.productFacilitys;
    }
    /**
     * Auto generated method that gets the related <code>ProductFacility</code> by the relation named <code>ResplenishFromFacilityProductFacility</code>.
     * @return the list of <code>ProductFacility</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends ProductFacility> getResplenishFromFacilityProductFacilitys() throws RepositoryException {
        if (this.resplenishFromFacilityProductFacilitys == null) {
            this.resplenishFromFacilityProductFacilitys = getRelated(ProductFacility.class, "ResplenishFromFacilityProductFacility");
        }
        return this.resplenishFromFacilityProductFacilitys;
    }
    /**
     * Auto generated method that gets the related <code>ProductFacilityLocation</code> by the relation named <code>ProductFacilityLocation</code>.
     * @return the list of <code>ProductFacilityLocation</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends ProductFacilityLocation> getProductFacilityLocations() throws RepositoryException {
        if (this.productFacilityLocations == null) {
            this.productFacilityLocations = getRelated(ProductFacilityLocation.class, "ProductFacilityLocation");
        }
        return this.productFacilityLocations;
    }
    /**
     * Auto generated method that gets the related <code>ProductStoreFacility</code> by the relation named <code>ProductStoreFacility</code>.
     * @return the list of <code>ProductStoreFacility</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends ProductStoreFacility> getProductStoreFacilitys() throws RepositoryException {
        if (this.productStoreFacilitys == null) {
            this.productStoreFacilitys = getRelated(ProductStoreFacility.class, "ProductStoreFacility");
        }
        return this.productStoreFacilitys;
    }
    /**
     * Auto generated method that gets the related <code>ProductStoreFacilityByAddress</code> by the relation named <code>ProductStoreFacilityByAddress</code>.
     * @return the list of <code>ProductStoreFacilityByAddress</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends ProductStoreFacilityByAddress> getProductStoreFacilityByAddresses() throws RepositoryException {
        if (this.productStoreFacilityByAddresses == null) {
            this.productStoreFacilityByAddresses = getRelated(ProductStoreFacilityByAddress.class, "ProductStoreFacilityByAddress");
        }
        return this.productStoreFacilityByAddresses;
    }
    /**
     * Auto generated method that gets the related <code>ReorderGuideline</code> by the relation named <code>ReorderGuideline</code>.
     * @return the list of <code>ReorderGuideline</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends ReorderGuideline> getReorderGuidelines() throws RepositoryException {
        if (this.reorderGuidelines == null) {
            this.reorderGuidelines = getRelated(ReorderGuideline.class, "ReorderGuideline");
        }
        return this.reorderGuidelines;
    }
    /**
     * Auto generated method that gets the related <code>Requirement</code> by the relation named <code>Requirement</code>.
     * @return the list of <code>Requirement</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends Requirement> getRequirements() throws RepositoryException {
        if (this.requirements == null) {
            this.requirements = getRelated(Requirement.class, "Requirement");
        }
        return this.requirements;
    }
    /**
     * Auto generated method that gets the related <code>Requirement</code> by the relation named <code>ToRequirement</code>.
     * @return the list of <code>Requirement</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends Requirement> getToRequirements() throws RepositoryException {
        if (this.toRequirements == null) {
            this.toRequirements = getRelated(Requirement.class, "ToRequirement");
        }
        return this.toRequirements;
    }
    /**
     * Auto generated method that gets the related <code>ReturnHeader</code> by the relation named <code>ReturnHeader</code>.
     * @return the list of <code>ReturnHeader</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends ReturnHeader> getReturnHeaders() throws RepositoryException {
        if (this.returnHeaders == null) {
            this.returnHeaders = getRelated(ReturnHeader.class, "ReturnHeader");
        }
        return this.returnHeaders;
    }
    /**
     * Auto generated method that gets the related <code>SalesForecastItem</code> by the relation named <code>SalesForecastItem</code>.
     * @return the list of <code>SalesForecastItem</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends SalesForecastItem> getSalesForecastItems() throws RepositoryException {
        if (this.salesForecastItems == null) {
            this.salesForecastItems = getRelated(SalesForecastItem.class, "SalesForecastItem");
        }
        return this.salesForecastItems;
    }
    /**
     * Auto generated method that gets the related <code>Shipment</code> by the relation named <code>OriginShipment</code>.
     * @return the list of <code>Shipment</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends Shipment> getOriginShipments() throws RepositoryException {
        if (this.originShipments == null) {
            this.originShipments = getRelated(Shipment.class, "OriginShipment");
        }
        return this.originShipments;
    }
    /**
     * Auto generated method that gets the related <code>Shipment</code> by the relation named <code>DestinationShipment</code>.
     * @return the list of <code>Shipment</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends Shipment> getDestinationShipments() throws RepositoryException {
        if (this.destinationShipments == null) {
            this.destinationShipments = getRelated(Shipment.class, "DestinationShipment");
        }
        return this.destinationShipments;
    }
    /**
     * Auto generated method that gets the related <code>ShipmentRouteSegment</code> by the relation named <code>OriginShipmentRouteSegment</code>.
     * @return the list of <code>ShipmentRouteSegment</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends ShipmentRouteSegment> getOriginShipmentRouteSegments() throws RepositoryException {
        if (this.originShipmentRouteSegments == null) {
            this.originShipmentRouteSegments = getRelated(ShipmentRouteSegment.class, "OriginShipmentRouteSegment");
        }
        return this.originShipmentRouteSegments;
    }
    /**
     * Auto generated method that gets the related <code>ShipmentRouteSegment</code> by the relation named <code>DestShipmentRouteSegment</code>.
     * @return the list of <code>ShipmentRouteSegment</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends ShipmentRouteSegment> getDestShipmentRouteSegments() throws RepositoryException {
        if (this.destShipmentRouteSegments == null) {
            this.destShipmentRouteSegments = getRelated(ShipmentRouteSegment.class, "DestShipmentRouteSegment");
        }
        return this.destShipmentRouteSegments;
    }
    /**
     * Auto generated method that gets the related <code>WorkEffort</code> by the relation named <code>WorkEffort</code>.
     * @return the list of <code>WorkEffort</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends WorkEffort> getWorkEfforts() throws RepositoryException {
        if (this.workEfforts == null) {
            this.workEfforts = getRelated(WorkEffort.class, "WorkEffort");
        }
        return this.workEfforts;
    }
    /**
     * Auto generated method that gets the related <code>WorkEffortPartyAssignment</code> by the relation named <code>WorkEffortPartyAssignment</code>.
     * @return the list of <code>WorkEffortPartyAssignment</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends WorkEffortPartyAssignment> getWorkEffortPartyAssignments() throws RepositoryException {
        if (this.workEffortPartyAssignments == null) {
            this.workEffortPartyAssignments = getRelated(WorkEffortPartyAssignment.class, "WorkEffortPartyAssignment");
        }
        return this.workEffortPartyAssignments;
    }

    /**
     * Auto generated value setter.
     * @param facilityType the facilityType to set
    */
    public void setFacilityType(FacilityType facilityType) {
        this.facilityType = facilityType;
    }
    /**
     * Auto generated value setter.
     * @param parentFacility the parentFacility to set
    */
    public void setParentFacility(Facility parentFacility) {
        this.parentFacility = parentFacility;
    }
    /**
     * Auto generated value setter.
     * @param facilityGroup the facilityGroup to set
    */
    public void setFacilityGroup(FacilityGroup facilityGroup) {
        this.facilityGroup = facilityGroup;
    }
    /**
     * Auto generated value setter.
     * @param ownerParty the ownerParty to set
    */
    public void setOwnerParty(Party ownerParty) {
        this.ownerParty = ownerParty;
    }
    /**
     * Auto generated value setter.
     * @param defaultInventoryItemType the defaultInventoryItemType to set
    */
    public void setDefaultInventoryItemType(InventoryItemType defaultInventoryItemType) {
        this.defaultInventoryItemType = defaultInventoryItemType;
    }
    /**
     * Auto generated value setter.
     * @param uom the uom to set
    */
    public void setUom(Uom uom) {
        this.uom = uom;
    }
    /**
     * Auto generated value setter.
     * @param productStore the productStore to set
    */
    public void setProductStore(ProductStore productStore) {
        this.productStore = productStore;
    }
    /**
     * Auto generated value setter.
     * @param facilityTypeAttrs the facilityTypeAttrs to set
    */
    public void setFacilityTypeAttrs(List<FacilityTypeAttr> facilityTypeAttrs) {
        this.facilityTypeAttrs = facilityTypeAttrs;
    }
    /**
     * Auto generated value setter.
     * @param geoPoint the geoPoint to set
    */
    public void setGeoPoint(GeoPoint geoPoint) {
        this.geoPoint = geoPoint;
    }
    /**
     * Auto generated value setter.
     * @param enumeration the enumeration to set
    */
    public void setEnumeration(Enumeration enumeration) {
        this.enumeration = enumeration;
    }
    /**
     * Auto generated value setter.
     * @param containers the containers to set
    */
    public void setContainers(List<Container> containers) {
        this.containers = containers;
    }
    /**
     * Auto generated value setter.
     * @param dataImportInventorys the dataImportInventorys to set
    */
    public void setDataImportInventorys(List<DataImportInventory> dataImportInventorys) {
        this.dataImportInventorys = dataImportInventorys;
    }
    /**
     * Auto generated value setter.
     * @param originDeliverys the originDeliverys to set
    */
    public void setOriginDeliverys(List<Delivery> originDeliverys) {
        this.originDeliverys = originDeliverys;
    }
    /**
     * Auto generated value setter.
     * @param destDeliverys the destDeliverys to set
    */
    public void setDestDeliverys(List<Delivery> destDeliverys) {
        this.destDeliverys = destDeliverys;
    }
    /**
     * Auto generated value setter.
     * @param childFacilitys the childFacilitys to set
    */
    public void setChildFacilitys(List<Facility> childFacilitys) {
        this.childFacilitys = childFacilitys;
    }
    /**
     * Auto generated value setter.
     * @param fromFacilityAssocs the fromFacilityAssocs to set
    */
    public void setFromFacilityAssocs(List<FacilityAssoc> fromFacilityAssocs) {
        this.fromFacilityAssocs = fromFacilityAssocs;
    }
    /**
     * Auto generated value setter.
     * @param toFacilityAssocs the toFacilityAssocs to set
    */
    public void setToFacilityAssocs(List<FacilityAssoc> toFacilityAssocs) {
        this.toFacilityAssocs = toFacilityAssocs;
    }
    /**
     * Auto generated value setter.
     * @param facilityAttributes the facilityAttributes to set
    */
    public void setFacilityAttributes(List<FacilityAttribute> facilityAttributes) {
        this.facilityAttributes = facilityAttributes;
    }
    /**
     * Auto generated value setter.
     * @param facilityCarrierShipments the facilityCarrierShipments to set
    */
    public void setFacilityCarrierShipments(List<FacilityCarrierShipment> facilityCarrierShipments) {
        this.facilityCarrierShipments = facilityCarrierShipments;
    }
    /**
     * Auto generated value setter.
     * @param facilityContactMeches the facilityContactMeches to set
    */
    public void setFacilityContactMeches(List<FacilityContactMech> facilityContactMeches) {
        this.facilityContactMeches = facilityContactMeches;
    }
    /**
     * Auto generated value setter.
     * @param facilityContactMechPurposes the facilityContactMechPurposes to set
    */
    public void setFacilityContactMechPurposes(List<FacilityContactMechPurpose> facilityContactMechPurposes) {
        this.facilityContactMechPurposes = facilityContactMechPurposes;
    }
    /**
     * Auto generated value setter.
     * @param facilityGroupMembers the facilityGroupMembers to set
    */
    public void setFacilityGroupMembers(List<FacilityGroupMember> facilityGroupMembers) {
        this.facilityGroupMembers = facilityGroupMembers;
    }
    /**
     * Auto generated value setter.
     * @param facilityLocations the facilityLocations to set
    */
    public void setFacilityLocations(List<FacilityLocation> facilityLocations) {
        this.facilityLocations = facilityLocations;
    }
    /**
     * Auto generated value setter.
     * @param facilityPartys the facilityPartys to set
    */
    public void setFacilityPartys(List<FacilityParty> facilityPartys) {
        this.facilityPartys = facilityPartys;
    }
    /**
     * Auto generated value setter.
     * @param facilityPartyPermissions the facilityPartyPermissions to set
    */
    public void setFacilityPartyPermissions(List<FacilityPartyPermission> facilityPartyPermissions) {
        this.facilityPartyPermissions = facilityPartyPermissions;
    }
    /**
     * Auto generated value setter.
     * @param facilityRoles the facilityRoles to set
    */
    public void setFacilityRoles(List<FacilityRole> facilityRoles) {
        this.facilityRoles = facilityRoles;
    }
    /**
     * Auto generated value setter.
     * @param fromFacilityTransferPlans the fromFacilityTransferPlans to set
    */
    public void setFromFacilityTransferPlans(List<FacilityTransferPlan> fromFacilityTransferPlans) {
        this.fromFacilityTransferPlans = fromFacilityTransferPlans;
    }
    /**
     * Auto generated value setter.
     * @param toFacilityTransferPlans the toFacilityTransferPlans to set
    */
    public void setToFacilityTransferPlans(List<FacilityTransferPlan> toFacilityTransferPlans) {
        this.toFacilityTransferPlans = toFacilityTransferPlans;
    }
    /**
     * Auto generated value setter.
     * @param locatedAtFixedAssets the locatedAtFixedAssets to set
    */
    public void setLocatedAtFixedAssets(List<FixedAsset> locatedAtFixedAssets) {
        this.locatedAtFixedAssets = locatedAtFixedAssets;
    }
    /**
     * Auto generated value setter.
     * @param inventoryEventPlanneds the inventoryEventPlanneds to set
    */
    public void setInventoryEventPlanneds(List<InventoryEventPlanned> inventoryEventPlanneds) {
        this.inventoryEventPlanneds = inventoryEventPlanneds;
    }
    /**
     * Auto generated value setter.
     * @param inventoryItems the inventoryItems to set
    */
    public void setInventoryItems(List<InventoryItem> inventoryItems) {
        this.inventoryItems = inventoryItems;
    }
    /**
     * Auto generated value setter.
     * @param inventoryTransfers the inventoryTransfers to set
    */
    public void setInventoryTransfers(List<InventoryTransfer> inventoryTransfers) {
        this.inventoryTransfers = inventoryTransfers;
    }
    /**
     * Auto generated value setter.
     * @param toInventoryTransfers the toInventoryTransfers to set
    */
    public void setToInventoryTransfers(List<InventoryTransfer> toInventoryTransfers) {
        this.toInventoryTransfers = toInventoryTransfers;
    }
    /**
     * Auto generated value setter.
     * @param mrpEvents the mrpEvents to set
    */
    public void setMrpEvents(List<MrpEvent> mrpEvents) {
        this.mrpEvents = mrpEvents;
    }
    /**
     * Auto generated value setter.
     * @param mrpInventoryEvents the mrpInventoryEvents to set
    */
    public void setMrpInventoryEvents(List<MrpInventoryEvent> mrpInventoryEvents) {
        this.mrpInventoryEvents = mrpInventoryEvents;
    }
    /**
     * Auto generated value setter.
     * @param originOrderHeaders the originOrderHeaders to set
    */
    public void setOriginOrderHeaders(List<OrderHeader> originOrderHeaders) {
        this.originOrderHeaders = originOrderHeaders;
    }
    /**
     * Auto generated value setter.
     * @param orderItemShipGroups the orderItemShipGroups to set
    */
    public void setOrderItemShipGroups(List<OrderItemShipGroup> orderItemShipGroups) {
        this.orderItemShipGroups = orderItemShipGroups;
    }
    /**
     * Auto generated value setter.
     * @param orderSummaryEntrys the orderSummaryEntrys to set
    */
    public void setOrderSummaryEntrys(List<OrderSummaryEntry> orderSummaryEntrys) {
        this.orderSummaryEntrys = orderSummaryEntrys;
    }
    /**
     * Auto generated value setter.
     * @param picklists the picklists to set
    */
    public void setPicklists(List<Picklist> picklists) {
        this.picklists = picklists;
    }
    /**
     * Auto generated value setter.
     * @param prodCatalogInvFacilitys the prodCatalogInvFacilitys to set
    */
    public void setProdCatalogInvFacilitys(List<ProdCatalogInvFacility> prodCatalogInvFacilitys) {
        this.prodCatalogInvFacilitys = prodCatalogInvFacilitys;
    }
    /**
     * Auto generated value setter.
     * @param products the products to set
    */
    public void setProducts(List<Product> products) {
        this.products = products;
    }
    /**
     * Auto generated value setter.
     * @param productFacilitys the productFacilitys to set
    */
    public void setProductFacilitys(List<ProductFacility> productFacilitys) {
        this.productFacilitys = productFacilitys;
    }
    /**
     * Auto generated value setter.
     * @param resplenishFromFacilityProductFacilitys the resplenishFromFacilityProductFacilitys to set
    */
    public void setResplenishFromFacilityProductFacilitys(List<ProductFacility> resplenishFromFacilityProductFacilitys) {
        this.resplenishFromFacilityProductFacilitys = resplenishFromFacilityProductFacilitys;
    }
    /**
     * Auto generated value setter.
     * @param productFacilityLocations the productFacilityLocations to set
    */
    public void setProductFacilityLocations(List<ProductFacilityLocation> productFacilityLocations) {
        this.productFacilityLocations = productFacilityLocations;
    }
    /**
     * Auto generated value setter.
     * @param productStoreFacilitys the productStoreFacilitys to set
    */
    public void setProductStoreFacilitys(List<ProductStoreFacility> productStoreFacilitys) {
        this.productStoreFacilitys = productStoreFacilitys;
    }
    /**
     * Auto generated value setter.
     * @param productStoreFacilityByAddresses the productStoreFacilityByAddresses to set
    */
    public void setProductStoreFacilityByAddresses(List<ProductStoreFacilityByAddress> productStoreFacilityByAddresses) {
        this.productStoreFacilityByAddresses = productStoreFacilityByAddresses;
    }
    /**
     * Auto generated value setter.
     * @param reorderGuidelines the reorderGuidelines to set
    */
    public void setReorderGuidelines(List<ReorderGuideline> reorderGuidelines) {
        this.reorderGuidelines = reorderGuidelines;
    }
    /**
     * Auto generated value setter.
     * @param requirements the requirements to set
    */
    public void setRequirements(List<Requirement> requirements) {
        this.requirements = requirements;
    }
    /**
     * Auto generated value setter.
     * @param toRequirements the toRequirements to set
    */
    public void setToRequirements(List<Requirement> toRequirements) {
        this.toRequirements = toRequirements;
    }
    /**
     * Auto generated value setter.
     * @param returnHeaders the returnHeaders to set
    */
    public void setReturnHeaders(List<ReturnHeader> returnHeaders) {
        this.returnHeaders = returnHeaders;
    }
    /**
     * Auto generated value setter.
     * @param salesForecastItems the salesForecastItems to set
    */
    public void setSalesForecastItems(List<SalesForecastItem> salesForecastItems) {
        this.salesForecastItems = salesForecastItems;
    }
    /**
     * Auto generated value setter.
     * @param originShipments the originShipments to set
    */
    public void setOriginShipments(List<Shipment> originShipments) {
        this.originShipments = originShipments;
    }
    /**
     * Auto generated value setter.
     * @param destinationShipments the destinationShipments to set
    */
    public void setDestinationShipments(List<Shipment> destinationShipments) {
        this.destinationShipments = destinationShipments;
    }
    /**
     * Auto generated value setter.
     * @param originShipmentRouteSegments the originShipmentRouteSegments to set
    */
    public void setOriginShipmentRouteSegments(List<ShipmentRouteSegment> originShipmentRouteSegments) {
        this.originShipmentRouteSegments = originShipmentRouteSegments;
    }
    /**
     * Auto generated value setter.
     * @param destShipmentRouteSegments the destShipmentRouteSegments to set
    */
    public void setDestShipmentRouteSegments(List<ShipmentRouteSegment> destShipmentRouteSegments) {
        this.destShipmentRouteSegments = destShipmentRouteSegments;
    }
    /**
     * Auto generated value setter.
     * @param workEfforts the workEfforts to set
    */
    public void setWorkEfforts(List<WorkEffort> workEfforts) {
        this.workEfforts = workEfforts;
    }
    /**
     * Auto generated value setter.
     * @param workEffortPartyAssignments the workEffortPartyAssignments to set
    */
    public void setWorkEffortPartyAssignments(List<WorkEffortPartyAssignment> workEffortPartyAssignments) {
        this.workEffortPartyAssignments = workEffortPartyAssignments;
    }

    /**
     * Auto generated method that add item to collection.
     */
    public void addFromFacilityAssoc(FacilityAssoc fromFacilityAssoc) {
        if (this.fromFacilityAssocs == null) {
            this.fromFacilityAssocs = new ArrayList<FacilityAssoc>();
        }
        this.fromFacilityAssocs.add(fromFacilityAssoc);
    }
    /**
     * Auto generated method that remove item from collection.
     */
    public void removeFromFacilityAssoc(FacilityAssoc fromFacilityAssoc) {
        if (this.fromFacilityAssocs == null) {
            return;
        }
        this.fromFacilityAssocs.remove(fromFacilityAssoc);
    }
    /**
     * Auto generated method that clear items from collection.
     */
    public void clearFromFacilityAssoc() {
        if (this.fromFacilityAssocs == null) {
            return;
        }
        this.fromFacilityAssocs.clear();
    }
    /**
     * Auto generated method that add item to collection.
     */
    public void addToFacilityAssoc(FacilityAssoc toFacilityAssoc) {
        if (this.toFacilityAssocs == null) {
            this.toFacilityAssocs = new ArrayList<FacilityAssoc>();
        }
        this.toFacilityAssocs.add(toFacilityAssoc);
    }
    /**
     * Auto generated method that remove item from collection.
     */
    public void removeToFacilityAssoc(FacilityAssoc toFacilityAssoc) {
        if (this.toFacilityAssocs == null) {
            return;
        }
        this.toFacilityAssocs.remove(toFacilityAssoc);
    }
    /**
     * Auto generated method that clear items from collection.
     */
    public void clearToFacilityAssoc() {
        if (this.toFacilityAssocs == null) {
            return;
        }
        this.toFacilityAssocs.clear();
    }
    /**
     * Auto generated method that add item to collection.
     */
    public void addFacilityAttribute(FacilityAttribute facilityAttribute) {
        if (this.facilityAttributes == null) {
            this.facilityAttributes = new ArrayList<FacilityAttribute>();
        }
        this.facilityAttributes.add(facilityAttribute);
    }
    /**
     * Auto generated method that remove item from collection.
     */
    public void removeFacilityAttribute(FacilityAttribute facilityAttribute) {
        if (this.facilityAttributes == null) {
            return;
        }
        this.facilityAttributes.remove(facilityAttribute);
    }
    /**
     * Auto generated method that clear items from collection.
     */
    public void clearFacilityAttribute() {
        if (this.facilityAttributes == null) {
            return;
        }
        this.facilityAttributes.clear();
    }
    /**
     * Auto generated method that add item to collection.
     */
    public void addFacilityCarrierShipment(FacilityCarrierShipment facilityCarrierShipment) {
        if (this.facilityCarrierShipments == null) {
            this.facilityCarrierShipments = new ArrayList<FacilityCarrierShipment>();
        }
        this.facilityCarrierShipments.add(facilityCarrierShipment);
    }
    /**
     * Auto generated method that remove item from collection.
     */
    public void removeFacilityCarrierShipment(FacilityCarrierShipment facilityCarrierShipment) {
        if (this.facilityCarrierShipments == null) {
            return;
        }
        this.facilityCarrierShipments.remove(facilityCarrierShipment);
    }
    /**
     * Auto generated method that clear items from collection.
     */
    public void clearFacilityCarrierShipment() {
        if (this.facilityCarrierShipments == null) {
            return;
        }
        this.facilityCarrierShipments.clear();
    }
    /**
     * Auto generated method that add item to collection.
     */
    public void addFacilityContactMeche(FacilityContactMech facilityContactMeche) {
        if (this.facilityContactMeches == null) {
            this.facilityContactMeches = new ArrayList<FacilityContactMech>();
        }
        this.facilityContactMeches.add(facilityContactMeche);
    }
    /**
     * Auto generated method that remove item from collection.
     */
    public void removeFacilityContactMeche(FacilityContactMech facilityContactMeche) {
        if (this.facilityContactMeches == null) {
            return;
        }
        this.facilityContactMeches.remove(facilityContactMeche);
    }
    /**
     * Auto generated method that clear items from collection.
     */
    public void clearFacilityContactMeche() {
        if (this.facilityContactMeches == null) {
            return;
        }
        this.facilityContactMeches.clear();
    }
    /**
     * Auto generated method that add item to collection.
     */
    public void addFacilityContactMechPurpose(FacilityContactMechPurpose facilityContactMechPurpose) {
        if (this.facilityContactMechPurposes == null) {
            this.facilityContactMechPurposes = new ArrayList<FacilityContactMechPurpose>();
        }
        this.facilityContactMechPurposes.add(facilityContactMechPurpose);
    }
    /**
     * Auto generated method that remove item from collection.
     */
    public void removeFacilityContactMechPurpose(FacilityContactMechPurpose facilityContactMechPurpose) {
        if (this.facilityContactMechPurposes == null) {
            return;
        }
        this.facilityContactMechPurposes.remove(facilityContactMechPurpose);
    }
    /**
     * Auto generated method that clear items from collection.
     */
    public void clearFacilityContactMechPurpose() {
        if (this.facilityContactMechPurposes == null) {
            return;
        }
        this.facilityContactMechPurposes.clear();
    }
    /**
     * Auto generated method that add item to collection.
     */
    public void addFacilityGroupMember(FacilityGroupMember facilityGroupMember) {
        if (this.facilityGroupMembers == null) {
            this.facilityGroupMembers = new ArrayList<FacilityGroupMember>();
        }
        this.facilityGroupMembers.add(facilityGroupMember);
    }
    /**
     * Auto generated method that remove item from collection.
     */
    public void removeFacilityGroupMember(FacilityGroupMember facilityGroupMember) {
        if (this.facilityGroupMembers == null) {
            return;
        }
        this.facilityGroupMembers.remove(facilityGroupMember);
    }
    /**
     * Auto generated method that clear items from collection.
     */
    public void clearFacilityGroupMember() {
        if (this.facilityGroupMembers == null) {
            return;
        }
        this.facilityGroupMembers.clear();
    }
    /**
     * Auto generated method that add item to collection.
     */
    public void addFacilityLocation(FacilityLocation facilityLocation) {
        if (this.facilityLocations == null) {
            this.facilityLocations = new ArrayList<FacilityLocation>();
        }
        this.facilityLocations.add(facilityLocation);
    }
    /**
     * Auto generated method that remove item from collection.
     */
    public void removeFacilityLocation(FacilityLocation facilityLocation) {
        if (this.facilityLocations == null) {
            return;
        }
        this.facilityLocations.remove(facilityLocation);
    }
    /**
     * Auto generated method that clear items from collection.
     */
    public void clearFacilityLocation() {
        if (this.facilityLocations == null) {
            return;
        }
        this.facilityLocations.clear();
    }
    /**
     * Auto generated method that add item to collection.
     */
    public void addFacilityParty(FacilityParty facilityParty) {
        if (this.facilityPartys == null) {
            this.facilityPartys = new ArrayList<FacilityParty>();
        }
        this.facilityPartys.add(facilityParty);
    }
    /**
     * Auto generated method that remove item from collection.
     */
    public void removeFacilityParty(FacilityParty facilityParty) {
        if (this.facilityPartys == null) {
            return;
        }
        this.facilityPartys.remove(facilityParty);
    }
    /**
     * Auto generated method that clear items from collection.
     */
    public void clearFacilityParty() {
        if (this.facilityPartys == null) {
            return;
        }
        this.facilityPartys.clear();
    }
    /**
     * Auto generated method that add item to collection.
     */
    public void addFacilityPartyPermission(FacilityPartyPermission facilityPartyPermission) {
        if (this.facilityPartyPermissions == null) {
            this.facilityPartyPermissions = new ArrayList<FacilityPartyPermission>();
        }
        this.facilityPartyPermissions.add(facilityPartyPermission);
    }
    /**
     * Auto generated method that remove item from collection.
     */
    public void removeFacilityPartyPermission(FacilityPartyPermission facilityPartyPermission) {
        if (this.facilityPartyPermissions == null) {
            return;
        }
        this.facilityPartyPermissions.remove(facilityPartyPermission);
    }
    /**
     * Auto generated method that clear items from collection.
     */
    public void clearFacilityPartyPermission() {
        if (this.facilityPartyPermissions == null) {
            return;
        }
        this.facilityPartyPermissions.clear();
    }
    /**
     * Auto generated method that add item to collection.
     */
    public void addFacilityRole(FacilityRole facilityRole) {
        if (this.facilityRoles == null) {
            this.facilityRoles = new ArrayList<FacilityRole>();
        }
        this.facilityRoles.add(facilityRole);
    }
    /**
     * Auto generated method that remove item from collection.
     */
    public void removeFacilityRole(FacilityRole facilityRole) {
        if (this.facilityRoles == null) {
            return;
        }
        this.facilityRoles.remove(facilityRole);
    }
    /**
     * Auto generated method that clear items from collection.
     */
    public void clearFacilityRole() {
        if (this.facilityRoles == null) {
            return;
        }
        this.facilityRoles.clear();
    }
    /**
     * Auto generated method that add item to collection.
     */
    public void addMrpInventoryEvent(MrpInventoryEvent mrpInventoryEvent) {
        if (this.mrpInventoryEvents == null) {
            this.mrpInventoryEvents = new ArrayList<MrpInventoryEvent>();
        }
        this.mrpInventoryEvents.add(mrpInventoryEvent);
    }
    /**
     * Auto generated method that remove item from collection.
     */
    public void removeMrpInventoryEvent(MrpInventoryEvent mrpInventoryEvent) {
        if (this.mrpInventoryEvents == null) {
            return;
        }
        this.mrpInventoryEvents.remove(mrpInventoryEvent);
    }
    /**
     * Auto generated method that clear items from collection.
     */
    public void clearMrpInventoryEvent() {
        if (this.mrpInventoryEvents == null) {
            return;
        }
        this.mrpInventoryEvents.clear();
    }
    /**
     * Auto generated method that add item to collection.
     */
    public void addOrderSummaryEntry(OrderSummaryEntry orderSummaryEntry) {
        if (this.orderSummaryEntrys == null) {
            this.orderSummaryEntrys = new ArrayList<OrderSummaryEntry>();
        }
        this.orderSummaryEntrys.add(orderSummaryEntry);
    }
    /**
     * Auto generated method that remove item from collection.
     */
    public void removeOrderSummaryEntry(OrderSummaryEntry orderSummaryEntry) {
        if (this.orderSummaryEntrys == null) {
            return;
        }
        this.orderSummaryEntrys.remove(orderSummaryEntry);
    }
    /**
     * Auto generated method that clear items from collection.
     */
    public void clearOrderSummaryEntry() {
        if (this.orderSummaryEntrys == null) {
            return;
        }
        this.orderSummaryEntrys.clear();
    }
    /**
     * Auto generated method that add item to collection.
     */
    public void addProdCatalogInvFacility(ProdCatalogInvFacility prodCatalogInvFacility) {
        if (this.prodCatalogInvFacilitys == null) {
            this.prodCatalogInvFacilitys = new ArrayList<ProdCatalogInvFacility>();
        }
        this.prodCatalogInvFacilitys.add(prodCatalogInvFacility);
    }
    /**
     * Auto generated method that remove item from collection.
     */
    public void removeProdCatalogInvFacility(ProdCatalogInvFacility prodCatalogInvFacility) {
        if (this.prodCatalogInvFacilitys == null) {
            return;
        }
        this.prodCatalogInvFacilitys.remove(prodCatalogInvFacility);
    }
    /**
     * Auto generated method that clear items from collection.
     */
    public void clearProdCatalogInvFacility() {
        if (this.prodCatalogInvFacilitys == null) {
            return;
        }
        this.prodCatalogInvFacilitys.clear();
    }
    /**
     * Auto generated method that add item to collection.
     */
    public void addProductFacility(ProductFacility productFacility) {
        if (this.productFacilitys == null) {
            this.productFacilitys = new ArrayList<ProductFacility>();
        }
        this.productFacilitys.add(productFacility);
    }
    /**
     * Auto generated method that remove item from collection.
     */
    public void removeProductFacility(ProductFacility productFacility) {
        if (this.productFacilitys == null) {
            return;
        }
        this.productFacilitys.remove(productFacility);
    }
    /**
     * Auto generated method that clear items from collection.
     */
    public void clearProductFacility() {
        if (this.productFacilitys == null) {
            return;
        }
        this.productFacilitys.clear();
    }
    /**
     * Auto generated method that add item to collection.
     */
    public void addResplenishFromFacilityProductFacility(ProductFacility resplenishFromFacilityProductFacility) {
        if (this.resplenishFromFacilityProductFacilitys == null) {
            this.resplenishFromFacilityProductFacilitys = new ArrayList<ProductFacility>();
        }
        this.resplenishFromFacilityProductFacilitys.add(resplenishFromFacilityProductFacility);
    }
    /**
     * Auto generated method that remove item from collection.
     */
    public void removeResplenishFromFacilityProductFacility(ProductFacility resplenishFromFacilityProductFacility) {
        if (this.resplenishFromFacilityProductFacilitys == null) {
            return;
        }
        this.resplenishFromFacilityProductFacilitys.remove(resplenishFromFacilityProductFacility);
    }
    /**
     * Auto generated method that clear items from collection.
     */
    public void clearResplenishFromFacilityProductFacility() {
        if (this.resplenishFromFacilityProductFacilitys == null) {
            return;
        }
        this.resplenishFromFacilityProductFacilitys.clear();
    }
    /**
     * Auto generated method that add item to collection.
     */
    public void addProductFacilityLocation(ProductFacilityLocation productFacilityLocation) {
        if (this.productFacilityLocations == null) {
            this.productFacilityLocations = new ArrayList<ProductFacilityLocation>();
        }
        this.productFacilityLocations.add(productFacilityLocation);
    }
    /**
     * Auto generated method that remove item from collection.
     */
    public void removeProductFacilityLocation(ProductFacilityLocation productFacilityLocation) {
        if (this.productFacilityLocations == null) {
            return;
        }
        this.productFacilityLocations.remove(productFacilityLocation);
    }
    /**
     * Auto generated method that clear items from collection.
     */
    public void clearProductFacilityLocation() {
        if (this.productFacilityLocations == null) {
            return;
        }
        this.productFacilityLocations.clear();
    }
    /**
     * Auto generated method that add item to collection.
     */
    public void addProductStoreFacility(ProductStoreFacility productStoreFacility) {
        if (this.productStoreFacilitys == null) {
            this.productStoreFacilitys = new ArrayList<ProductStoreFacility>();
        }
        this.productStoreFacilitys.add(productStoreFacility);
    }
    /**
     * Auto generated method that remove item from collection.
     */
    public void removeProductStoreFacility(ProductStoreFacility productStoreFacility) {
        if (this.productStoreFacilitys == null) {
            return;
        }
        this.productStoreFacilitys.remove(productStoreFacility);
    }
    /**
     * Auto generated method that clear items from collection.
     */
    public void clearProductStoreFacility() {
        if (this.productStoreFacilitys == null) {
            return;
        }
        this.productStoreFacilitys.clear();
    }

    /** {@inheritDoc} */
    @Override
    public void fromMap(Map<String, Object> mapValue) {
        preInit();
        setFacilityId((String) mapValue.get("facilityId"));
        setFacilityTypeId((String) mapValue.get("facilityTypeId"));
        setParentFacilityId((String) mapValue.get("parentFacilityId"));
        setOwnerPartyId((String) mapValue.get("ownerPartyId"));
        setDefaultInventoryItemTypeId((String) mapValue.get("defaultInventoryItemTypeId"));
        setFacilityName((String) mapValue.get("facilityName"));
        setPrimaryFacilityGroupId((String) mapValue.get("primaryFacilityGroupId"));
        setSquareFootage((Long) mapValue.get("squareFootage"));
        setProductStoreId((String) mapValue.get("productStoreId"));
        setDefaultDaysToShip((Long) mapValue.get("defaultDaysToShip"));
        setOpenedDate((Timestamp) mapValue.get("openedDate"));
        setClosedDate((Timestamp) mapValue.get("closedDate"));
        setDescription((String) mapValue.get("description"));
        setDefaultWeightUomId((String) mapValue.get("defaultWeightUomId"));
        setGeoPointId((String) mapValue.get("geoPointId"));
        setLastUpdatedStamp((Timestamp) mapValue.get("lastUpdatedStamp"));
        setLastUpdatedTxStamp((Timestamp) mapValue.get("lastUpdatedTxStamp"));
        setCreatedStamp((Timestamp) mapValue.get("createdStamp"));
        setCreatedTxStamp((Timestamp) mapValue.get("createdTxStamp"));
        setInventoryReserveOrderEnumId((String) mapValue.get("inventoryReserveOrderEnumId"));
        postInit();
    }

    /** {@inheritDoc} */
    @Override
    public Map<String, Object> toMap() {
        Map<String, Object> mapValue = new FastMap<String, Object>();
        mapValue.put("facilityId", getFacilityId());
        mapValue.put("facilityTypeId", getFacilityTypeId());
        mapValue.put("parentFacilityId", getParentFacilityId());
        mapValue.put("ownerPartyId", getOwnerPartyId());
        mapValue.put("defaultInventoryItemTypeId", getDefaultInventoryItemTypeId());
        mapValue.put("facilityName", getFacilityName());
        mapValue.put("primaryFacilityGroupId", getPrimaryFacilityGroupId());
        mapValue.put("squareFootage", getSquareFootage());
        mapValue.put("productStoreId", getProductStoreId());
        mapValue.put("defaultDaysToShip", getDefaultDaysToShip());
        mapValue.put("openedDate", getOpenedDate());
        mapValue.put("closedDate", getClosedDate());
        mapValue.put("description", getDescription());
        mapValue.put("defaultWeightUomId", getDefaultWeightUomId());
        mapValue.put("geoPointId", getGeoPointId());
        mapValue.put("lastUpdatedStamp", getLastUpdatedStamp());
        mapValue.put("lastUpdatedTxStamp", getLastUpdatedTxStamp());
        mapValue.put("createdStamp", getCreatedStamp());
        mapValue.put("createdTxStamp", getCreatedTxStamp());
        mapValue.put("inventoryReserveOrderEnumId", getInventoryReserveOrderEnumId());
        return mapValue;
    }


}
