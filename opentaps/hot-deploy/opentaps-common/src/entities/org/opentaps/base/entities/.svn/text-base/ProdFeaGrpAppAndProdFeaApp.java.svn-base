package org.opentaps.base.entities;

/*
 * Copyright (c) Open Source Strategies, Inc.
 *
 * Opentaps is free software: you can redistribute it and/or modify it
 * under the terms of the GNU Affero General Public License as published
 * by the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Opentaps is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with Opentaps.  If not, see <http://www.gnu.org/licenses/>.
 */

// DO NOT EDIT THIS FILE!  THIS IS AUTO GENERATED AND WILL GET WRITTEN OVER PERIODICALLY WHEN THE DATA MODEL CHANGES
// EXTEND THIS CLASS INSTEAD.

import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;

import javolution.util.FastMap;

import org.opentaps.foundation.entity.Entity;
import org.opentaps.foundation.entity.EntityFieldInterface;
import org.opentaps.foundation.repository.RepositoryException;
import org.opentaps.foundation.repository.RepositoryInterface;
import javax.persistence.*;
import org.hibernate.search.annotations.*;
import java.lang.Long;
import java.lang.String;
import java.math.BigDecimal;
import java.sql.Timestamp;

/**
 * Auto generated base entity ProdFeaGrpAppAndProdFeaApp.
 */
@javax.persistence.Entity
@NamedNativeQuery(name="selectProdFeaGrpAppAndProdFeaApps", query="SELECT PFGA.PRODUCT_FEATURE_GROUP_ID AS \"productFeatureGroupId\",PFGA.PRODUCT_FEATURE_ID AS \"productFeatureId\",PFA.FROM_DATE AS \"fromDate\",PFA.THRU_DATE AS \"thruDate\",PFA.PRODUCT_ID AS \"productId\",PFA.PRODUCT_FEATURE_APPL_TYPE_ID AS \"productFeatureApplTypeId\",PFA.FROM_DATE AS \"fromDate\",PFA.THRU_DATE AS \"thruDate\",PFA.SEQUENCE_NUM AS \"sequenceNum\",PFA.AMOUNT AS \"amount\",PFA.RECURRING_AMOUNT AS \"recurringAmount\" FROM PRODUCT_FEATURE_GROUP_APPL PFGA INNER JOIN PRODUCT_FEATURE_APPL PFA ON PFGA.PRODUCT_FEATURE_ID = PFA.PRODUCT_FEATURE_ID", resultSetMapping="ProdFeaGrpAppAndProdFeaAppMapping")
@SqlResultSetMapping(name="ProdFeaGrpAppAndProdFeaAppMapping", entities={
@EntityResult(entityClass=ProdFeaGrpAppAndProdFeaApp.class, fields = {
@FieldResult(name="productFeatureGroupId", column="productFeatureGroupId")
,@FieldResult(name="productFeatureId", column="productFeatureId")
,@FieldResult(name="groupFromDate", column="groupFromDate")
,@FieldResult(name="groupThruDate", column="groupThruDate")
,@FieldResult(name="productId", column="productId")
,@FieldResult(name="productFeatureApplTypeId", column="productFeatureApplTypeId")
,@FieldResult(name="fromDate", column="fromDate")
,@FieldResult(name="thruDate", column="thruDate")
,@FieldResult(name="sequenceNum", column="sequenceNum")
,@FieldResult(name="amount", column="amount")
,@FieldResult(name="recurringAmount", column="recurringAmount")
})})
@org.hibernate.annotations.Entity(mutable = false)
@org.hibernate.annotations.AccessType("field")
public class ProdFeaGrpAppAndProdFeaApp extends Entity {
static {
java.util.Map<String, String> fields = new java.util.HashMap<String, String>();
        fields.put("productFeatureGroupId", "PFGA.PRODUCT_FEATURE_GROUP_ID");
        fields.put("productFeatureId", "PFGA.PRODUCT_FEATURE_ID");
        fields.put("groupFromDate", "PFA.FROM_DATE");
        fields.put("groupThruDate", "PFA.THRU_DATE");
        fields.put("productId", "PFA.PRODUCT_ID");
        fields.put("productFeatureApplTypeId", "PFA.PRODUCT_FEATURE_APPL_TYPE_ID");
        fields.put("fromDate", "PFA.FROM_DATE");
        fields.put("thruDate", "PFA.THRU_DATE");
        fields.put("sequenceNum", "PFA.SEQUENCE_NUM");
        fields.put("amount", "PFA.AMOUNT");
        fields.put("recurringAmount", "PFA.RECURRING_AMOUNT");
fieldMapColumns.put("ProdFeaGrpAppAndProdFeaApp", fields);
}
  public static enum Fields implements EntityFieldInterface<ProdFeaGrpAppAndProdFeaApp> {
    productFeatureGroupId("productFeatureGroupId"),
    productFeatureId("productFeatureId"),
    groupFromDate("groupFromDate"),
    groupThruDate("groupThruDate"),
    productId("productId"),
    productFeatureApplTypeId("productFeatureApplTypeId"),
    fromDate("fromDate"),
    thruDate("thruDate"),
    sequenceNum("sequenceNum"),
    amount("amount"),
    recurringAmount("recurringAmount");
    private final String fieldName;
    private Fields(String name) { fieldName = name; }
    /** {@inheritDoc} */
    public String getName() { return fieldName; }
    /** {@inheritDoc} */
    public String asc() { return fieldName + " ASC"; }
    /** {@inheritDoc} */
    public String desc() { return fieldName + " DESC"; }
  }

    @Id
   private String productFeatureGroupId;
    
   private String productFeatureId;
    
   private Timestamp groupFromDate;
    
   private Timestamp groupThruDate;
    
   private String productId;
    
   private String productFeatureApplTypeId;
    
   private Timestamp fromDate;
    
   private Timestamp thruDate;
    
   private Long sequenceNum;
    
   private BigDecimal amount;
    
   private BigDecimal recurringAmount;

  /**
   * Default constructor.
   */
  public ProdFeaGrpAppAndProdFeaApp() {
      super();
      this.baseEntityName = "ProdFeaGrpAppAndProdFeaApp";
      this.isView = true;
      
      this.primaryKeyNames = new ArrayList<String>();
      this.primaryKeyNames.add("productFeatureGroupId");this.primaryKeyNames.add("productFeatureId");this.primaryKeyNames.add("groupFromDate");this.primaryKeyNames.add("productId");this.primaryKeyNames.add("fromDate");
      this.allFieldsNames = new ArrayList<String>();
      this.allFieldsNames.add("productFeatureGroupId");this.allFieldsNames.add("productFeatureId");this.allFieldsNames.add("groupFromDate");this.allFieldsNames.add("groupThruDate");this.allFieldsNames.add("productId");this.allFieldsNames.add("productFeatureApplTypeId");this.allFieldsNames.add("fromDate");this.allFieldsNames.add("thruDate");this.allFieldsNames.add("sequenceNum");this.allFieldsNames.add("amount");this.allFieldsNames.add("recurringAmount");
      this.nonPrimaryKeyNames = new ArrayList<String>();
      this.nonPrimaryKeyNames.addAll(allFieldsNames);
      this.nonPrimaryKeyNames.removeAll(primaryKeyNames);
  }

  /**
   * Constructor with a repository.
   * @param repository a <code>RepositoryInterface</code> value
   */
  public ProdFeaGrpAppAndProdFeaApp(RepositoryInterface repository) {
      this();
      initRepository(repository);
  }

    /**
     * This is a view-entity, so the setter methods will be private to this class and for use in its fromMap constructor only
     */
    /**
     * Auto generated value setter.
     * @param productFeatureGroupId the productFeatureGroupId to set
     */
    public void setProductFeatureGroupId(String productFeatureGroupId) {
        this.productFeatureGroupId = productFeatureGroupId;
    }
    /**
     * Auto generated value setter.
     * @param productFeatureId the productFeatureId to set
     */
    public void setProductFeatureId(String productFeatureId) {
        this.productFeatureId = productFeatureId;
    }
    /**
     * Auto generated value setter.
     * @param groupFromDate the groupFromDate to set
     */
    public void setGroupFromDate(Timestamp groupFromDate) {
        this.groupFromDate = groupFromDate;
    }
    /**
     * Auto generated value setter.
     * @param groupThruDate the groupThruDate to set
     */
    public void setGroupThruDate(Timestamp groupThruDate) {
        this.groupThruDate = groupThruDate;
    }
    /**
     * Auto generated value setter.
     * @param productId the productId to set
     */
    public void setProductId(String productId) {
        this.productId = productId;
    }
    /**
     * Auto generated value setter.
     * @param productFeatureApplTypeId the productFeatureApplTypeId to set
     */
    public void setProductFeatureApplTypeId(String productFeatureApplTypeId) {
        this.productFeatureApplTypeId = productFeatureApplTypeId;
    }
    /**
     * Auto generated value setter.
     * @param fromDate the fromDate to set
     */
    public void setFromDate(Timestamp fromDate) {
        this.fromDate = fromDate;
    }
    /**
     * Auto generated value setter.
     * @param thruDate the thruDate to set
     */
    public void setThruDate(Timestamp thruDate) {
        this.thruDate = thruDate;
    }
    /**
     * Auto generated value setter.
     * @param sequenceNum the sequenceNum to set
     */
    public void setSequenceNum(Long sequenceNum) {
        this.sequenceNum = sequenceNum;
    }
    /**
     * Auto generated value setter.
     * @param amount the amount to set
     */
    public void setAmount(BigDecimal amount) {
        this.amount = amount;
    }
    /**
     * Auto generated value setter.
     * @param recurringAmount the recurringAmount to set
     */
    public void setRecurringAmount(BigDecimal recurringAmount) {
        this.recurringAmount = recurringAmount;
    }

    /**
     * Auto generated value accessor.
     * @return <code>String</code>
     */
    public String getProductFeatureGroupId() {
        return this.productFeatureGroupId;
    }
    /**
     * Auto generated value accessor.
     * @return <code>String</code>
     */
    public String getProductFeatureId() {
        return this.productFeatureId;
    }
    /**
     * Auto generated value accessor.
     * @return <code>Timestamp</code>
     */
    public Timestamp getGroupFromDate() {
        return this.groupFromDate;
    }
    /**
     * Auto generated value accessor.
     * @return <code>Timestamp</code>
     */
    public Timestamp getGroupThruDate() {
        return this.groupThruDate;
    }
    /**
     * Auto generated value accessor.
     * @return <code>String</code>
     */
    public String getProductId() {
        return this.productId;
    }
    /**
     * Auto generated value accessor.
     * @return <code>String</code>
     */
    public String getProductFeatureApplTypeId() {
        return this.productFeatureApplTypeId;
    }
    /**
     * Auto generated value accessor.
     * @return <code>Timestamp</code>
     */
    public Timestamp getFromDate() {
        return this.fromDate;
    }
    /**
     * Auto generated value accessor.
     * @return <code>Timestamp</code>
     */
    public Timestamp getThruDate() {
        return this.thruDate;
    }
    /**
     * Auto generated value accessor.
     * @return <code>Long</code>
     */
    public Long getSequenceNum() {
        return this.sequenceNum;
    }
    /**
     * Auto generated value accessor.
     * @return <code>BigDecimal</code>
     */
    public BigDecimal getAmount() {
        return this.amount;
    }
    /**
     * Auto generated value accessor.
     * @return <code>BigDecimal</code>
     */
    public BigDecimal getRecurringAmount() {
        return this.recurringAmount;
    }




    /** {@inheritDoc} */
    @Override
    public void fromMap(Map<String, Object> mapValue) {
        preInit();
        setProductFeatureGroupId((String) mapValue.get("productFeatureGroupId"));
        setProductFeatureId((String) mapValue.get("productFeatureId"));
        setGroupFromDate((Timestamp) mapValue.get("groupFromDate"));
        setGroupThruDate((Timestamp) mapValue.get("groupThruDate"));
        setProductId((String) mapValue.get("productId"));
        setProductFeatureApplTypeId((String) mapValue.get("productFeatureApplTypeId"));
        setFromDate((Timestamp) mapValue.get("fromDate"));
        setThruDate((Timestamp) mapValue.get("thruDate"));
        setSequenceNum((Long) mapValue.get("sequenceNum"));
        setAmount(convertToBigDecimal(mapValue.get("amount")));
        setRecurringAmount(convertToBigDecimal(mapValue.get("recurringAmount")));
        postInit();
    }

    /** {@inheritDoc} */
    @Override
    public Map<String, Object> toMap() {
        Map<String, Object> mapValue = new FastMap<String, Object>();
        mapValue.put("productFeatureGroupId", getProductFeatureGroupId());
        mapValue.put("productFeatureId", getProductFeatureId());
        mapValue.put("groupFromDate", getGroupFromDate());
        mapValue.put("groupThruDate", getGroupThruDate());
        mapValue.put("productId", getProductId());
        mapValue.put("productFeatureApplTypeId", getProductFeatureApplTypeId());
        mapValue.put("fromDate", getFromDate());
        mapValue.put("thruDate", getThruDate());
        mapValue.put("sequenceNum", getSequenceNum());
        mapValue.put("amount", getAmount());
        mapValue.put("recurringAmount", getRecurringAmount());
        return mapValue;
    }


}
