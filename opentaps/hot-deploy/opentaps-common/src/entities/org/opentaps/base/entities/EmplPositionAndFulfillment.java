package org.opentaps.base.entities;

/*
 * Copyright (c) Open Source Strategies, Inc.
 *
 * Opentaps is free software: you can redistribute it and/or modify it
 * under the terms of the GNU Affero General Public License as published
 * by the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Opentaps is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with Opentaps.  If not, see <http://www.gnu.org/licenses/>.
 */

// DO NOT EDIT THIS FILE!  THIS IS AUTO GENERATED AND WILL GET WRITTEN OVER PERIODICALLY WHEN THE DATA MODEL CHANGES
// EXTEND THIS CLASS INSTEAD.

import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;

import javolution.util.FastMap;

import org.opentaps.foundation.entity.Entity;
import org.opentaps.foundation.entity.EntityFieldInterface;
import org.opentaps.foundation.repository.RepositoryException;
import org.opentaps.foundation.repository.RepositoryInterface;
import javax.persistence.*;
import org.hibernate.search.annotations.*;
import java.lang.String;
import java.sql.Timestamp;

/**
 * Auto generated base entity EmplPositionAndFulfillment.
 */
@javax.persistence.Entity
@NamedNativeQuery(name="selectEmplPositionAndFulfillments", query="SELECT EPF.PARTY_ID AS \"partyId\",EPF.FROM_DATE AS \"fromDate\",EPF.THRU_DATE AS \"thruDate\",EMPPOS.EMPL_POSITION_ID AS \"emplPositionId\",EMPPOS.STATUS_ID AS \"statusId\",EMPPOS.PARTY_ID AS \"partyId\",EMPPOS.BUDGET_ID AS \"budgetId\",EMPPOS.BUDGET_ITEM_SEQ_ID AS \"budgetItemSeqId\",EMPPOS.EMPL_POSITION_TYPE_ID AS \"emplPositionTypeId\",EMPPOS.ESTIMATED_FROM_DATE AS \"estimatedFromDate\",EMPPOS.ESTIMATED_THRU_DATE AS \"estimatedThruDate\",EMPPOS.SALARY_FLAG AS \"salaryFlag\",EMPPOS.EXEMPT_FLAG AS \"exemptFlag\",EMPPOS.FULLTIME_FLAG AS \"fulltimeFlag\",EMPPOS.TEMPORARY_FLAG AS \"temporaryFlag\",EMPPOS.ACTUAL_FROM_DATE AS \"actualFromDate\",EMPPOS.ACTUAL_THRU_DATE AS \"actualThruDate\" FROM EMPL_POSITION EMPPOS INNER JOIN EMPL_POSITION_FULFILLMENT EPF ON EMPPOS.EMPL_POSITION_ID = EPF.EMPL_POSITION_ID", resultSetMapping="EmplPositionAndFulfillmentMapping")
@SqlResultSetMapping(name="EmplPositionAndFulfillmentMapping", entities={
@EntityResult(entityClass=EmplPositionAndFulfillment.class, fields = {
@FieldResult(name="employeePartyId", column="employeePartyId")
,@FieldResult(name="fromDate", column="fromDate")
,@FieldResult(name="thruDate", column="thruDate")
,@FieldResult(name="emplPositionId", column="emplPositionId")
,@FieldResult(name="statusId", column="statusId")
,@FieldResult(name="partyId", column="partyId")
,@FieldResult(name="budgetId", column="budgetId")
,@FieldResult(name="budgetItemSeqId", column="budgetItemSeqId")
,@FieldResult(name="emplPositionTypeId", column="emplPositionTypeId")
,@FieldResult(name="estimatedFromDate", column="estimatedFromDate")
,@FieldResult(name="estimatedThruDate", column="estimatedThruDate")
,@FieldResult(name="salaryFlag", column="salaryFlag")
,@FieldResult(name="exemptFlag", column="exemptFlag")
,@FieldResult(name="fulltimeFlag", column="fulltimeFlag")
,@FieldResult(name="temporaryFlag", column="temporaryFlag")
,@FieldResult(name="actualFromDate", column="actualFromDate")
,@FieldResult(name="actualThruDate", column="actualThruDate")
})})
@org.hibernate.annotations.Entity(mutable = false)
@org.hibernate.annotations.AccessType("field")
public class EmplPositionAndFulfillment extends Entity {
static {
java.util.Map<String, String> fields = new java.util.HashMap<String, String>();
        fields.put("employeePartyId", "EPF.PARTY_ID");
        fields.put("fromDate", "EPF.FROM_DATE");
        fields.put("thruDate", "EPF.THRU_DATE");
        fields.put("emplPositionId", "EMPPOS.EMPL_POSITION_ID");
        fields.put("statusId", "EMPPOS.STATUS_ID");
        fields.put("partyId", "EMPPOS.PARTY_ID");
        fields.put("budgetId", "EMPPOS.BUDGET_ID");
        fields.put("budgetItemSeqId", "EMPPOS.BUDGET_ITEM_SEQ_ID");
        fields.put("emplPositionTypeId", "EMPPOS.EMPL_POSITION_TYPE_ID");
        fields.put("estimatedFromDate", "EMPPOS.ESTIMATED_FROM_DATE");
        fields.put("estimatedThruDate", "EMPPOS.ESTIMATED_THRU_DATE");
        fields.put("salaryFlag", "EMPPOS.SALARY_FLAG");
        fields.put("exemptFlag", "EMPPOS.EXEMPT_FLAG");
        fields.put("fulltimeFlag", "EMPPOS.FULLTIME_FLAG");
        fields.put("temporaryFlag", "EMPPOS.TEMPORARY_FLAG");
        fields.put("actualFromDate", "EMPPOS.ACTUAL_FROM_DATE");
        fields.put("actualThruDate", "EMPPOS.ACTUAL_THRU_DATE");
fieldMapColumns.put("EmplPositionAndFulfillment", fields);
}
  public static enum Fields implements EntityFieldInterface<EmplPositionAndFulfillment> {
    employeePartyId("employeePartyId"),
    fromDate("fromDate"),
    thruDate("thruDate"),
    emplPositionId("emplPositionId"),
    statusId("statusId"),
    partyId("partyId"),
    budgetId("budgetId"),
    budgetItemSeqId("budgetItemSeqId"),
    emplPositionTypeId("emplPositionTypeId"),
    estimatedFromDate("estimatedFromDate"),
    estimatedThruDate("estimatedThruDate"),
    salaryFlag("salaryFlag"),
    exemptFlag("exemptFlag"),
    fulltimeFlag("fulltimeFlag"),
    temporaryFlag("temporaryFlag"),
    actualFromDate("actualFromDate"),
    actualThruDate("actualThruDate");
    private final String fieldName;
    private Fields(String name) { fieldName = name; }
    /** {@inheritDoc} */
    public String getName() { return fieldName; }
    /** {@inheritDoc} */
    public String asc() { return fieldName + " ASC"; }
    /** {@inheritDoc} */
    public String desc() { return fieldName + " DESC"; }
  }

    
   private String employeePartyId;
    
   private Timestamp fromDate;
    
   private Timestamp thruDate;
    @Id
   private String emplPositionId;
    
   private String statusId;
    
   private String partyId;
    
   private String budgetId;
    
   private String budgetItemSeqId;
    
   private String emplPositionTypeId;
    
   private Timestamp estimatedFromDate;
    
   private Timestamp estimatedThruDate;
    
   private String salaryFlag;
    
   private String exemptFlag;
    
   private String fulltimeFlag;
    
   private String temporaryFlag;
    
   private Timestamp actualFromDate;
    
   private Timestamp actualThruDate;
   @ManyToOne(cascade = {CascadeType.PERSIST, CascadeType.MERGE}, fetch=FetchType.LAZY)
   @JoinColumn(name="EMPL_POSITION_TYPE_ID", insertable=false, updatable=false)
   @org.hibernate.annotations.Generated(
      org.hibernate.annotations.GenerationTime.ALWAYS
   )
   
   private EmplPositionType emplPositionType = null;

  /**
   * Default constructor.
   */
  public EmplPositionAndFulfillment() {
      super();
      this.baseEntityName = "EmplPositionAndFulfillment";
      this.isView = true;
      
      this.primaryKeyNames = new ArrayList<String>();
      this.primaryKeyNames.add("employeePartyId");this.primaryKeyNames.add("fromDate");this.primaryKeyNames.add("emplPositionId");
      this.allFieldsNames = new ArrayList<String>();
      this.allFieldsNames.add("employeePartyId");this.allFieldsNames.add("fromDate");this.allFieldsNames.add("thruDate");this.allFieldsNames.add("emplPositionId");this.allFieldsNames.add("statusId");this.allFieldsNames.add("partyId");this.allFieldsNames.add("budgetId");this.allFieldsNames.add("budgetItemSeqId");this.allFieldsNames.add("emplPositionTypeId");this.allFieldsNames.add("estimatedFromDate");this.allFieldsNames.add("estimatedThruDate");this.allFieldsNames.add("salaryFlag");this.allFieldsNames.add("exemptFlag");this.allFieldsNames.add("fulltimeFlag");this.allFieldsNames.add("temporaryFlag");this.allFieldsNames.add("actualFromDate");this.allFieldsNames.add("actualThruDate");
      this.nonPrimaryKeyNames = new ArrayList<String>();
      this.nonPrimaryKeyNames.addAll(allFieldsNames);
      this.nonPrimaryKeyNames.removeAll(primaryKeyNames);
  }

  /**
   * Constructor with a repository.
   * @param repository a <code>RepositoryInterface</code> value
   */
  public EmplPositionAndFulfillment(RepositoryInterface repository) {
      this();
      initRepository(repository);
  }

    /**
     * This is a view-entity, so the setter methods will be private to this class and for use in its fromMap constructor only
     */
    /**
     * Auto generated value setter.
     * @param employeePartyId the employeePartyId to set
     */
    public void setEmployeePartyId(String employeePartyId) {
        this.employeePartyId = employeePartyId;
    }
    /**
     * Auto generated value setter.
     * @param fromDate the fromDate to set
     */
    public void setFromDate(Timestamp fromDate) {
        this.fromDate = fromDate;
    }
    /**
     * Auto generated value setter.
     * @param thruDate the thruDate to set
     */
    public void setThruDate(Timestamp thruDate) {
        this.thruDate = thruDate;
    }
    /**
     * Auto generated value setter.
     * @param emplPositionId the emplPositionId to set
     */
    public void setEmplPositionId(String emplPositionId) {
        this.emplPositionId = emplPositionId;
    }
    /**
     * Auto generated value setter.
     * @param statusId the statusId to set
     */
    public void setStatusId(String statusId) {
        this.statusId = statusId;
    }
    /**
     * Auto generated value setter.
     * @param partyId the partyId to set
     */
    public void setPartyId(String partyId) {
        this.partyId = partyId;
    }
    /**
     * Auto generated value setter.
     * @param budgetId the budgetId to set
     */
    public void setBudgetId(String budgetId) {
        this.budgetId = budgetId;
    }
    /**
     * Auto generated value setter.
     * @param budgetItemSeqId the budgetItemSeqId to set
     */
    public void setBudgetItemSeqId(String budgetItemSeqId) {
        this.budgetItemSeqId = budgetItemSeqId;
    }
    /**
     * Auto generated value setter.
     * @param emplPositionTypeId the emplPositionTypeId to set
     */
    public void setEmplPositionTypeId(String emplPositionTypeId) {
        this.emplPositionTypeId = emplPositionTypeId;
    }
    /**
     * Auto generated value setter.
     * @param estimatedFromDate the estimatedFromDate to set
     */
    public void setEstimatedFromDate(Timestamp estimatedFromDate) {
        this.estimatedFromDate = estimatedFromDate;
    }
    /**
     * Auto generated value setter.
     * @param estimatedThruDate the estimatedThruDate to set
     */
    public void setEstimatedThruDate(Timestamp estimatedThruDate) {
        this.estimatedThruDate = estimatedThruDate;
    }
    /**
     * Auto generated value setter.
     * @param salaryFlag the salaryFlag to set
     */
    public void setSalaryFlag(String salaryFlag) {
        this.salaryFlag = salaryFlag;
    }
    /**
     * Auto generated value setter.
     * @param exemptFlag the exemptFlag to set
     */
    public void setExemptFlag(String exemptFlag) {
        this.exemptFlag = exemptFlag;
    }
    /**
     * Auto generated value setter.
     * @param fulltimeFlag the fulltimeFlag to set
     */
    public void setFulltimeFlag(String fulltimeFlag) {
        this.fulltimeFlag = fulltimeFlag;
    }
    /**
     * Auto generated value setter.
     * @param temporaryFlag the temporaryFlag to set
     */
    public void setTemporaryFlag(String temporaryFlag) {
        this.temporaryFlag = temporaryFlag;
    }
    /**
     * Auto generated value setter.
     * @param actualFromDate the actualFromDate to set
     */
    public void setActualFromDate(Timestamp actualFromDate) {
        this.actualFromDate = actualFromDate;
    }
    /**
     * Auto generated value setter.
     * @param actualThruDate the actualThruDate to set
     */
    public void setActualThruDate(Timestamp actualThruDate) {
        this.actualThruDate = actualThruDate;
    }

    /**
     * Auto generated value accessor.
     * @return <code>String</code>
     */
    public String getEmployeePartyId() {
        return this.employeePartyId;
    }
    /**
     * Auto generated value accessor.
     * @return <code>Timestamp</code>
     */
    public Timestamp getFromDate() {
        return this.fromDate;
    }
    /**
     * Auto generated value accessor.
     * @return <code>Timestamp</code>
     */
    public Timestamp getThruDate() {
        return this.thruDate;
    }
    /**
     * Auto generated value accessor.
     * @return <code>String</code>
     */
    public String getEmplPositionId() {
        return this.emplPositionId;
    }
    /**
     * Auto generated value accessor.
     * @return <code>String</code>
     */
    public String getStatusId() {
        return this.statusId;
    }
    /**
     * Auto generated value accessor.
     * @return <code>String</code>
     */
    public String getPartyId() {
        return this.partyId;
    }
    /**
     * Auto generated value accessor.
     * @return <code>String</code>
     */
    public String getBudgetId() {
        return this.budgetId;
    }
    /**
     * Auto generated value accessor.
     * @return <code>String</code>
     */
    public String getBudgetItemSeqId() {
        return this.budgetItemSeqId;
    }
    /**
     * Auto generated value accessor.
     * @return <code>String</code>
     */
    public String getEmplPositionTypeId() {
        return this.emplPositionTypeId;
    }
    /**
     * Auto generated value accessor.
     * @return <code>Timestamp</code>
     */
    public Timestamp getEstimatedFromDate() {
        return this.estimatedFromDate;
    }
    /**
     * Auto generated value accessor.
     * @return <code>Timestamp</code>
     */
    public Timestamp getEstimatedThruDate() {
        return this.estimatedThruDate;
    }
    /**
     * Auto generated value accessor.
     * @return <code>String</code>
     */
    public String getSalaryFlag() {
        return this.salaryFlag;
    }
    /**
     * Auto generated value accessor.
     * @return <code>String</code>
     */
    public String getExemptFlag() {
        return this.exemptFlag;
    }
    /**
     * Auto generated value accessor.
     * @return <code>String</code>
     */
    public String getFulltimeFlag() {
        return this.fulltimeFlag;
    }
    /**
     * Auto generated value accessor.
     * @return <code>String</code>
     */
    public String getTemporaryFlag() {
        return this.temporaryFlag;
    }
    /**
     * Auto generated value accessor.
     * @return <code>Timestamp</code>
     */
    public Timestamp getActualFromDate() {
        return this.actualFromDate;
    }
    /**
     * Auto generated value accessor.
     * @return <code>Timestamp</code>
     */
    public Timestamp getActualThruDate() {
        return this.actualThruDate;
    }

    /**
     * Auto generated method that gets the related <code>EmplPositionType</code> by the relation named <code>EmplPositionType</code>.
     * @return the <code>EmplPositionType</code>
     * @throws RepositoryException if an error occurs
     */
    public EmplPositionType getEmplPositionType() throws RepositoryException {
        if (this.emplPositionType == null) {
            this.emplPositionType = getRelatedOne(EmplPositionType.class, "EmplPositionType");
        }
        return this.emplPositionType;
    }

    /**
     * Auto generated value setter.
     * @param emplPositionType the emplPositionType to set
    */
    public void setEmplPositionType(EmplPositionType emplPositionType) {
        this.emplPositionType = emplPositionType;
    }


    /** {@inheritDoc} */
    @Override
    public void fromMap(Map<String, Object> mapValue) {
        preInit();
        setEmployeePartyId((String) mapValue.get("employeePartyId"));
        setFromDate((Timestamp) mapValue.get("fromDate"));
        setThruDate((Timestamp) mapValue.get("thruDate"));
        setEmplPositionId((String) mapValue.get("emplPositionId"));
        setStatusId((String) mapValue.get("statusId"));
        setPartyId((String) mapValue.get("partyId"));
        setBudgetId((String) mapValue.get("budgetId"));
        setBudgetItemSeqId((String) mapValue.get("budgetItemSeqId"));
        setEmplPositionTypeId((String) mapValue.get("emplPositionTypeId"));
        setEstimatedFromDate((Timestamp) mapValue.get("estimatedFromDate"));
        setEstimatedThruDate((Timestamp) mapValue.get("estimatedThruDate"));
        setSalaryFlag((String) mapValue.get("salaryFlag"));
        setExemptFlag((String) mapValue.get("exemptFlag"));
        setFulltimeFlag((String) mapValue.get("fulltimeFlag"));
        setTemporaryFlag((String) mapValue.get("temporaryFlag"));
        setActualFromDate((Timestamp) mapValue.get("actualFromDate"));
        setActualThruDate((Timestamp) mapValue.get("actualThruDate"));
        postInit();
    }

    /** {@inheritDoc} */
    @Override
    public Map<String, Object> toMap() {
        Map<String, Object> mapValue = new FastMap<String, Object>();
        mapValue.put("employeePartyId", getEmployeePartyId());
        mapValue.put("fromDate", getFromDate());
        mapValue.put("thruDate", getThruDate());
        mapValue.put("emplPositionId", getEmplPositionId());
        mapValue.put("statusId", getStatusId());
        mapValue.put("partyId", getPartyId());
        mapValue.put("budgetId", getBudgetId());
        mapValue.put("budgetItemSeqId", getBudgetItemSeqId());
        mapValue.put("emplPositionTypeId", getEmplPositionTypeId());
        mapValue.put("estimatedFromDate", getEstimatedFromDate());
        mapValue.put("estimatedThruDate", getEstimatedThruDate());
        mapValue.put("salaryFlag", getSalaryFlag());
        mapValue.put("exemptFlag", getExemptFlag());
        mapValue.put("fulltimeFlag", getFulltimeFlag());
        mapValue.put("temporaryFlag", getTemporaryFlag());
        mapValue.put("actualFromDate", getActualFromDate());
        mapValue.put("actualThruDate", getActualThruDate());
        return mapValue;
    }


}
