package org.opentaps.base.entities;

/*
 * Copyright (c) Open Source Strategies, Inc.
 *
 * Opentaps is free software: you can redistribute it and/or modify it
 * under the terms of the GNU Affero General Public License as published
 * by the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Opentaps is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with Opentaps.  If not, see <http://www.gnu.org/licenses/>.
 */

// DO NOT EDIT THIS FILE!  THIS IS AUTO GENERATED AND WILL GET WRITTEN OVER PERIODICALLY WHEN THE DATA MODEL CHANGES
// EXTEND THIS CLASS INSTEAD.

import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;

import javolution.util.FastMap;

import org.opentaps.foundation.entity.Entity;
import org.opentaps.foundation.entity.EntityFieldInterface;
import org.opentaps.foundation.repository.RepositoryException;
import org.opentaps.foundation.repository.RepositoryInterface;
import javax.persistence.*;
import org.hibernate.search.annotations.*;
import java.lang.String;

/**
 * Auto generated base entity ViewPrefAndLocation.
 */
@javax.persistence.Entity
@NamedNativeQuery(name="selectViewPrefAndLocations", query="SELECT VP.VIEW_PREF_TYPE_ID AS \"viewPrefTypeId\",VP.USER_LOGIN_ID AS \"userLoginId\",VP.VIEW_PREF_VALUE_TYPE_ID AS \"viewPrefValueTypeId\",VP.VIEW_PREF_ENUM_ID AS \"viewPrefEnumId\",VP.VIEW_PREF_STRING AS \"viewPrefString\",VPT.DESCRIPTION AS \"description\",VPT.APPLICATION AS \"application\",VPT.APPLICATION_SECTION AS \"applicationSection\",VPT.SCREEN_NAME AS \"screenName\",VPT.FORM_NAME AS \"formName\",VPT.DOM_ID AS \"domId\" FROM VIEW_PREFERENCE VP INNER JOIN VIEW_PREF_TYPE VPT ON VP.VIEW_PREF_TYPE_ID = VPT.VIEW_PREF_TYPE_ID", resultSetMapping="ViewPrefAndLocationMapping")
@SqlResultSetMapping(name="ViewPrefAndLocationMapping", entities={
@EntityResult(entityClass=ViewPrefAndLocation.class, fields = {
@FieldResult(name="viewPrefTypeId", column="viewPrefTypeId")
,@FieldResult(name="userLoginId", column="userLoginId")
,@FieldResult(name="viewPrefValueTypeId", column="viewPrefValueTypeId")
,@FieldResult(name="viewPrefEnumId", column="viewPrefEnumId")
,@FieldResult(name="viewPrefString", column="viewPrefString")
,@FieldResult(name="description", column="description")
,@FieldResult(name="application", column="application")
,@FieldResult(name="applicationSection", column="applicationSection")
,@FieldResult(name="screenName", column="screenName")
,@FieldResult(name="formName", column="formName")
,@FieldResult(name="domId", column="domId")
})})
@org.hibernate.annotations.Entity(mutable = false)
@org.hibernate.annotations.AccessType("field")
public class ViewPrefAndLocation extends Entity {
static {
java.util.Map<String, String> fields = new java.util.HashMap<String, String>();
        fields.put("viewPrefTypeId", "VP.VIEW_PREF_TYPE_ID");
        fields.put("userLoginId", "VP.USER_LOGIN_ID");
        fields.put("viewPrefValueTypeId", "VP.VIEW_PREF_VALUE_TYPE_ID");
        fields.put("viewPrefEnumId", "VP.VIEW_PREF_ENUM_ID");
        fields.put("viewPrefString", "VP.VIEW_PREF_STRING");
        fields.put("description", "VPT.DESCRIPTION");
        fields.put("application", "VPT.APPLICATION");
        fields.put("applicationSection", "VPT.APPLICATION_SECTION");
        fields.put("screenName", "VPT.SCREEN_NAME");
        fields.put("formName", "VPT.FORM_NAME");
        fields.put("domId", "VPT.DOM_ID");
fieldMapColumns.put("ViewPrefAndLocation", fields);
}
  public static enum Fields implements EntityFieldInterface<ViewPrefAndLocation> {
    viewPrefTypeId("viewPrefTypeId"),
    userLoginId("userLoginId"),
    viewPrefValueTypeId("viewPrefValueTypeId"),
    viewPrefEnumId("viewPrefEnumId"),
    viewPrefString("viewPrefString"),
    description("description"),
    application("application"),
    applicationSection("applicationSection"),
    screenName("screenName"),
    formName("formName"),
    domId("domId");
    private final String fieldName;
    private Fields(String name) { fieldName = name; }
    /** {@inheritDoc} */
    public String getName() { return fieldName; }
    /** {@inheritDoc} */
    public String asc() { return fieldName + " ASC"; }
    /** {@inheritDoc} */
    public String desc() { return fieldName + " DESC"; }
  }

    @Id
   private String viewPrefTypeId;
    
   private String userLoginId;
    
   private String viewPrefValueTypeId;
    
   private String viewPrefEnumId;
    
   private String viewPrefString;
    
   private String description;
    
   private String application;
    
   private String applicationSection;
    
   private String screenName;
    
   private String formName;
    
   private String domId;
   private transient ViewPreference viewPreference = null;
   @ManyToOne(cascade = {CascadeType.PERSIST, CascadeType.MERGE}, fetch=FetchType.LAZY)
   @JoinColumn(name="VIEW_PREF_TYPE_ID", insertable=false, updatable=false)
   @org.hibernate.annotations.Generated(
      org.hibernate.annotations.GenerationTime.ALWAYS
   )
   
   private ViewPrefType viewPrefType = null;
   @ManyToOne(cascade = {CascadeType.PERSIST, CascadeType.MERGE}, fetch=FetchType.LAZY)
   @JoinColumn(name="USER_LOGIN_ID", insertable=false, updatable=false)
   @org.hibernate.annotations.Generated(
      org.hibernate.annotations.GenerationTime.ALWAYS
   )
   
   private UserLogin userLogin = null;

  /**
   * Default constructor.
   */
  public ViewPrefAndLocation() {
      super();
      this.baseEntityName = "ViewPrefAndLocation";
      this.isView = true;
      
      this.primaryKeyNames = new ArrayList<String>();
      this.primaryKeyNames.add("viewPrefTypeId");this.primaryKeyNames.add("userLoginId");
      this.allFieldsNames = new ArrayList<String>();
      this.allFieldsNames.add("viewPrefTypeId");this.allFieldsNames.add("userLoginId");this.allFieldsNames.add("viewPrefValueTypeId");this.allFieldsNames.add("viewPrefEnumId");this.allFieldsNames.add("viewPrefString");this.allFieldsNames.add("description");this.allFieldsNames.add("application");this.allFieldsNames.add("applicationSection");this.allFieldsNames.add("screenName");this.allFieldsNames.add("formName");this.allFieldsNames.add("domId");
      this.nonPrimaryKeyNames = new ArrayList<String>();
      this.nonPrimaryKeyNames.addAll(allFieldsNames);
      this.nonPrimaryKeyNames.removeAll(primaryKeyNames);
  }

  /**
   * Constructor with a repository.
   * @param repository a <code>RepositoryInterface</code> value
   */
  public ViewPrefAndLocation(RepositoryInterface repository) {
      this();
      initRepository(repository);
  }

    /**
     * This is a view-entity, so the setter methods will be private to this class and for use in its fromMap constructor only
     */
    /**
     * Auto generated value setter.
     * @param viewPrefTypeId the viewPrefTypeId to set
     */
    public void setViewPrefTypeId(String viewPrefTypeId) {
        this.viewPrefTypeId = viewPrefTypeId;
    }
    /**
     * Auto generated value setter.
     * @param userLoginId the userLoginId to set
     */
    public void setUserLoginId(String userLoginId) {
        this.userLoginId = userLoginId;
    }
    /**
     * Auto generated value setter.
     * @param viewPrefValueTypeId the viewPrefValueTypeId to set
     */
    public void setViewPrefValueTypeId(String viewPrefValueTypeId) {
        this.viewPrefValueTypeId = viewPrefValueTypeId;
    }
    /**
     * Auto generated value setter.
     * @param viewPrefEnumId the viewPrefEnumId to set
     */
    public void setViewPrefEnumId(String viewPrefEnumId) {
        this.viewPrefEnumId = viewPrefEnumId;
    }
    /**
     * Auto generated value setter.
     * @param viewPrefString the viewPrefString to set
     */
    public void setViewPrefString(String viewPrefString) {
        this.viewPrefString = viewPrefString;
    }
    /**
     * Auto generated value setter.
     * @param description the description to set
     */
    public void setDescription(String description) {
        this.description = description;
    }
    /**
     * Auto generated value setter.
     * @param application the application to set
     */
    public void setApplication(String application) {
        this.application = application;
    }
    /**
     * Auto generated value setter.
     * @param applicationSection the applicationSection to set
     */
    public void setApplicationSection(String applicationSection) {
        this.applicationSection = applicationSection;
    }
    /**
     * Auto generated value setter.
     * @param screenName the screenName to set
     */
    public void setScreenName(String screenName) {
        this.screenName = screenName;
    }
    /**
     * Auto generated value setter.
     * @param formName the formName to set
     */
    public void setFormName(String formName) {
        this.formName = formName;
    }
    /**
     * Auto generated value setter.
     * @param domId the domId to set
     */
    public void setDomId(String domId) {
        this.domId = domId;
    }

    /**
     * Auto generated value accessor.
     * @return <code>String</code>
     */
    public String getViewPrefTypeId() {
        return this.viewPrefTypeId;
    }
    /**
     * Auto generated value accessor.
     * @return <code>String</code>
     */
    public String getUserLoginId() {
        return this.userLoginId;
    }
    /**
     * Auto generated value accessor.
     * @return <code>String</code>
     */
    public String getViewPrefValueTypeId() {
        return this.viewPrefValueTypeId;
    }
    /**
     * Auto generated value accessor.
     * @return <code>String</code>
     */
    public String getViewPrefEnumId() {
        return this.viewPrefEnumId;
    }
    /**
     * Auto generated value accessor.
     * @return <code>String</code>
     */
    public String getViewPrefString() {
        return this.viewPrefString;
    }
    /**
     * Auto generated value accessor.
     * @return <code>String</code>
     */
    public String getDescription() {
        return this.description;
    }
    /**
     * Auto generated value accessor.
     * @return <code>String</code>
     */
    public String getApplication() {
        return this.application;
    }
    /**
     * Auto generated value accessor.
     * @return <code>String</code>
     */
    public String getApplicationSection() {
        return this.applicationSection;
    }
    /**
     * Auto generated value accessor.
     * @return <code>String</code>
     */
    public String getScreenName() {
        return this.screenName;
    }
    /**
     * Auto generated value accessor.
     * @return <code>String</code>
     */
    public String getFormName() {
        return this.formName;
    }
    /**
     * Auto generated value accessor.
     * @return <code>String</code>
     */
    public String getDomId() {
        return this.domId;
    }

    /**
     * Auto generated method that gets the related <code>ViewPreference</code> by the relation named <code>ViewPreference</code>.
     * @return the <code>ViewPreference</code>
     * @throws RepositoryException if an error occurs
     */
    public ViewPreference getViewPreference() throws RepositoryException {
        if (this.viewPreference == null) {
            this.viewPreference = getRelatedOne(ViewPreference.class, "ViewPreference");
        }
        return this.viewPreference;
    }
    /**
     * Auto generated method that gets the related <code>ViewPrefType</code> by the relation named <code>ViewPrefType</code>.
     * @return the <code>ViewPrefType</code>
     * @throws RepositoryException if an error occurs
     */
    public ViewPrefType getViewPrefType() throws RepositoryException {
        if (this.viewPrefType == null) {
            this.viewPrefType = getRelatedOne(ViewPrefType.class, "ViewPrefType");
        }
        return this.viewPrefType;
    }
    /**
     * Auto generated method that gets the related <code>UserLogin</code> by the relation named <code>UserLogin</code>.
     * @return the <code>UserLogin</code>
     * @throws RepositoryException if an error occurs
     */
    public UserLogin getUserLogin() throws RepositoryException {
        if (this.userLogin == null) {
            this.userLogin = getRelatedOne(UserLogin.class, "UserLogin");
        }
        return this.userLogin;
    }

    /**
     * Auto generated value setter.
     * @param viewPreference the viewPreference to set
    */
    public void setViewPreference(ViewPreference viewPreference) {
        this.viewPreference = viewPreference;
    }
    /**
     * Auto generated value setter.
     * @param viewPrefType the viewPrefType to set
    */
    public void setViewPrefType(ViewPrefType viewPrefType) {
        this.viewPrefType = viewPrefType;
    }
    /**
     * Auto generated value setter.
     * @param userLogin the userLogin to set
    */
    public void setUserLogin(UserLogin userLogin) {
        this.userLogin = userLogin;
    }


    /** {@inheritDoc} */
    @Override
    public void fromMap(Map<String, Object> mapValue) {
        preInit();
        setViewPrefTypeId((String) mapValue.get("viewPrefTypeId"));
        setUserLoginId((String) mapValue.get("userLoginId"));
        setViewPrefValueTypeId((String) mapValue.get("viewPrefValueTypeId"));
        setViewPrefEnumId((String) mapValue.get("viewPrefEnumId"));
        setViewPrefString((String) mapValue.get("viewPrefString"));
        setDescription((String) mapValue.get("description"));
        setApplication((String) mapValue.get("application"));
        setApplicationSection((String) mapValue.get("applicationSection"));
        setScreenName((String) mapValue.get("screenName"));
        setFormName((String) mapValue.get("formName"));
        setDomId((String) mapValue.get("domId"));
        postInit();
    }

    /** {@inheritDoc} */
    @Override
    public Map<String, Object> toMap() {
        Map<String, Object> mapValue = new FastMap<String, Object>();
        mapValue.put("viewPrefTypeId", getViewPrefTypeId());
        mapValue.put("userLoginId", getUserLoginId());
        mapValue.put("viewPrefValueTypeId", getViewPrefValueTypeId());
        mapValue.put("viewPrefEnumId", getViewPrefEnumId());
        mapValue.put("viewPrefString", getViewPrefString());
        mapValue.put("description", getDescription());
        mapValue.put("application", getApplication());
        mapValue.put("applicationSection", getApplicationSection());
        mapValue.put("screenName", getScreenName());
        mapValue.put("formName", getFormName());
        mapValue.put("domId", getDomId());
        return mapValue;
    }


}
