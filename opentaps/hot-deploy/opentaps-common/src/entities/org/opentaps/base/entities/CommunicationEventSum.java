package org.opentaps.base.entities;

/*
 * Copyright (c) Open Source Strategies, Inc.
 *
 * Opentaps is free software: you can redistribute it and/or modify it
 * under the terms of the GNU Affero General Public License as published
 * by the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Opentaps is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with Opentaps.  If not, see <http://www.gnu.org/licenses/>.
 */

// DO NOT EDIT THIS FILE!  THIS IS AUTO GENERATED AND WILL GET WRITTEN OVER PERIODICALLY WHEN THE DATA MODEL CHANGES
// EXTEND THIS CLASS INSTEAD.

import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;

import javolution.util.FastMap;

import org.opentaps.foundation.entity.Entity;
import org.opentaps.foundation.entity.EntityFieldInterface;
import org.opentaps.foundation.repository.RepositoryException;
import org.opentaps.foundation.repository.RepositoryInterface;
import javax.persistence.*;
import org.hibernate.search.annotations.*;
import java.lang.Long;
import java.lang.String;

/**
 * Auto generated base entity CommunicationEventSum.
 */
@javax.persistence.Entity
@NamedNativeQuery(name="selectCommunicationEventSums", query="SELECT CE.COMMUNICATION_EVENT_ID AS \"communicationEventId\",CE.STATUS_ID AS \"statusId\",CE.PARTY_ID_TO AS \"partyIdTo\" FROM COMMUNICATION_EVENT CE", resultSetMapping="CommunicationEventSumMapping")
@SqlResultSetMapping(name="CommunicationEventSumMapping", entities={
@EntityResult(entityClass=CommunicationEventSum.class, fields = {
@FieldResult(name="communicationEventId", column="communicationEventId")
,@FieldResult(name="statusId", column="statusId")
,@FieldResult(name="partyIdTo", column="partyIdTo")
})})
@org.hibernate.annotations.Entity(mutable = false)
@org.hibernate.annotations.AccessType("field")
public class CommunicationEventSum extends Entity {
static {
java.util.Map<String, String> fields = new java.util.HashMap<String, String>();
        fields.put("communicationEventId", "CE.COMMUNICATION_EVENT_ID");
        fields.put("statusId", "CE.STATUS_ID");
        fields.put("partyIdTo", "CE.PARTY_ID_TO");
fieldMapColumns.put("CommunicationEventSum", fields);
}
  public static enum Fields implements EntityFieldInterface<CommunicationEventSum> {
    communicationEventId("communicationEventId"),
    statusId("statusId"),
    partyIdTo("partyIdTo");
    private final String fieldName;
    private Fields(String name) { fieldName = name; }
    /** {@inheritDoc} */
    public String getName() { return fieldName; }
    /** {@inheritDoc} */
    public String asc() { return fieldName + " ASC"; }
    /** {@inheritDoc} */
    public String desc() { return fieldName + " DESC"; }
  }

    @Id
   private Long communicationEventId;
    
   private String statusId;
    
   private String partyIdTo;

  /**
   * Default constructor.
   */
  public CommunicationEventSum() {
      super();
      this.baseEntityName = "CommunicationEventSum";
      this.isView = true;
      
      this.primaryKeyNames = new ArrayList<String>();
      this.primaryKeyNames.add("communicationEventId");
      this.allFieldsNames = new ArrayList<String>();
      this.allFieldsNames.add("communicationEventId");this.allFieldsNames.add("statusId");this.allFieldsNames.add("partyIdTo");
      this.nonPrimaryKeyNames = new ArrayList<String>();
      this.nonPrimaryKeyNames.addAll(allFieldsNames);
      this.nonPrimaryKeyNames.removeAll(primaryKeyNames);
  }

  /**
   * Constructor with a repository.
   * @param repository a <code>RepositoryInterface</code> value
   */
  public CommunicationEventSum(RepositoryInterface repository) {
      this();
      initRepository(repository);
  }

    /**
     * This is a view-entity, so the setter methods will be private to this class and for use in its fromMap constructor only
     */
    /**
     * Auto generated value setter.
     * @param communicationEventId the communicationEventId to set
     */
    public void setCommunicationEventId(Long communicationEventId) {
        this.communicationEventId = communicationEventId;
    }
    /**
     * Auto generated value setter.
     * @param statusId the statusId to set
     */
    public void setStatusId(String statusId) {
        this.statusId = statusId;
    }
    /**
     * Auto generated value setter.
     * @param partyIdTo the partyIdTo to set
     */
    public void setPartyIdTo(String partyIdTo) {
        this.partyIdTo = partyIdTo;
    }

    /**
     * Auto generated value accessor.
     * @return <code>Long</code>
     */
    public Long getCommunicationEventId() {
        return this.communicationEventId;
    }
    /**
     * Auto generated value accessor.
     * @return <code>String</code>
     */
    public String getStatusId() {
        return this.statusId;
    }
    /**
     * Auto generated value accessor.
     * @return <code>String</code>
     */
    public String getPartyIdTo() {
        return this.partyIdTo;
    }




    /** {@inheritDoc} */
    @Override
    public void fromMap(Map<String, Object> mapValue) {
        preInit();
        setCommunicationEventId((Long) mapValue.get("communicationEventId"));
        setStatusId((String) mapValue.get("statusId"));
        setPartyIdTo((String) mapValue.get("partyIdTo"));
        postInit();
    }

    /** {@inheritDoc} */
    @Override
    public Map<String, Object> toMap() {
        Map<String, Object> mapValue = new FastMap<String, Object>();
        mapValue.put("communicationEventId", getCommunicationEventId());
        mapValue.put("statusId", getStatusId());
        mapValue.put("partyIdTo", getPartyIdTo());
        return mapValue;
    }


}
