package org.opentaps.base.entities;

/*
 * Copyright (c) Open Source Strategies, Inc.
 *
 * Opentaps is free software: you can redistribute it and/or modify it
 * under the terms of the GNU Affero General Public License as published
 * by the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Opentaps is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with Opentaps.  If not, see <http://www.gnu.org/licenses/>.
 */

// DO NOT EDIT THIS FILE!  THIS IS AUTO GENERATED AND WILL GET WRITTEN OVER PERIODICALLY WHEN THE DATA MODEL CHANGES
// EXTEND THIS CLASS INSTEAD.

import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;

import javolution.util.FastMap;

import org.opentaps.foundation.entity.Entity;
import org.opentaps.foundation.entity.EntityFieldInterface;
import org.opentaps.foundation.repository.RepositoryException;
import org.opentaps.foundation.repository.RepositoryInterface;
import javax.persistence.*;
import org.hibernate.search.annotations.*;
import java.lang.String;
import java.math.BigDecimal;
import java.sql.Timestamp;

/**
 * Auto generated base entity BillingAccountAndRole.
 */
@javax.persistence.Entity
@NamedNativeQuery(name="selectBillingAccountAndRoles", query="SELECT BA.BILLING_ACCOUNT_ID AS \"billingAccountId\",BA.ACCOUNT_LIMIT AS \"accountLimit\",BA.ACCOUNT_CURRENCY_UOM_ID AS \"accountCurrencyUomId\",BA.CONTACT_MECH_ID AS \"contactMechId\",BA.FROM_DATE AS \"fromDate\",BA.THRU_DATE AS \"thruDate\",BA.DESCRIPTION AS \"description\",BR.PARTY_ID AS \"partyId\",BR.ROLE_TYPE_ID AS \"roleTypeId\",BR.FROM_DATE AS \"fromDate\",BR.THRU_DATE AS \"thruDate\" FROM BILLING_ACCOUNT BA INNER JOIN BILLING_ACCOUNT_ROLE BR ON BA.BILLING_ACCOUNT_ID = BR.BILLING_ACCOUNT_ID", resultSetMapping="BillingAccountAndRoleMapping")
@SqlResultSetMapping(name="BillingAccountAndRoleMapping", entities={
@EntityResult(entityClass=BillingAccountAndRole.class, fields = {
@FieldResult(name="billingAccountId", column="billingAccountId")
,@FieldResult(name="accountLimit", column="accountLimit")
,@FieldResult(name="accountCurrencyUomId", column="accountCurrencyUomId")
,@FieldResult(name="contactMechId", column="contactMechId")
,@FieldResult(name="accountFromDate", column="accountFromDate")
,@FieldResult(name="accountThruDate", column="accountThruDate")
,@FieldResult(name="description", column="description")
,@FieldResult(name="partyId", column="partyId")
,@FieldResult(name="roleTypeId", column="roleTypeId")
,@FieldResult(name="fromDate", column="fromDate")
,@FieldResult(name="thruDate", column="thruDate")
})})
@org.hibernate.annotations.Entity(mutable = false)
@org.hibernate.annotations.AccessType("field")
public class BillingAccountAndRole extends Entity {
static {
java.util.Map<String, String> fields = new java.util.HashMap<String, String>();
        fields.put("billingAccountId", "BA.BILLING_ACCOUNT_ID");
        fields.put("accountLimit", "BA.ACCOUNT_LIMIT");
        fields.put("accountCurrencyUomId", "BA.ACCOUNT_CURRENCY_UOM_ID");
        fields.put("contactMechId", "BA.CONTACT_MECH_ID");
        fields.put("accountFromDate", "BA.FROM_DATE");
        fields.put("accountThruDate", "BA.THRU_DATE");
        fields.put("description", "BA.DESCRIPTION");
        fields.put("partyId", "BR.PARTY_ID");
        fields.put("roleTypeId", "BR.ROLE_TYPE_ID");
        fields.put("fromDate", "BR.FROM_DATE");
        fields.put("thruDate", "BR.THRU_DATE");
fieldMapColumns.put("BillingAccountAndRole", fields);
}
  public static enum Fields implements EntityFieldInterface<BillingAccountAndRole> {
    billingAccountId("billingAccountId"),
    accountLimit("accountLimit"),
    accountCurrencyUomId("accountCurrencyUomId"),
    contactMechId("contactMechId"),
    accountFromDate("accountFromDate"),
    accountThruDate("accountThruDate"),
    description("description"),
    partyId("partyId"),
    roleTypeId("roleTypeId"),
    fromDate("fromDate"),
    thruDate("thruDate");
    private final String fieldName;
    private Fields(String name) { fieldName = name; }
    /** {@inheritDoc} */
    public String getName() { return fieldName; }
    /** {@inheritDoc} */
    public String asc() { return fieldName + " ASC"; }
    /** {@inheritDoc} */
    public String desc() { return fieldName + " DESC"; }
  }

    @Id
   private String billingAccountId;
    
   private BigDecimal accountLimit;
    
   private String accountCurrencyUomId;
    
   private String contactMechId;
    
   private Timestamp accountFromDate;
    
   private Timestamp accountThruDate;
    
   private String description;
    
   private String partyId;
    
   private String roleTypeId;
    
   private Timestamp fromDate;
    
   private Timestamp thruDate;
   private transient List<OrderHeader> orderHeaders = null;
   private transient List<BillingAccountRole> billingAccountRoles = null;
   private transient List<Invoice> invoices = null;
   private transient List<PaymentApplication> paymentApplications = null;
   @ManyToOne(cascade = {CascadeType.PERSIST, CascadeType.MERGE}, fetch=FetchType.LAZY)
   @JoinColumn(name="CONTACT_MECH_ID", insertable=false, updatable=false)
   @org.hibernate.annotations.Generated(
      org.hibernate.annotations.GenerationTime.ALWAYS
   )
   
   private ContactMech contactMech = null;
   @ManyToOne(cascade = {CascadeType.PERSIST, CascadeType.MERGE}, fetch=FetchType.LAZY)
   @JoinColumn(name="CONTACT_MECH_ID", insertable=false, updatable=false)
   @org.hibernate.annotations.Generated(
      org.hibernate.annotations.GenerationTime.ALWAYS
   )
   
   private PostalAddress postalAddress = null;
   @ManyToOne(cascade = {CascadeType.PERSIST, CascadeType.MERGE}, fetch=FetchType.LAZY)
   @JoinColumn(name="PARTY_ID", insertable=false, updatable=false)
   @org.hibernate.annotations.Generated(
      org.hibernate.annotations.GenerationTime.ALWAYS
   )
   
   private Party party = null;
   @ManyToOne(cascade = {CascadeType.PERSIST, CascadeType.MERGE}, fetch=FetchType.LAZY)
   @JoinColumn(name="ROLE_TYPE_ID", insertable=false, updatable=false)
   @org.hibernate.annotations.Generated(
      org.hibernate.annotations.GenerationTime.ALWAYS
   )
   
   private RoleType roleType = null;
   private transient PartyRole partyRole = null;

  /**
   * Default constructor.
   */
  public BillingAccountAndRole() {
      super();
      this.baseEntityName = "BillingAccountAndRole";
      this.isView = true;
      
      this.primaryKeyNames = new ArrayList<String>();
      this.primaryKeyNames.add("billingAccountId");this.primaryKeyNames.add("partyId");this.primaryKeyNames.add("roleTypeId");this.primaryKeyNames.add("fromDate");
      this.allFieldsNames = new ArrayList<String>();
      this.allFieldsNames.add("billingAccountId");this.allFieldsNames.add("accountLimit");this.allFieldsNames.add("accountCurrencyUomId");this.allFieldsNames.add("contactMechId");this.allFieldsNames.add("accountFromDate");this.allFieldsNames.add("accountThruDate");this.allFieldsNames.add("description");this.allFieldsNames.add("partyId");this.allFieldsNames.add("roleTypeId");this.allFieldsNames.add("fromDate");this.allFieldsNames.add("thruDate");
      this.nonPrimaryKeyNames = new ArrayList<String>();
      this.nonPrimaryKeyNames.addAll(allFieldsNames);
      this.nonPrimaryKeyNames.removeAll(primaryKeyNames);
  }

  /**
   * Constructor with a repository.
   * @param repository a <code>RepositoryInterface</code> value
   */
  public BillingAccountAndRole(RepositoryInterface repository) {
      this();
      initRepository(repository);
  }

    /**
     * This is a view-entity, so the setter methods will be private to this class and for use in its fromMap constructor only
     */
    /**
     * Auto generated value setter.
     * @param billingAccountId the billingAccountId to set
     */
    public void setBillingAccountId(String billingAccountId) {
        this.billingAccountId = billingAccountId;
    }
    /**
     * Auto generated value setter.
     * @param accountLimit the accountLimit to set
     */
    public void setAccountLimit(BigDecimal accountLimit) {
        this.accountLimit = accountLimit;
    }
    /**
     * Auto generated value setter.
     * @param accountCurrencyUomId the accountCurrencyUomId to set
     */
    public void setAccountCurrencyUomId(String accountCurrencyUomId) {
        this.accountCurrencyUomId = accountCurrencyUomId;
    }
    /**
     * Auto generated value setter.
     * @param contactMechId the contactMechId to set
     */
    public void setContactMechId(String contactMechId) {
        this.contactMechId = contactMechId;
    }
    /**
     * Auto generated value setter.
     * @param accountFromDate the accountFromDate to set
     */
    public void setAccountFromDate(Timestamp accountFromDate) {
        this.accountFromDate = accountFromDate;
    }
    /**
     * Auto generated value setter.
     * @param accountThruDate the accountThruDate to set
     */
    public void setAccountThruDate(Timestamp accountThruDate) {
        this.accountThruDate = accountThruDate;
    }
    /**
     * Auto generated value setter.
     * @param description the description to set
     */
    public void setDescription(String description) {
        this.description = description;
    }
    /**
     * Auto generated value setter.
     * @param partyId the partyId to set
     */
    public void setPartyId(String partyId) {
        this.partyId = partyId;
    }
    /**
     * Auto generated value setter.
     * @param roleTypeId the roleTypeId to set
     */
    public void setRoleTypeId(String roleTypeId) {
        this.roleTypeId = roleTypeId;
    }
    /**
     * Auto generated value setter.
     * @param fromDate the fromDate to set
     */
    public void setFromDate(Timestamp fromDate) {
        this.fromDate = fromDate;
    }
    /**
     * Auto generated value setter.
     * @param thruDate the thruDate to set
     */
    public void setThruDate(Timestamp thruDate) {
        this.thruDate = thruDate;
    }

    /**
     * Auto generated value accessor.
     * @return <code>String</code>
     */
    public String getBillingAccountId() {
        return this.billingAccountId;
    }
    /**
     * Auto generated value accessor.
     * @return <code>BigDecimal</code>
     */
    public BigDecimal getAccountLimit() {
        return this.accountLimit;
    }
    /**
     * Auto generated value accessor.
     * @return <code>String</code>
     */
    public String getAccountCurrencyUomId() {
        return this.accountCurrencyUomId;
    }
    /**
     * Auto generated value accessor.
     * @return <code>String</code>
     */
    public String getContactMechId() {
        return this.contactMechId;
    }
    /**
     * Auto generated value accessor.
     * @return <code>Timestamp</code>
     */
    public Timestamp getAccountFromDate() {
        return this.accountFromDate;
    }
    /**
     * Auto generated value accessor.
     * @return <code>Timestamp</code>
     */
    public Timestamp getAccountThruDate() {
        return this.accountThruDate;
    }
    /**
     * Auto generated value accessor.
     * @return <code>String</code>
     */
    public String getDescription() {
        return this.description;
    }
    /**
     * Auto generated value accessor.
     * @return <code>String</code>
     */
    public String getPartyId() {
        return this.partyId;
    }
    /**
     * Auto generated value accessor.
     * @return <code>String</code>
     */
    public String getRoleTypeId() {
        return this.roleTypeId;
    }
    /**
     * Auto generated value accessor.
     * @return <code>Timestamp</code>
     */
    public Timestamp getFromDate() {
        return this.fromDate;
    }
    /**
     * Auto generated value accessor.
     * @return <code>Timestamp</code>
     */
    public Timestamp getThruDate() {
        return this.thruDate;
    }

    /**
     * Auto generated method that gets the related <code>OrderHeader</code> by the relation named <code>OrderHeader</code>.
     * @return the list of <code>OrderHeader</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends OrderHeader> getOrderHeaders() throws RepositoryException {
        if (this.orderHeaders == null) {
            this.orderHeaders = getRelated(OrderHeader.class, "OrderHeader");
        }
        return this.orderHeaders;
    }
    /**
     * Auto generated method that gets the related <code>BillingAccountRole</code> by the relation named <code>BillingAccountRole</code>.
     * @return the list of <code>BillingAccountRole</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends BillingAccountRole> getBillingAccountRoles() throws RepositoryException {
        if (this.billingAccountRoles == null) {
            this.billingAccountRoles = getRelated(BillingAccountRole.class, "BillingAccountRole");
        }
        return this.billingAccountRoles;
    }
    /**
     * Auto generated method that gets the related <code>Invoice</code> by the relation named <code>Invoice</code>.
     * @return the list of <code>Invoice</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends Invoice> getInvoices() throws RepositoryException {
        if (this.invoices == null) {
            this.invoices = getRelated(Invoice.class, "Invoice");
        }
        return this.invoices;
    }
    /**
     * Auto generated method that gets the related <code>PaymentApplication</code> by the relation named <code>PaymentApplication</code>.
     * @return the list of <code>PaymentApplication</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends PaymentApplication> getPaymentApplications() throws RepositoryException {
        if (this.paymentApplications == null) {
            this.paymentApplications = getRelated(PaymentApplication.class, "PaymentApplication");
        }
        return this.paymentApplications;
    }
    /**
     * Auto generated method that gets the related <code>ContactMech</code> by the relation named <code>ContactMech</code>.
     * @return the <code>ContactMech</code>
     * @throws RepositoryException if an error occurs
     */
    public ContactMech getContactMech() throws RepositoryException {
        if (this.contactMech == null) {
            this.contactMech = getRelatedOne(ContactMech.class, "ContactMech");
        }
        return this.contactMech;
    }
    /**
     * Auto generated method that gets the related <code>PostalAddress</code> by the relation named <code>PostalAddress</code>.
     * @return the <code>PostalAddress</code>
     * @throws RepositoryException if an error occurs
     */
    public PostalAddress getPostalAddress() throws RepositoryException {
        if (this.postalAddress == null) {
            this.postalAddress = getRelatedOne(PostalAddress.class, "PostalAddress");
        }
        return this.postalAddress;
    }
    /**
     * Auto generated method that gets the related <code>Party</code> by the relation named <code>Party</code>.
     * @return the <code>Party</code>
     * @throws RepositoryException if an error occurs
     */
    public Party getParty() throws RepositoryException {
        if (this.party == null) {
            this.party = getRelatedOne(Party.class, "Party");
        }
        return this.party;
    }
    /**
     * Auto generated method that gets the related <code>RoleType</code> by the relation named <code>RoleType</code>.
     * @return the <code>RoleType</code>
     * @throws RepositoryException if an error occurs
     */
    public RoleType getRoleType() throws RepositoryException {
        if (this.roleType == null) {
            this.roleType = getRelatedOne(RoleType.class, "RoleType");
        }
        return this.roleType;
    }
    /**
     * Auto generated method that gets the related <code>PartyRole</code> by the relation named <code>PartyRole</code>.
     * @return the <code>PartyRole</code>
     * @throws RepositoryException if an error occurs
     */
    public PartyRole getPartyRole() throws RepositoryException {
        if (this.partyRole == null) {
            this.partyRole = getRelatedOne(PartyRole.class, "PartyRole");
        }
        return this.partyRole;
    }

    /**
     * Auto generated value setter.
     * @param orderHeaders the orderHeaders to set
    */
    public void setOrderHeaders(List<OrderHeader> orderHeaders) {
        this.orderHeaders = orderHeaders;
    }
    /**
     * Auto generated value setter.
     * @param billingAccountRoles the billingAccountRoles to set
    */
    public void setBillingAccountRoles(List<BillingAccountRole> billingAccountRoles) {
        this.billingAccountRoles = billingAccountRoles;
    }
    /**
     * Auto generated value setter.
     * @param invoices the invoices to set
    */
    public void setInvoices(List<Invoice> invoices) {
        this.invoices = invoices;
    }
    /**
     * Auto generated value setter.
     * @param paymentApplications the paymentApplications to set
    */
    public void setPaymentApplications(List<PaymentApplication> paymentApplications) {
        this.paymentApplications = paymentApplications;
    }
    /**
     * Auto generated value setter.
     * @param contactMech the contactMech to set
    */
    public void setContactMech(ContactMech contactMech) {
        this.contactMech = contactMech;
    }
    /**
     * Auto generated value setter.
     * @param postalAddress the postalAddress to set
    */
    public void setPostalAddress(PostalAddress postalAddress) {
        this.postalAddress = postalAddress;
    }
    /**
     * Auto generated value setter.
     * @param party the party to set
    */
    public void setParty(Party party) {
        this.party = party;
    }
    /**
     * Auto generated value setter.
     * @param roleType the roleType to set
    */
    public void setRoleType(RoleType roleType) {
        this.roleType = roleType;
    }
    /**
     * Auto generated value setter.
     * @param partyRole the partyRole to set
    */
    public void setPartyRole(PartyRole partyRole) {
        this.partyRole = partyRole;
    }


    /** {@inheritDoc} */
    @Override
    public void fromMap(Map<String, Object> mapValue) {
        preInit();
        setBillingAccountId((String) mapValue.get("billingAccountId"));
        setAccountLimit(convertToBigDecimal(mapValue.get("accountLimit")));
        setAccountCurrencyUomId((String) mapValue.get("accountCurrencyUomId"));
        setContactMechId((String) mapValue.get("contactMechId"));
        setAccountFromDate((Timestamp) mapValue.get("accountFromDate"));
        setAccountThruDate((Timestamp) mapValue.get("accountThruDate"));
        setDescription((String) mapValue.get("description"));
        setPartyId((String) mapValue.get("partyId"));
        setRoleTypeId((String) mapValue.get("roleTypeId"));
        setFromDate((Timestamp) mapValue.get("fromDate"));
        setThruDate((Timestamp) mapValue.get("thruDate"));
        postInit();
    }

    /** {@inheritDoc} */
    @Override
    public Map<String, Object> toMap() {
        Map<String, Object> mapValue = new FastMap<String, Object>();
        mapValue.put("billingAccountId", getBillingAccountId());
        mapValue.put("accountLimit", getAccountLimit());
        mapValue.put("accountCurrencyUomId", getAccountCurrencyUomId());
        mapValue.put("contactMechId", getContactMechId());
        mapValue.put("accountFromDate", getAccountFromDate());
        mapValue.put("accountThruDate", getAccountThruDate());
        mapValue.put("description", getDescription());
        mapValue.put("partyId", getPartyId());
        mapValue.put("roleTypeId", getRoleTypeId());
        mapValue.put("fromDate", getFromDate());
        mapValue.put("thruDate", getThruDate());
        return mapValue;
    }


}
