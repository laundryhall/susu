package org.opentaps.base.entities;

/*
 * Copyright (c) Open Source Strategies, Inc.
 *
 * Opentaps is free software: you can redistribute it and/or modify it
 * under the terms of the GNU Affero General Public License as published
 * by the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Opentaps is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with Opentaps.  If not, see <http://www.gnu.org/licenses/>.
 */

// DO NOT EDIT THIS FILE!  THIS IS AUTO GENERATED AND WILL GET WRITTEN OVER PERIODICALLY WHEN THE DATA MODEL CHANGES
// EXTEND THIS CLASS INSTEAD.

import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;

import javolution.util.FastMap;

import org.opentaps.foundation.entity.Entity;
import org.opentaps.foundation.entity.EntityFieldInterface;
import org.opentaps.foundation.repository.RepositoryException;
import org.opentaps.foundation.repository.RepositoryInterface;
import javax.persistence.*;
import org.hibernate.search.annotations.*;
import java.lang.String;
import java.sql.Timestamp;

/**
 * Auto generated base entity PartyFixedAssetAssignAndRole.
 */
@javax.persistence.Entity
@NamedNativeQuery(name="selectPartyFixedAssetAssignAndRoles", query="SELECT PFA.PARTY_ID AS \"partyId\",PFA.ROLE_TYPE_ID AS \"roleTypeId\",PFA.FIXED_ASSET_ID AS \"fixedAssetId\",PFA.FROM_DATE AS \"fromDate\",PFA.THRU_DATE AS \"thruDate\",PFA.ALLOCATED_DATE AS \"allocatedDate\",PFA.STATUS_ID AS \"statusId\",PFA.COMMENTS AS \"comments\",RT.PARENT_TYPE_ID AS \"parentTypeId\",RT.HAS_TABLE AS \"hasTable\",RT.DESCRIPTION AS \"description\" FROM PARTY_FIXED_ASSET_ASSIGNMENT PFA INNER JOIN ROLE_TYPE RT ON PFA.ROLE_TYPE_ID = RT.ROLE_TYPE_ID", resultSetMapping="PartyFixedAssetAssignAndRoleMapping")
@SqlResultSetMapping(name="PartyFixedAssetAssignAndRoleMapping", entities={
@EntityResult(entityClass=PartyFixedAssetAssignAndRole.class, fields = {
@FieldResult(name="partyId", column="partyId")
,@FieldResult(name="roleTypeId", column="roleTypeId")
,@FieldResult(name="fixedAssetId", column="fixedAssetId")
,@FieldResult(name="fromDate", column="fromDate")
,@FieldResult(name="thruDate", column="thruDate")
,@FieldResult(name="allocatedDate", column="allocatedDate")
,@FieldResult(name="statusId", column="statusId")
,@FieldResult(name="comments", column="comments")
,@FieldResult(name="parentTypeId", column="parentTypeId")
,@FieldResult(name="hasTable", column="hasTable")
,@FieldResult(name="description", column="description")
})})
@org.hibernate.annotations.Entity(mutable = false)
@org.hibernate.annotations.AccessType("field")
public class PartyFixedAssetAssignAndRole extends Entity {
static {
java.util.Map<String, String> fields = new java.util.HashMap<String, String>();
        fields.put("partyId", "PFA.PARTY_ID");
        fields.put("roleTypeId", "PFA.ROLE_TYPE_ID");
        fields.put("fixedAssetId", "PFA.FIXED_ASSET_ID");
        fields.put("fromDate", "PFA.FROM_DATE");
        fields.put("thruDate", "PFA.THRU_DATE");
        fields.put("allocatedDate", "PFA.ALLOCATED_DATE");
        fields.put("statusId", "PFA.STATUS_ID");
        fields.put("comments", "PFA.COMMENTS");
        fields.put("parentTypeId", "RT.PARENT_TYPE_ID");
        fields.put("hasTable", "RT.HAS_TABLE");
        fields.put("description", "RT.DESCRIPTION");
fieldMapColumns.put("PartyFixedAssetAssignAndRole", fields);
}
  public static enum Fields implements EntityFieldInterface<PartyFixedAssetAssignAndRole> {
    partyId("partyId"),
    roleTypeId("roleTypeId"),
    fixedAssetId("fixedAssetId"),
    fromDate("fromDate"),
    thruDate("thruDate"),
    allocatedDate("allocatedDate"),
    statusId("statusId"),
    comments("comments"),
    parentTypeId("parentTypeId"),
    hasTable("hasTable"),
    description("description");
    private final String fieldName;
    private Fields(String name) { fieldName = name; }
    /** {@inheritDoc} */
    public String getName() { return fieldName; }
    /** {@inheritDoc} */
    public String asc() { return fieldName + " ASC"; }
    /** {@inheritDoc} */
    public String desc() { return fieldName + " DESC"; }
  }

    @Id
   private String partyId;
    
   private String roleTypeId;
    
   private String fixedAssetId;
    
   private Timestamp fromDate;
    
   private Timestamp thruDate;
    
   private Timestamp allocatedDate;
    
   private String statusId;
    
   private String comments;
    
   private String parentTypeId;
    
   private String hasTable;
    
   private String description;

  /**
   * Default constructor.
   */
  public PartyFixedAssetAssignAndRole() {
      super();
      this.baseEntityName = "PartyFixedAssetAssignAndRole";
      this.isView = true;
      
      this.primaryKeyNames = new ArrayList<String>();
      this.primaryKeyNames.add("partyId");this.primaryKeyNames.add("roleTypeId");this.primaryKeyNames.add("fixedAssetId");this.primaryKeyNames.add("fromDate");
      this.allFieldsNames = new ArrayList<String>();
      this.allFieldsNames.add("partyId");this.allFieldsNames.add("roleTypeId");this.allFieldsNames.add("fixedAssetId");this.allFieldsNames.add("fromDate");this.allFieldsNames.add("thruDate");this.allFieldsNames.add("allocatedDate");this.allFieldsNames.add("statusId");this.allFieldsNames.add("comments");this.allFieldsNames.add("parentTypeId");this.allFieldsNames.add("hasTable");this.allFieldsNames.add("description");
      this.nonPrimaryKeyNames = new ArrayList<String>();
      this.nonPrimaryKeyNames.addAll(allFieldsNames);
      this.nonPrimaryKeyNames.removeAll(primaryKeyNames);
  }

  /**
   * Constructor with a repository.
   * @param repository a <code>RepositoryInterface</code> value
   */
  public PartyFixedAssetAssignAndRole(RepositoryInterface repository) {
      this();
      initRepository(repository);
  }

    /**
     * This is a view-entity, so the setter methods will be private to this class and for use in its fromMap constructor only
     */
    /**
     * Auto generated value setter.
     * @param partyId the partyId to set
     */
    public void setPartyId(String partyId) {
        this.partyId = partyId;
    }
    /**
     * Auto generated value setter.
     * @param roleTypeId the roleTypeId to set
     */
    public void setRoleTypeId(String roleTypeId) {
        this.roleTypeId = roleTypeId;
    }
    /**
     * Auto generated value setter.
     * @param fixedAssetId the fixedAssetId to set
     */
    public void setFixedAssetId(String fixedAssetId) {
        this.fixedAssetId = fixedAssetId;
    }
    /**
     * Auto generated value setter.
     * @param fromDate the fromDate to set
     */
    public void setFromDate(Timestamp fromDate) {
        this.fromDate = fromDate;
    }
    /**
     * Auto generated value setter.
     * @param thruDate the thruDate to set
     */
    public void setThruDate(Timestamp thruDate) {
        this.thruDate = thruDate;
    }
    /**
     * Auto generated value setter.
     * @param allocatedDate the allocatedDate to set
     */
    public void setAllocatedDate(Timestamp allocatedDate) {
        this.allocatedDate = allocatedDate;
    }
    /**
     * Auto generated value setter.
     * @param statusId the statusId to set
     */
    public void setStatusId(String statusId) {
        this.statusId = statusId;
    }
    /**
     * Auto generated value setter.
     * @param comments the comments to set
     */
    public void setComments(String comments) {
        this.comments = comments;
    }
    /**
     * Auto generated value setter.
     * @param parentTypeId the parentTypeId to set
     */
    public void setParentTypeId(String parentTypeId) {
        this.parentTypeId = parentTypeId;
    }
    /**
     * Auto generated value setter.
     * @param hasTable the hasTable to set
     */
    public void setHasTable(String hasTable) {
        this.hasTable = hasTable;
    }
    /**
     * Auto generated value setter.
     * @param description the description to set
     */
    public void setDescription(String description) {
        this.description = description;
    }

    /**
     * Auto generated value accessor.
     * @return <code>String</code>
     */
    public String getPartyId() {
        return this.partyId;
    }
    /**
     * Auto generated value accessor.
     * @return <code>String</code>
     */
    public String getRoleTypeId() {
        return this.roleTypeId;
    }
    /**
     * Auto generated value accessor.
     * @return <code>String</code>
     */
    public String getFixedAssetId() {
        return this.fixedAssetId;
    }
    /**
     * Auto generated value accessor.
     * @return <code>Timestamp</code>
     */
    public Timestamp getFromDate() {
        return this.fromDate;
    }
    /**
     * Auto generated value accessor.
     * @return <code>Timestamp</code>
     */
    public Timestamp getThruDate() {
        return this.thruDate;
    }
    /**
     * Auto generated value accessor.
     * @return <code>Timestamp</code>
     */
    public Timestamp getAllocatedDate() {
        return this.allocatedDate;
    }
    /**
     * Auto generated value accessor.
     * @return <code>String</code>
     */
    public String getStatusId() {
        return this.statusId;
    }
    /**
     * Auto generated value accessor.
     * @return <code>String</code>
     */
    public String getComments() {
        return this.comments;
    }
    /**
     * Auto generated value accessor.
     * @return <code>String</code>
     */
    public String getParentTypeId() {
        return this.parentTypeId;
    }
    /**
     * Auto generated value accessor.
     * @return <code>String</code>
     */
    public String getHasTable() {
        return this.hasTable;
    }
    /**
     * Auto generated value accessor.
     * @return <code>String</code>
     */
    public String getDescription() {
        return this.description;
    }




    /** {@inheritDoc} */
    @Override
    public void fromMap(Map<String, Object> mapValue) {
        preInit();
        setPartyId((String) mapValue.get("partyId"));
        setRoleTypeId((String) mapValue.get("roleTypeId"));
        setFixedAssetId((String) mapValue.get("fixedAssetId"));
        setFromDate((Timestamp) mapValue.get("fromDate"));
        setThruDate((Timestamp) mapValue.get("thruDate"));
        setAllocatedDate((Timestamp) mapValue.get("allocatedDate"));
        setStatusId((String) mapValue.get("statusId"));
        setComments((String) mapValue.get("comments"));
        setParentTypeId((String) mapValue.get("parentTypeId"));
        setHasTable((String) mapValue.get("hasTable"));
        setDescription((String) mapValue.get("description"));
        postInit();
    }

    /** {@inheritDoc} */
    @Override
    public Map<String, Object> toMap() {
        Map<String, Object> mapValue = new FastMap<String, Object>();
        mapValue.put("partyId", getPartyId());
        mapValue.put("roleTypeId", getRoleTypeId());
        mapValue.put("fixedAssetId", getFixedAssetId());
        mapValue.put("fromDate", getFromDate());
        mapValue.put("thruDate", getThruDate());
        mapValue.put("allocatedDate", getAllocatedDate());
        mapValue.put("statusId", getStatusId());
        mapValue.put("comments", getComments());
        mapValue.put("parentTypeId", getParentTypeId());
        mapValue.put("hasTable", getHasTable());
        mapValue.put("description", getDescription());
        return mapValue;
    }


}
