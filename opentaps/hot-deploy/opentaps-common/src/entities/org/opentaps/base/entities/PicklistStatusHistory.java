package org.opentaps.base.entities;

/*
 * Copyright (c) Open Source Strategies, Inc.
 *
 * Opentaps is free software: you can redistribute it and/or modify it
 * under the terms of the GNU Affero General Public License as published
 * by the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Opentaps is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with Opentaps.  If not, see <http://www.gnu.org/licenses/>.
 */

// DO NOT EDIT THIS FILE!  THIS IS AUTO GENERATED AND WILL GET WRITTEN OVER PERIODICALLY WHEN THE DATA MODEL CHANGES
// EXTEND THIS CLASS INSTEAD.

import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;

import javolution.util.FastMap;

import org.opentaps.foundation.entity.Entity;
import org.opentaps.foundation.entity.EntityFieldInterface;
import org.opentaps.foundation.repository.RepositoryException;
import org.opentaps.foundation.repository.RepositoryInterface;
import javax.persistence.*;
import org.hibernate.search.annotations.*;
import java.lang.String;
import java.sql.Timestamp;

/**
 * Auto generated base entity PicklistStatusHistory.
 */
@javax.persistence.Entity
@Table(name="PICKLIST_STATUS_HISTORY")
public class PicklistStatusHistory extends Entity {
static {
java.util.Map<String, String> fields = new java.util.HashMap<String, String>();
        fields.put("picklistId", "PICKLIST_ID");
        fields.put("changeDate", "CHANGE_DATE");
        fields.put("changeUserLoginId", "CHANGE_USER_LOGIN_ID");
        fields.put("statusId", "STATUS_ID");
        fields.put("statusIdTo", "STATUS_ID_TO");
        fields.put("lastUpdatedStamp", "LAST_UPDATED_STAMP");
        fields.put("lastUpdatedTxStamp", "LAST_UPDATED_TX_STAMP");
        fields.put("createdStamp", "CREATED_STAMP");
        fields.put("createdTxStamp", "CREATED_TX_STAMP");
fieldMapColumns.put("PicklistStatusHistory", fields);
}
  public static enum Fields implements EntityFieldInterface<PicklistStatusHistory> {
    picklistId("picklistId"),
    changeDate("changeDate"),
    changeUserLoginId("changeUserLoginId"),
    statusId("statusId"),
    statusIdTo("statusIdTo"),
    lastUpdatedStamp("lastUpdatedStamp"),
    lastUpdatedTxStamp("lastUpdatedTxStamp"),
    createdStamp("createdStamp"),
    createdTxStamp("createdTxStamp");
    private final String fieldName;
    private Fields(String name) { fieldName = name; }
    /** {@inheritDoc} */
    public String getName() { return fieldName; }
    /** {@inheritDoc} */
    public String asc() { return fieldName + " ASC"; }
    /** {@inheritDoc} */
    public String desc() { return fieldName + " DESC"; }
  }

   @EmbeddedId

   @FieldBridge(impl = org.opentaps.base.entities.bridge.PicklistStatusHistoryPkBridge.class)
     private PicklistStatusHistoryPk id = new PicklistStatusHistoryPk();
   
    /**
     * Auto generated Id accessor.
     * @return <code>PicklistStatusHistoryPk</code>
     */
      public PicklistStatusHistoryPk getId() {
         return id;
      }
    /**
     * Auto generated Id setter.
     * @param id a <code>PicklistStatusHistoryPk</code> value to set
    */   
      public void setId(PicklistStatusHistoryPk id) {
         this.id = id;
      }
   @Column(name="CHANGE_USER_LOGIN_ID")
   private String changeUserLoginId;
   @Column(name="STATUS_ID")
   private String statusId;
   @Column(name="STATUS_ID_TO")
   private String statusIdTo;
   @Column(name="LAST_UPDATED_STAMP")
   private Timestamp lastUpdatedStamp;
   @Column(name="LAST_UPDATED_TX_STAMP")
   private Timestamp lastUpdatedTxStamp;
   @Column(name="CREATED_STAMP")
   private Timestamp createdStamp;
   @Column(name="CREATED_TX_STAMP")
   private Timestamp createdTxStamp;
   @ManyToOne(cascade = {CascadeType.PERSIST, CascadeType.MERGE}, fetch=FetchType.LAZY)
   @JoinColumn(name="PICKLIST_ID", insertable=false, updatable=false)
   @org.hibernate.annotations.Generated(
      org.hibernate.annotations.GenerationTime.ALWAYS
   )
   
   private Picklist picklist = null;
   @ManyToOne(cascade = {CascadeType.PERSIST, CascadeType.MERGE}, fetch=FetchType.LAZY)
   @JoinColumn(name="CHANGE_USER_LOGIN_ID", insertable=false, updatable=false)
   @org.hibernate.annotations.Generated(
      org.hibernate.annotations.GenerationTime.ALWAYS
   )
   
   private UserLogin changeUserLogin = null;
   @ManyToOne(cascade = {CascadeType.PERSIST, CascadeType.MERGE}, fetch=FetchType.LAZY)
   @JoinColumn(name="STATUS_ID", insertable=false, updatable=false)
   @org.hibernate.annotations.Generated(
      org.hibernate.annotations.GenerationTime.ALWAYS
   )
   
   private StatusItem statusItem = null;
   @ManyToOne(cascade = {CascadeType.PERSIST, CascadeType.MERGE}, fetch=FetchType.LAZY)
   @JoinColumn(name="STATUS_ID_TO", insertable=false, updatable=false)
   @org.hibernate.annotations.Generated(
      org.hibernate.annotations.GenerationTime.ALWAYS
   )
   
   private StatusItem toStatusItem = null;
   private transient StatusValidChange statusValidChange = null;

  /**
   * Default constructor.
   */
  public PicklistStatusHistory() {
      super();
      this.baseEntityName = "PicklistStatusHistory";
      this.isView = false;
      
      this.primaryKeyNames = new ArrayList<String>();
      this.primaryKeyNames.add("picklistId");this.primaryKeyNames.add("changeDate");
      this.allFieldsNames = new ArrayList<String>();
      this.allFieldsNames.add("picklistId");this.allFieldsNames.add("changeDate");this.allFieldsNames.add("changeUserLoginId");this.allFieldsNames.add("statusId");this.allFieldsNames.add("statusIdTo");this.allFieldsNames.add("lastUpdatedStamp");this.allFieldsNames.add("lastUpdatedTxStamp");this.allFieldsNames.add("createdStamp");this.allFieldsNames.add("createdTxStamp");
      this.nonPrimaryKeyNames = new ArrayList<String>();
      this.nonPrimaryKeyNames.addAll(allFieldsNames);
      this.nonPrimaryKeyNames.removeAll(primaryKeyNames);
  }

  /**
   * Constructor with a repository.
   * @param repository a <code>RepositoryInterface</code> value
   */
  public PicklistStatusHistory(RepositoryInterface repository) {
      this();
      initRepository(repository);
  }

    /**
     * Auto generated value setter.
     * @param picklistId the picklistId to set
     */
    public void setPicklistId(String picklistId) {
        id.setPicklistId(picklistId);
    }
    /**
     * Auto generated value setter.
     * @param changeDate the changeDate to set
     */
    public void setChangeDate(Timestamp changeDate) {
        id.setChangeDate(changeDate);
    }
    /**
     * Auto generated value setter.
     * @param changeUserLoginId the changeUserLoginId to set
     */
    public void setChangeUserLoginId(String changeUserLoginId) {
        this.changeUserLoginId = changeUserLoginId;
    }
    /**
     * Auto generated value setter.
     * @param statusId the statusId to set
     */
    public void setStatusId(String statusId) {
        this.statusId = statusId;
    }
    /**
     * Auto generated value setter.
     * @param statusIdTo the statusIdTo to set
     */
    public void setStatusIdTo(String statusIdTo) {
        this.statusIdTo = statusIdTo;
    }
    /**
     * Auto generated value setter.
     * @param lastUpdatedStamp the lastUpdatedStamp to set
     */
    public void setLastUpdatedStamp(Timestamp lastUpdatedStamp) {
        this.lastUpdatedStamp = lastUpdatedStamp;
    }
    /**
     * Auto generated value setter.
     * @param lastUpdatedTxStamp the lastUpdatedTxStamp to set
     */
    public void setLastUpdatedTxStamp(Timestamp lastUpdatedTxStamp) {
        this.lastUpdatedTxStamp = lastUpdatedTxStamp;
    }
    /**
     * Auto generated value setter.
     * @param createdStamp the createdStamp to set
     */
    public void setCreatedStamp(Timestamp createdStamp) {
        this.createdStamp = createdStamp;
    }
    /**
     * Auto generated value setter.
     * @param createdTxStamp the createdTxStamp to set
     */
    public void setCreatedTxStamp(Timestamp createdTxStamp) {
        this.createdTxStamp = createdTxStamp;
    }

    /**
     * Auto generated value accessor.
     * @return <code>String</code>
     */
    public String getPicklistId() {
        return this.id.getPicklistId();
    }
    /**
     * Auto generated value accessor.
     * @return <code>Timestamp</code>
     */
    public Timestamp getChangeDate() {
        return this.id.getChangeDate();
    }
    /**
     * Auto generated value accessor.
     * @return <code>String</code>
     */
    public String getChangeUserLoginId() {
        return this.changeUserLoginId;
    }
    /**
     * Auto generated value accessor.
     * @return <code>String</code>
     */
    public String getStatusId() {
        return this.statusId;
    }
    /**
     * Auto generated value accessor.
     * @return <code>String</code>
     */
    public String getStatusIdTo() {
        return this.statusIdTo;
    }
    /**
     * Auto generated value accessor.
     * @return <code>Timestamp</code>
     */
    public Timestamp getLastUpdatedStamp() {
        return this.lastUpdatedStamp;
    }
    /**
     * Auto generated value accessor.
     * @return <code>Timestamp</code>
     */
    public Timestamp getLastUpdatedTxStamp() {
        return this.lastUpdatedTxStamp;
    }
    /**
     * Auto generated value accessor.
     * @return <code>Timestamp</code>
     */
    public Timestamp getCreatedStamp() {
        return this.createdStamp;
    }
    /**
     * Auto generated value accessor.
     * @return <code>Timestamp</code>
     */
    public Timestamp getCreatedTxStamp() {
        return this.createdTxStamp;
    }

    /**
     * Auto generated method that gets the related <code>Picklist</code> by the relation named <code>Picklist</code>.
     * @return the <code>Picklist</code>
     * @throws RepositoryException if an error occurs
     */
    public Picklist getPicklist() throws RepositoryException {
        if (this.picklist == null) {
            this.picklist = getRelatedOne(Picklist.class, "Picklist");
        }
        return this.picklist;
    }
    /**
     * Auto generated method that gets the related <code>UserLogin</code> by the relation named <code>ChangeUserLogin</code>.
     * @return the <code>UserLogin</code>
     * @throws RepositoryException if an error occurs
     */
    public UserLogin getChangeUserLogin() throws RepositoryException {
        if (this.changeUserLogin == null) {
            this.changeUserLogin = getRelatedOne(UserLogin.class, "ChangeUserLogin");
        }
        return this.changeUserLogin;
    }
    /**
     * Auto generated method that gets the related <code>StatusItem</code> by the relation named <code>StatusItem</code>.
     * @return the <code>StatusItem</code>
     * @throws RepositoryException if an error occurs
     */
    public StatusItem getStatusItem() throws RepositoryException {
        if (this.statusItem == null) {
            this.statusItem = getRelatedOne(StatusItem.class, "StatusItem");
        }
        return this.statusItem;
    }
    /**
     * Auto generated method that gets the related <code>StatusItem</code> by the relation named <code>ToStatusItem</code>.
     * @return the <code>StatusItem</code>
     * @throws RepositoryException if an error occurs
     */
    public StatusItem getToStatusItem() throws RepositoryException {
        if (this.toStatusItem == null) {
            this.toStatusItem = getRelatedOne(StatusItem.class, "ToStatusItem");
        }
        return this.toStatusItem;
    }
    /**
     * Auto generated method that gets the related <code>StatusValidChange</code> by the relation named <code>StatusValidChange</code>.
     * @return the <code>StatusValidChange</code>
     * @throws RepositoryException if an error occurs
     */
    public StatusValidChange getStatusValidChange() throws RepositoryException {
        if (this.statusValidChange == null) {
            this.statusValidChange = getRelatedOne(StatusValidChange.class, "StatusValidChange");
        }
        return this.statusValidChange;
    }

    /**
     * Auto generated value setter.
     * @param picklist the picklist to set
    */
    public void setPicklist(Picklist picklist) {
        this.picklist = picklist;
    }
    /**
     * Auto generated value setter.
     * @param changeUserLogin the changeUserLogin to set
    */
    public void setChangeUserLogin(UserLogin changeUserLogin) {
        this.changeUserLogin = changeUserLogin;
    }
    /**
     * Auto generated value setter.
     * @param statusItem the statusItem to set
    */
    public void setStatusItem(StatusItem statusItem) {
        this.statusItem = statusItem;
    }
    /**
     * Auto generated value setter.
     * @param toStatusItem the toStatusItem to set
    */
    public void setToStatusItem(StatusItem toStatusItem) {
        this.toStatusItem = toStatusItem;
    }
    /**
     * Auto generated value setter.
     * @param statusValidChange the statusValidChange to set
    */
    public void setStatusValidChange(StatusValidChange statusValidChange) {
        this.statusValidChange = statusValidChange;
    }


    /** {@inheritDoc} */
    @Override
    public void fromMap(Map<String, Object> mapValue) {
        preInit();
        setPicklistId((String) mapValue.get("picklistId"));
        setChangeDate((Timestamp) mapValue.get("changeDate"));
        setChangeUserLoginId((String) mapValue.get("changeUserLoginId"));
        setStatusId((String) mapValue.get("statusId"));
        setStatusIdTo((String) mapValue.get("statusIdTo"));
        setLastUpdatedStamp((Timestamp) mapValue.get("lastUpdatedStamp"));
        setLastUpdatedTxStamp((Timestamp) mapValue.get("lastUpdatedTxStamp"));
        setCreatedStamp((Timestamp) mapValue.get("createdStamp"));
        setCreatedTxStamp((Timestamp) mapValue.get("createdTxStamp"));
        postInit();
    }

    /** {@inheritDoc} */
    @Override
    public Map<String, Object> toMap() {
        Map<String, Object> mapValue = new FastMap<String, Object>();
        mapValue.put("picklistId", getPicklistId());
        mapValue.put("changeDate", getChangeDate());
        mapValue.put("changeUserLoginId", getChangeUserLoginId());
        mapValue.put("statusId", getStatusId());
        mapValue.put("statusIdTo", getStatusIdTo());
        mapValue.put("lastUpdatedStamp", getLastUpdatedStamp());
        mapValue.put("lastUpdatedTxStamp", getLastUpdatedTxStamp());
        mapValue.put("createdStamp", getCreatedStamp());
        mapValue.put("createdTxStamp", getCreatedTxStamp());
        return mapValue;
    }


}
