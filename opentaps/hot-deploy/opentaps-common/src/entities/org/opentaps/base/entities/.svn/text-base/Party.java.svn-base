package org.opentaps.base.entities;

/*
 * Copyright (c) Open Source Strategies, Inc.
 *
 * Opentaps is free software: you can redistribute it and/or modify it
 * under the terms of the GNU Affero General Public License as published
 * by the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Opentaps is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with Opentaps.  If not, see <http://www.gnu.org/licenses/>.
 */

// DO NOT EDIT THIS FILE!  THIS IS AUTO GENERATED AND WILL GET WRITTEN OVER PERIODICALLY WHEN THE DATA MODEL CHANGES
// EXTEND THIS CLASS INSTEAD.

import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;

import javolution.util.FastMap;

import org.opentaps.foundation.entity.Entity;
import org.opentaps.foundation.entity.EntityFieldInterface;
import org.opentaps.foundation.repository.RepositoryException;
import org.opentaps.foundation.repository.RepositoryInterface;
import javax.persistence.*;
import org.hibernate.search.annotations.*;
import java.lang.String;
import java.sql.Timestamp;

/**
 * Auto generated base entity Party.
 */
@javax.persistence.Entity
@Indexed
@Table(name="PARTY")
public class Party extends Entity {
static {
java.util.Map<String, String> fields = new java.util.HashMap<String, String>();
        fields.put("partyId", "PARTY_ID");
        fields.put("partyTypeId", "PARTY_TYPE_ID");
        fields.put("externalId", "EXTERNAL_ID");
        fields.put("preferredCurrencyUomId", "PREFERRED_CURRENCY_UOM_ID");
        fields.put("description", "DESCRIPTION");
        fields.put("statusId", "STATUS_ID");
        fields.put("createdDate", "CREATED_DATE");
        fields.put("createdByUserLogin", "CREATED_BY_USER_LOGIN");
        fields.put("lastModifiedDate", "LAST_MODIFIED_DATE");
        fields.put("lastModifiedByUserLogin", "LAST_MODIFIED_BY_USER_LOGIN");
        fields.put("dataSourceId", "DATA_SOURCE_ID");
        fields.put("isUnread", "IS_UNREAD");
        fields.put("lastUpdatedStamp", "LAST_UPDATED_STAMP");
        fields.put("lastUpdatedTxStamp", "LAST_UPDATED_TX_STAMP");
        fields.put("createdStamp", "CREATED_STAMP");
        fields.put("createdTxStamp", "CREATED_TX_STAMP");
fieldMapColumns.put("Party", fields);
}
  public static enum Fields implements EntityFieldInterface<Party> {
    partyId("partyId"),
    partyTypeId("partyTypeId"),
    externalId("externalId"),
    preferredCurrencyUomId("preferredCurrencyUomId"),
    description("description"),
    statusId("statusId"),
    createdDate("createdDate"),
    createdByUserLogin("createdByUserLogin"),
    lastModifiedDate("lastModifiedDate"),
    lastModifiedByUserLogin("lastModifiedByUserLogin"),
    dataSourceId("dataSourceId"),
    isUnread("isUnread"),
    lastUpdatedStamp("lastUpdatedStamp"),
    lastUpdatedTxStamp("lastUpdatedTxStamp"),
    createdStamp("createdStamp"),
    createdTxStamp("createdTxStamp");
    private final String fieldName;
    private Fields(String name) { fieldName = name; }
    /** {@inheritDoc} */
    public String getName() { return fieldName; }
    /** {@inheritDoc} */
    public String asc() { return fieldName + " ASC"; }
    /** {@inheritDoc} */
    public String desc() { return fieldName + " DESC"; }
  }

   @org.hibernate.annotations.GenericGenerator(name="Party_GEN",  strategy="org.opentaps.foundation.entity.hibernate.OpentapsIdentifierGenerator")
   @GeneratedValue(generator="Party_GEN")
   @Id
   @DocumentId
   @org.hibernate.search.annotations.Fields( {
       @Field(index=Index.TOKENIZED, store=Store.NO),
     @Field(index=Index.UN_TOKENIZED, store=Store.YES)
   } )
   @Boost(10f)
   @Column(name="PARTY_ID")
   private String partyId;
   @org.hibernate.search.annotations.Fields( {
       @Field(index=Index.TOKENIZED, store=Store.NO),
     @Field(index=Index.UN_TOKENIZED, store=Store.YES)
   } )
   @Boost(1f)
   @Column(name="PARTY_TYPE_ID")
   private String partyTypeId;
   @Column(name="EXTERNAL_ID")
   private String externalId;
   @Column(name="PREFERRED_CURRENCY_UOM_ID")
   private String preferredCurrencyUomId;
   @org.hibernate.search.annotations.Fields( {
     @Field(index=Index.TOKENIZED, store=Store.YES)
   } )
   @Boost(1f)
   @Column(name="DESCRIPTION")
   private String description;
   @org.hibernate.search.annotations.Fields( {
       @Field(index=Index.TOKENIZED, store=Store.NO),
     @Field(index=Index.UN_TOKENIZED, store=Store.YES)
   } )
   @Boost(1f)
   @Column(name="STATUS_ID")
   private String statusId;
   @Column(name="CREATED_DATE")
   private Timestamp createdDate;
   @Column(name="CREATED_BY_USER_LOGIN")
   private String createdByUserLogin;
   @Column(name="LAST_MODIFIED_DATE")
   private Timestamp lastModifiedDate;
   @Column(name="LAST_MODIFIED_BY_USER_LOGIN")
   private String lastModifiedByUserLogin;
   @Column(name="DATA_SOURCE_ID")
   private String dataSourceId;
   @Column(name="IS_UNREAD")
   private String isUnread;
   @Column(name="LAST_UPDATED_STAMP")
   private Timestamp lastUpdatedStamp;
   @Column(name="LAST_UPDATED_TX_STAMP")
   private Timestamp lastUpdatedTxStamp;
   @Column(name="CREATED_STAMP")
   private Timestamp createdStamp;
   @Column(name="CREATED_TX_STAMP")
   private Timestamp createdTxStamp;
   @ManyToOne(cascade = {CascadeType.PERSIST, CascadeType.MERGE}, fetch=FetchType.LAZY)
   @JoinColumn(name="PARTY_TYPE_ID", insertable=false, updatable=false)
   @org.hibernate.annotations.Generated(
      org.hibernate.annotations.GenerationTime.ALWAYS
   )
   
   private PartyType partyType = null;
   @ManyToOne(cascade = {CascadeType.PERSIST, CascadeType.MERGE}, fetch=FetchType.LAZY)
   @JoinColumn(name="CREATED_BY_USER_LOGIN", insertable=false, updatable=false)
   @org.hibernate.annotations.Generated(
      org.hibernate.annotations.GenerationTime.ALWAYS
   )
   
   private UserLogin relatedCreatedByUserLogin = null;
   @ManyToOne(cascade = {CascadeType.PERSIST, CascadeType.MERGE}, fetch=FetchType.LAZY)
   @JoinColumn(name="LAST_MODIFIED_BY_USER_LOGIN", insertable=false, updatable=false)
   @org.hibernate.annotations.Generated(
      org.hibernate.annotations.GenerationTime.ALWAYS
   )
   
   private UserLogin relatedLastModifiedByUserLogin = null;
   @ManyToOne(cascade = {CascadeType.PERSIST, CascadeType.MERGE}, fetch=FetchType.LAZY)
   @JoinColumn(name="PREFERRED_CURRENCY_UOM_ID", insertable=false, updatable=false)
   @org.hibernate.annotations.Generated(
      org.hibernate.annotations.GenerationTime.ALWAYS
   )
   
   private Uom uom = null;
   @ManyToOne(cascade = {CascadeType.PERSIST, CascadeType.MERGE}, fetch=FetchType.LAZY)
   @JoinColumn(name="STATUS_ID", insertable=false, updatable=false)
   @org.hibernate.annotations.Generated(
      org.hibernate.annotations.GenerationTime.ALWAYS
   )
   
   private StatusItem statusItem = null;
   private transient List<PartyTypeAttr> partyTypeAttrs = null;
   @ManyToOne(cascade = {CascadeType.PERSIST, CascadeType.MERGE}, fetch=FetchType.LAZY)
   @JoinColumn(name="DATA_SOURCE_ID", insertable=false, updatable=false)
   @org.hibernate.annotations.Generated(
      org.hibernate.annotations.GenerationTime.ALWAYS
   )
   
   private DataSource dataSource = null;
   @OneToMany(fetch=FetchType.LAZY, mappedBy="organizationParty", cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REMOVE})
   @JoinColumn(name="ORGANIZATION_PARTY_ID")
   
   private List<AccountBalanceHistory> organizationAccountBalanceHistorys = null;
   @OneToMany(fetch=FetchType.LAZY, mappedBy="party", cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REMOVE})
   @JoinColumn(name="PARTY_ID")
   
   private List<AccountBalanceHistory> accountBalanceHistorys = null;
   private transient List<AcctgTagEnumType> acctgTagEnumTypes = null;
   @OneToOne(cascade = {CascadeType.PERSIST, CascadeType.MERGE}, fetch=FetchType.LAZY)
   @JoinColumn(name="PARTY_ID", insertable=false, updatable=false)
   @org.hibernate.annotations.Generated(
      org.hibernate.annotations.GenerationTime.ALWAYS
   )
   
   private AcctgTagPostingCheck acctgTagPostingCheck = null;
   @OneToMany(fetch=FetchType.LAZY, mappedBy="party", cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REMOVE})
   @JoinColumn(name="PARTY_ID")
   
   private List<AcctgTrans> acctgTranses = null;
   private transient List<AcctgTransEntry> acctgTransEntrys = null;
   @OneToOne(cascade = {CascadeType.PERSIST, CascadeType.MERGE}, fetch=FetchType.LAZY)
   @JoinColumn(name="PARTY_ID", insertable=false, updatable=false)
   @org.hibernate.annotations.Generated(
      org.hibernate.annotations.GenerationTime.ALWAYS
   )
   
   private Affiliate affiliate = null;
   private transient List<Agreement> fromAgreements = null;
   private transient List<Agreement> toAgreements = null;
   @OneToMany(fetch=FetchType.LAZY, mappedBy="party", cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REMOVE})
   @JoinColumn(name="PARTY_ID")
   
   private List<AgreementPartyApplic> agreementPartyApplics = null;
   @OneToMany(fetch=FetchType.LAZY, mappedBy="party", cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REMOVE})
   @JoinColumn(name="PARTY_ID")
   
   private List<AgreementRole> agreementRoles = null;
   @OneToMany(fetch=FetchType.LAZY, mappedBy="party", cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REMOVE})
   @JoinColumn(name="PARTY_ID")
   
   private List<AgreementTerm> agreementTerms = null;
   private transient List<AgreementTermBilling> agreementTermBillings = null;
   private transient List<AgreementTypeForRoleType> agreementTypeForRoleTypes = null;
   @OneToMany(fetch=FetchType.LAZY, mappedBy="party", cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REMOVE})
   @JoinColumn(name="PARTY_ID")
   
   private List<BillingAccountRole> billingAccountRoles = null;
   @OneToMany(fetch=FetchType.LAZY, mappedBy="party", cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REMOVE})
   @JoinColumn(name="PARTY_ID")
   
   private List<BudgetReview> budgetReviews = null;
   @OneToMany(fetch=FetchType.LAZY, mappedBy="party", cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REMOVE})
   @JoinColumn(name="PARTY_ID")
   
   private List<BudgetRole> budgetRoles = null;
   private transient List<CarrierReturnService> carrierReturnServices = null;
   @OneToMany(fetch=FetchType.LAZY, mappedBy="party", cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REMOVE})
   @JoinColumn(name="PARTY_ID")
   
   private List<CarrierShipmentBoxType> carrierShipmentBoxTypes = null;
   @OneToMany(fetch=FetchType.LAZY, mappedBy="party", cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REMOVE})
   @JoinColumn(name="PARTY_ID")
   
   private List<CarrierShipmentMethod> carrierShipmentMethods = null;
   private transient List<CommunicationEvent> toCommunicationEvents = null;
   private transient List<CommunicationEvent> fromCommunicationEvents = null;
   @OneToMany(fetch=FetchType.LAZY, mappedBy="party", cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REMOVE})
   @JoinColumn(name="PARTY_ID")
   
   private List<CommunicationEventRole> communicationEventRoles = null;
   @OneToMany(fetch=FetchType.LAZY, mappedBy="ownerParty", cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REMOVE})
   @JoinColumn(name="OWNER_PARTY_ID")
   
   private List<ContactList> ownerContactLists = null;
   @OneToMany(fetch=FetchType.LAZY, mappedBy="party", cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REMOVE})
   @JoinColumn(name="PARTY_ID")
   
   private List<ContactListParty> contactListPartys = null;
   @OneToMany(fetch=FetchType.LAZY, mappedBy="party", cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REMOVE})
   @JoinColumn(name="PARTY_ID")
   
   private List<ContentApproval> contentApprovals = null;
   private transient List<ContentRevision> committedByContentRevisions = null;
   @OneToMany(fetch=FetchType.LAZY, mappedBy="party", cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REMOVE})
   @JoinColumn(name="PARTY_ID")
   
   private List<ContentRole> contentRoles = null;
   @OneToMany(fetch=FetchType.LAZY, mappedBy="party", cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REMOVE})
   @JoinColumn(name="PARTY_ID")
   
   private List<CostComponent> costComponents = null;
   @OneToMany(fetch=FetchType.LAZY, mappedBy="fromParty", cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REMOVE})
   @JoinColumn(name="FROM_PARTY_ID")
   @ContainedIn
   private List<CustRequest> fromCustRequests = null;
   @OneToMany(fetch=FetchType.LAZY, mappedBy="party", cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REMOVE})
   @JoinColumn(name="PARTY_ID")
   
   private List<CustRequestParty> custRequestPartys = null;
   @OneToMany(fetch=FetchType.LAZY, mappedBy="party", cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REMOVE})
   @JoinColumn(name="PARTY_ID")
   @ContainedIn
   private List<CustRequestRole> custRequestRoles = null;
   @OneToMany(fetch=FetchType.LAZY, mappedBy="party", cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REMOVE})
   @JoinColumn(name="PARTY_ID")
   
   private List<CustRequestType> custRequestTypes = null;
   @OneToMany(fetch=FetchType.LAZY, mappedBy="organizationParty", cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REMOVE})
   @JoinColumn(name="ORGANIZATION_PARTY_ID")
   
   private List<CustomTimePeriod> organizationCustomTimePeriods = null;
   @OneToMany(fetch=FetchType.LAZY, mappedBy="customerParty", cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REMOVE})
   @JoinColumn(name="CUSTOMER_PARTY_ID")
   
   private List<DataImportOrderHeader> customerDataImportOrderHeaders = null;
   @OneToMany(fetch=FetchType.LAZY, mappedBy="supplierParty", cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REMOVE})
   @JoinColumn(name="SUPPLIER_PARTY_ID")
   
   private List<DataImportOrderHeader> supplierDataImportOrderHeaders = null;
   @OneToOne(cascade = {CascadeType.PERSIST, CascadeType.MERGE}, fetch=FetchType.LAZY)
   @JoinColumn(name="PARTY_ID", insertable=false, updatable=false)
   @org.hibernate.annotations.Generated(
      org.hibernate.annotations.GenerationTime.ALWAYS
   )
   
   private DataImportShoppingList dataImportShoppingList = null;
   @OneToMany(fetch=FetchType.LAZY, mappedBy="party", cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REMOVE})
   @JoinColumn(name="PARTY_ID")
   
   private List<DataImportShoppingListItem> dataImportShoppingListItems = null;
   @OneToMany(fetch=FetchType.LAZY, mappedBy="party", cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REMOVE})
   @JoinColumn(name="PARTY_ID")
   
   private List<DataResourceRole> dataResourceRoles = null;
   @OneToMany(fetch=FetchType.LAZY, mappedBy="party", cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REMOVE})
   @JoinColumn(name="PARTY_ID")
   
   private List<EmplLeave> emplLeaves = null;
   @OneToMany(fetch=FetchType.LAZY, mappedBy="party", cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REMOVE})
   @JoinColumn(name="PARTY_ID")
   
   private List<EmplPosition> emplPositions = null;
   @OneToMany(fetch=FetchType.LAZY, mappedBy="party", cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REMOVE})
   @JoinColumn(name="PARTY_ID")
   
   private List<EmplPositionFulfillment> emplPositionFulfillments = null;
   @OneToMany(fetch=FetchType.LAZY, mappedBy="organizationParty", cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REMOVE})
   @JoinColumn(name="ORGANIZATION_PARTY_ID")
   
   private List<EmployeePaycheckType> organizationEmployeePaycheckTypes = null;
   @OneToMany(fetch=FetchType.LAZY, mappedBy="employeeParty", cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REMOVE})
   @JoinColumn(name="EMPLOYEE_PARTY_ID")
   
   private List<EmployeePaycheckType> employeeEmployeePaycheckTypes = null;
   private transient List<Employment> toEmployments = null;
   private transient List<Employment> fromEmployments = null;
   @OneToMany(fetch=FetchType.LAZY, mappedBy="applyingParty", cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REMOVE})
   @JoinColumn(name="APPLYING_PARTY_ID")
   
   private List<EmploymentApp> applyingEmploymentApps = null;
   @OneToMany(fetch=FetchType.LAZY, mappedBy="referredByParty", cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REMOVE})
   @JoinColumn(name="REFERRED_BY_PARTY_ID")
   
   private List<EmploymentApp> referredByEmploymentApps = null;
   @OneToMany(fetch=FetchType.LAZY, mappedBy="ownerParty", cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REMOVE})
   @JoinColumn(name="OWNER_PARTY_ID")
   
   private List<Facility> ownerFacilitys = null;
   @OneToMany(fetch=FetchType.LAZY, mappedBy="party", cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REMOVE})
   @JoinColumn(name="PARTY_ID")
   
   private List<FacilityCarrierShipment> facilityCarrierShipments = null;
   @OneToMany(fetch=FetchType.LAZY, mappedBy="party", cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REMOVE})
   @JoinColumn(name="PARTY_ID")
   
   private List<FacilityGroupRole> facilityGroupRoles = null;
   @OneToMany(fetch=FetchType.LAZY, mappedBy="party", cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REMOVE})
   @JoinColumn(name="PARTY_ID")
   
   private List<FacilityParty> facilityPartys = null;
   @OneToMany(fetch=FetchType.LAZY, mappedBy="party", cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REMOVE})
   @JoinColumn(name="PARTY_ID")
   
   private List<FacilityPartyPermission> facilityPartyPermissions = null;
   @OneToMany(fetch=FetchType.LAZY, mappedBy="party", cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REMOVE})
   @JoinColumn(name="PARTY_ID")
   
   private List<FacilityRole> facilityRoles = null;
   @OneToMany(fetch=FetchType.LAZY, mappedBy="organizationParty", cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REMOVE})
   @JoinColumn(name="ORGANIZATION_PARTY_ID")
   
   private List<FinAccount> organizationFinAccounts = null;
   @OneToMany(fetch=FetchType.LAZY, mappedBy="ownerParty", cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REMOVE})
   @JoinColumn(name="OWNER_PARTY_ID")
   
   private List<FinAccount> ownerFinAccounts = null;
   @OneToMany(fetch=FetchType.LAZY, mappedBy="party", cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REMOVE})
   @JoinColumn(name="PARTY_ID")
   
   private List<FinAccountRole> finAccountRoles = null;
   @OneToMany(fetch=FetchType.LAZY, mappedBy="party", cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REMOVE})
   @JoinColumn(name="PARTY_ID")
   
   private List<FinAccountTrans> finAccountTranses = null;
   @OneToMany(fetch=FetchType.LAZY, mappedBy="performedByParty", cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REMOVE})
   @JoinColumn(name="PERFORMED_BY_PARTY_ID")
   
   private List<FinAccountTrans> performedByFinAccountTranses = null;
   @OneToMany(fetch=FetchType.LAZY, mappedBy="organizationParty", cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REMOVE})
   @JoinColumn(name="ORGANIZATION_PARTY_ID")
   
   private List<FinAccountTypeGlAccount> organizationFinAccountTypeGlAccounts = null;
   @OneToMany(fetch=FetchType.LAZY, mappedBy="party", cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REMOVE})
   @JoinColumn(name="PARTY_ID")
   
   private List<FixedAsset> fixedAssets = null;
   private transient List<FixedAssetRegistration> govAgencyFixedAssetRegistrations = null;
   @OneToMany(fetch=FetchType.LAZY, mappedBy="party", cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REMOVE})
   @JoinColumn(name="PARTY_ID")
   
   private List<GiftCardFulfillment> giftCardFulfillments = null;
   private transient List<GlAccountHistory> glAccountHistorys = null;
   private transient List<GlAccountOrganization> glAccountOrganizations = null;
   @OneToMany(fetch=FetchType.LAZY, mappedBy="party", cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REMOVE})
   @JoinColumn(name="PARTY_ID")
   
   private List<GlAccountRole> glAccountRoles = null;
   @OneToMany(fetch=FetchType.LAZY, mappedBy="organizationParty", cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REMOVE})
   @JoinColumn(name="ORGANIZATION_PARTY_ID")
   
   private List<GlAccountTypeDefault> organizationGlAccountTypeDefaults = null;
   private transient List<GlJournal> glJournals = null;
   private transient List<GlReconciliation> glReconciliations = null;
   @OneToMany(fetch=FetchType.LAZY, mappedBy="party", cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REMOVE})
   @JoinColumn(name="PARTY_ID")
   
   private List<InventoryItem> inventoryItems = null;
   @OneToMany(fetch=FetchType.LAZY, mappedBy="ownerParty", cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REMOVE})
   @JoinColumn(name="OWNER_PARTY_ID")
   
   private List<InventoryItem> ownerInventoryItems = null;
   @OneToMany(fetch=FetchType.LAZY, mappedBy="fromParty", cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REMOVE})
   @JoinColumn(name="PARTY_ID_FROM")
   
   private List<Invoice> fromInvoices = null;
   @OneToMany(fetch=FetchType.LAZY, mappedBy="party", cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REMOVE})
   @JoinColumn(name="PARTY_ID")
   
   private List<Invoice> invoices = null;
   private transient List<InvoiceAdjustmentGlAccount> invoiceAdjustmentGlAccounts = null;
   private transient List<InvoiceGlAccountType> invoiceGlAccountTypes = null;
   private transient List<InvoiceItem> taxAuthorityInvoiceItems = null;
   private transient List<InvoiceItem> overrideOrgInvoiceItems = null;
   @OneToMany(fetch=FetchType.LAZY, mappedBy="organizationParty", cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REMOVE})
   @JoinColumn(name="ORGANIZATION_PARTY_ID")
   
   private List<InvoiceItemTypeGlAccount> organizationInvoiceItemTypeGlAccounts = null;
   @OneToMany(fetch=FetchType.LAZY, mappedBy="party", cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REMOVE})
   @JoinColumn(name="PARTY_ID")
   
   private List<InvoiceRole> invoiceRoles = null;
   @OneToMany(fetch=FetchType.LAZY, mappedBy="party", cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REMOVE})
   @JoinColumn(name="PARTY_ID")
   
   private List<ItemIssuanceRole> itemIssuanceRoles = null;
   private transient List<Lot> lots = null;
   @OneToMany(fetch=FetchType.LAZY, mappedBy="party", cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REMOVE})
   @JoinColumn(name="PARTY_ID")
   
   private List<MarketingCampaignRole> marketingCampaignRoles = null;
   private transient List<NoteData> noteNoteDatas = null;
   private transient List<OldOrderShipmentPreference> carrierOldOrderShipmentPreferences = null;
   @OneToMany(fetch=FetchType.LAZY, mappedBy="party", cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REMOVE})
   @JoinColumn(name="PARTY_ID")
   
   private List<OldPartyRate> oldPartyRates = null;
   @OneToMany(fetch=FetchType.LAZY, mappedBy="party", cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REMOVE})
   @JoinColumn(name="PARTY_ID")
   
   private List<OldPartyTaxInfo> oldPartyTaxInfoes = null;
   @OneToMany(fetch=FetchType.LAZY, mappedBy="party", cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REMOVE})
   @JoinColumn(name="PARTY_ID")
   
   private List<OldValueLinkFulfillment> oldValueLinkFulfillments = null;
   @OneToMany(fetch=FetchType.LAZY, mappedBy="party", cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REMOVE})
   @JoinColumn(name="PARTY_ID")
   
   private List<OldWorkEffortAssignmentRate> oldWorkEffortAssignmentRates = null;
   private transient List<OrderHeader> billFromVendorOrderHeaders = null;
   private transient List<OrderHeader> billToCustomerOrderHeaders = null;
   @OneToMany(fetch=FetchType.LAZY, mappedBy="party", cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REMOVE})
   @JoinColumn(name="PARTY_ID")
   
   private List<OrderItemRole> orderItemRoles = null;
   private transient List<OrderItemShipGroup> supplierOrderItemShipGroups = null;
   private transient List<OrderItemShipGroup> vendorOrderItemShipGroups = null;
   private transient List<OrderItemShipGroup> carrierOrderItemShipGroups = null;
   @OneToMany(fetch=FetchType.LAZY, mappedBy="party", cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REMOVE})
   @JoinColumn(name="PARTY_ID")
   @ContainedIn
   private List<OrderRole> orderRoles = null;
   @OneToOne(cascade = {CascadeType.PERSIST, CascadeType.MERGE}, fetch=FetchType.LAZY)
   @JoinColumn(name="PARTY_ID", insertable=false, updatable=false)
   @org.hibernate.annotations.Generated(
      org.hibernate.annotations.GenerationTime.ALWAYS
   )
   
   private PartyAcctgPreference partyAcctgPreference = null;
   @OneToMany(fetch=FetchType.LAZY, mappedBy="party", cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REMOVE})
   @JoinColumn(name="PARTY_ID")
   
   private List<PartyAttribute> partyAttributes = null;
   private transient List<PartyBenefit> toPartyBenefits = null;
   private transient List<PartyBenefit> fromPartyBenefits = null;
   @OneToMany(fetch=FetchType.LAZY, mappedBy="party", cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REMOVE})
   @JoinColumn(name="PARTY_ID")
   
   private List<PartyCarrierAccount> partyCarrierAccounts = null;
   @OneToMany(fetch=FetchType.LAZY, mappedBy="carrierParty", cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REMOVE})
   @JoinColumn(name="CARRIER_PARTY_ID")
   
   private List<PartyCarrierAccount> carrierPartyCarrierAccounts = null;
   @OneToMany(fetch=FetchType.LAZY, mappedBy="party", cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REMOVE})
   @JoinColumn(name="PARTY_ID")
   
   private List<PartyClassification> partyClassifications = null;
   @OneToMany(fetch=FetchType.LAZY, mappedBy="party", cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REMOVE})
   @JoinColumn(name="PARTY_ID")
   
   private List<PartyContactMech> partyContactMeches = null;
   @OneToMany(fetch=FetchType.LAZY, mappedBy="party", cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REMOVE})
   @JoinColumn(name="PARTY_ID")
   
   private List<PartyContactMechPurpose> partyContactMechPurposes = null;
   @OneToMany(fetch=FetchType.LAZY, mappedBy="party", cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REMOVE})
   @JoinColumn(name="PARTY_ID")
   
   private List<PartyContent> partyContents = null;
   @OneToMany(fetch=FetchType.LAZY, mappedBy="party", cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REMOVE})
   @JoinColumn(name="PARTY_ID")
   
   private List<PartyDataSource> partyDataSources = null;
   @OneToMany(fetch=FetchType.LAZY, mappedBy="party", cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REMOVE})
   @JoinColumn(name="PARTY_ID")
   
   private List<PartyFixedAssetAssignment> partyFixedAssetAssignments = null;
   @OneToMany(fetch=FetchType.LAZY, mappedBy="party", cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REMOVE})
   @JoinColumn(name="PARTY_ID")
   
   private List<PartyGeoPoint> partyGeoPoints = null;
   @OneToMany(fetch=FetchType.LAZY, mappedBy="organizationParty", cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REMOVE})
   @JoinColumn(name="ORGANIZATION_PARTY_ID")
   
   private List<PartyGlAccount> organizationPartyGlAccounts = null;
   @OneToMany(fetch=FetchType.LAZY, mappedBy="party", cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REMOVE})
   @JoinColumn(name="PARTY_ID")
   
   private List<PartyGlAccount> partyGlAccounts = null;
   @OneToOne(cascade = {CascadeType.PERSIST, CascadeType.MERGE}, fetch=FetchType.LAZY)
   @JoinColumn(name="PARTY_ID", insertable=false, updatable=false)
   @org.hibernate.annotations.Generated(
      org.hibernate.annotations.GenerationTime.ALWAYS
   )
   @IndexedEmbedded(depth = 2)
   private PartyGroup partyGroup = null;
   @OneToOne(cascade = {CascadeType.PERSIST, CascadeType.MERGE}, fetch=FetchType.LAZY)
   @JoinColumn(name="PARTY_ID", insertable=false, updatable=false)
   @org.hibernate.annotations.Generated(
      org.hibernate.annotations.GenerationTime.ALWAYS
   )
   
   private PartyIcsAvsOverride partyIcsAvsOverride = null;
   @OneToMany(fetch=FetchType.LAZY, mappedBy="party", cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REMOVE})
   @JoinColumn(name="PARTY_ID_FROM")
   
   private List<PartyInvitation> partyInvitations = null;
   private transient List<PartyInvitationGroupAssoc> toPartyInvitationGroupAssocs = null;
   @OneToMany(fetch=FetchType.LAZY, mappedBy="party", cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REMOVE})
   @JoinColumn(name="PARTY_ID")
   
   private List<PartyNameHistory> partyNameHistorys = null;
   @OneToMany(fetch=FetchType.LAZY, mappedBy="party", cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REMOVE})
   @JoinColumn(name="PARTY_ID")
   
   private List<PartyNeed> partyNeeds = null;
   @OneToMany(fetch=FetchType.LAZY, mappedBy="party", cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REMOVE})
   @JoinColumn(name="PARTY_ID")
   
   private List<PartyNote> partyNotes = null;
   @OneToMany(fetch=FetchType.LAZY, mappedBy="party", cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REMOVE})
   @JoinColumn(name="PARTY_ID")
   
   private List<PartyProfileDefault> partyProfileDefaults = null;
   @OneToMany(fetch=FetchType.LAZY, mappedBy="party", cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REMOVE})
   @JoinColumn(name="PARTY_ID")
   
   private List<PartyQual> partyQuals = null;
   @OneToMany(fetch=FetchType.LAZY, mappedBy="party", cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REMOVE})
   @JoinColumn(name="PARTY_ID")
   
   private List<PartyRate> partyRates = null;
   private transient List<PartyRelationship> fromPartyRelationships = null;
   private transient List<PartyRelationship> toPartyRelationships = null;
   @OneToMany(fetch=FetchType.LAZY, mappedBy="party", cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REMOVE})
   @JoinColumn(name="PARTY_ID")
   
   private List<PartyResume> partyResumes = null;
   @OneToMany(fetch=FetchType.LAZY, mappedBy="party", cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REMOVE})
   @JoinColumn(name="PARTY_ID")
   @ContainedIn
   private List<PartyRole> partyRoles = null;
   @OneToMany(fetch=FetchType.LAZY, mappedBy="party", cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REMOVE})
   @JoinColumn(name="PARTY_ID")
   
   private List<PartySkill> partySkills = null;
   @OneToMany(fetch=FetchType.LAZY, mappedBy="party", cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REMOVE})
   @JoinColumn(name="PARTY_ID")
   
   private List<PartyStatus> partyStatuses = null;
   @OneToOne(cascade = {CascadeType.PERSIST, CascadeType.MERGE}, fetch=FetchType.LAZY)
   @JoinColumn(name="PARTY_ID", insertable=false, updatable=false)
   @org.hibernate.annotations.Generated(
      org.hibernate.annotations.GenerationTime.ALWAYS
   )
   @IndexedEmbedded(depth = 2)
   private PartySupplementalData partySupplementalData = null;
   @OneToMany(fetch=FetchType.LAZY, mappedBy="parentParty", cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REMOVE})
   @JoinColumn(name="PARENT_PARTY_ID")
   @ContainedIn
   private List<PartySupplementalData> parentPartySupplementalDatas = null;
   @OneToMany(fetch=FetchType.LAZY, mappedBy="party", cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REMOVE})
   @JoinColumn(name="PARTY_ID")
   
   private List<PartyTaxAuthInfo> partyTaxAuthInfoes = null;
   private transient List<PaycheckItem> paycheckItems = null;
   @OneToMany(fetch=FetchType.LAZY, mappedBy="organizationParty", cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REMOVE})
   @JoinColumn(name="ORGANIZATION_PARTY_ID")
   
   private List<PaycheckItemTypeGlAccount> organizationPaycheckItemTypeGlAccounts = null;
   private transient List<PaycheckItemTypeGlAccount> defaultDueToPaycheckItemTypeGlAccounts = null;
   private transient List<Payment> fromPayments = null;
   private transient List<Payment> toPayments = null;
   private transient List<PaymentGlAccountTypeMap> paymentGlAccountTypeMaps = null;
   @OneToMany(fetch=FetchType.LAZY, mappedBy="party", cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REMOVE})
   @JoinColumn(name="PARTY_ID")
   
   private List<PaymentMethod> paymentMethods = null;
   @OneToMany(fetch=FetchType.LAZY, mappedBy="organizationParty", cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REMOVE})
   @JoinColumn(name="ORGANIZATION_PARTY_ID")
   
   private List<PaymentMethodTypeGlAccount> organizationPaymentMethodTypeGlAccounts = null;
   @OneToMany(fetch=FetchType.LAZY, mappedBy="party", cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REMOVE})
   @JoinColumn(name="PARTY_ID")
   
   private List<PayrollPreference> payrollPreferences = null;
   @OneToMany(fetch=FetchType.LAZY, mappedBy="employeeParty", cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REMOVE})
   @JoinColumn(name="EMPLOYEE_PARTY_ID")
   
   private List<PerfReview> employeePerfReviews = null;
   private transient List<PerfReview> managerPerfReviews = null;
   @OneToMany(fetch=FetchType.LAZY, mappedBy="employeeParty", cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REMOVE})
   @JoinColumn(name="EMPLOYEE_PARTY_ID")
   
   private List<PerfReviewItem> employeePerfReviewItems = null;
   @OneToMany(fetch=FetchType.LAZY, mappedBy="party", cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REMOVE})
   @JoinColumn(name="PARTY_ID")
   
   private List<PerformanceNote> performanceNotes = null;
   @OneToOne(cascade = {CascadeType.PERSIST, CascadeType.MERGE}, fetch=FetchType.LAZY)
   @JoinColumn(name="PARTY_ID", insertable=false, updatable=false)
   @org.hibernate.annotations.Generated(
      org.hibernate.annotations.GenerationTime.ALWAYS
   )
   @IndexedEmbedded(depth = 2)
   private Person person = null;
   @OneToMany(fetch=FetchType.LAZY, mappedBy="party", cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REMOVE})
   @JoinColumn(name="PARTY_ID")
   
   private List<PersonTraining> personTrainings = null;
   @OneToMany(fetch=FetchType.LAZY, mappedBy="party", cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REMOVE})
   @JoinColumn(name="PARTY_ID")
   
   private List<ProdCatalogRole> prodCatalogRoles = null;
   @OneToMany(fetch=FetchType.LAZY, mappedBy="manufacturerParty", cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REMOVE})
   @JoinColumn(name="MANUFACTURER_PARTY_ID")
   
   private List<Product> manufacturerProducts = null;
   private transient List<ProductAverageCost> productAverageCosts = null;
   private transient List<ProductCategoryGlAccount> productCategoryGlAccounts = null;
   @OneToMany(fetch=FetchType.LAZY, mappedBy="party", cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REMOVE})
   @JoinColumn(name="PARTY_ID")
   
   private List<ProductCategoryRole> productCategoryRoles = null;
   private transient List<ProductGlAccount> productGlAccounts = null;
   private transient List<ProductPromo> productPromoes = null;
   @OneToMany(fetch=FetchType.LAZY, mappedBy="party", cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REMOVE})
   @JoinColumn(name="PARTY_ID")
   
   private List<ProductPromoCodeParty> productPromoCodePartys = null;
   private transient List<ProductPromoUse> productPromoUses = null;
   @OneToMany(fetch=FetchType.LAZY, mappedBy="party", cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REMOVE})
   @JoinColumn(name="PARTY_ID")
   
   private List<ProductRole> productRoles = null;
   private transient List<ProductStore> productStores = null;
   private transient List<ProductStore> defaultCarrierProductStores = null;
   private transient List<ProductStore> billToThirdPartyProductStores = null;
   @OneToMany(fetch=FetchType.LAZY, mappedBy="party", cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REMOVE})
   @JoinColumn(name="PARTY_ID")
   
   private List<ProductStoreGroupRole> productStoreGroupRoles = null;
   @OneToMany(fetch=FetchType.LAZY, mappedBy="party", cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REMOVE})
   @JoinColumn(name="PARTY_ID")
   
   private List<ProductStoreRole> productStoreRoles = null;
   @OneToMany(fetch=FetchType.LAZY, mappedBy="party", cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REMOVE})
   @JoinColumn(name="COMPANY_PARTY_ID")
   
   private List<ProductStoreShipmentMeth> productStoreShipmentMeths = null;
   @OneToMany(fetch=FetchType.LAZY, mappedBy="vendorParty", cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REMOVE})
   @JoinColumn(name="VENDOR_PARTY_ID")
   
   private List<ProductStoreVendorPayment> vendorProductStoreVendorPayments = null;
   @OneToMany(fetch=FetchType.LAZY, mappedBy="vendorParty", cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REMOVE})
   @JoinColumn(name="VENDOR_PARTY_ID")
   
   private List<ProductStoreVendorShipment> vendorProductStoreVendorShipments = null;
   @OneToMany(fetch=FetchType.LAZY, mappedBy="carrierParty", cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REMOVE})
   @JoinColumn(name="CARRIER_PARTY_ID")
   
   private List<ProductStoreVendorShipment> carrierProductStoreVendorShipments = null;
   @OneToMany(fetch=FetchType.LAZY, mappedBy="party", cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REMOVE})
   @JoinColumn(name="PARTY_ID")
   
   private List<Quote> quotes = null;
   @OneToMany(fetch=FetchType.LAZY, mappedBy="createdByParty", cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REMOVE})
   @JoinColumn(name="CREATED_BY_PARTY_ID")
   
   private List<Quote> createdByQuotes = null;
   @OneToMany(fetch=FetchType.LAZY, mappedBy="contactParty", cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REMOVE})
   @JoinColumn(name="CONTACT_PARTY_ID")
   
   private List<Quote> contactQuotes = null;
   @OneToMany(fetch=FetchType.LAZY, mappedBy="party", cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REMOVE})
   @JoinColumn(name="PARTY_ID")
   
   private List<QuoteRole> quoteRoles = null;
   @OneToMany(fetch=FetchType.LAZY, mappedBy="party", cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REMOVE})
   @JoinColumn(name="PARTY_ID")
   
   private List<RateAmount> rateAmounts = null;
   @OneToMany(fetch=FetchType.LAZY, mappedBy="party", cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REMOVE})
   @JoinColumn(name="PARTY_ID")
   
   private List<ReorderGuideline> reorderGuidelines = null;
   @OneToMany(fetch=FetchType.LAZY, mappedBy="party", cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REMOVE})
   @JoinColumn(name="PARTY_ID")
   
   private List<RequirementRole> requirementRoles = null;
   @OneToMany(fetch=FetchType.LAZY, mappedBy="party", cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REMOVE})
   @JoinColumn(name="PARTY_ID")
   
   private List<RespondingParty> respondingPartys = null;
   private transient List<ReturnHeader> returnHeaders = null;
   @OneToMany(fetch=FetchType.LAZY, mappedBy="toParty", cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REMOVE})
   @JoinColumn(name="TO_PARTY_ID")
   
   private List<ReturnHeader> toReturnHeaders = null;
   @OneToMany(fetch=FetchType.LAZY, mappedBy="organizationParty", cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REMOVE})
   @JoinColumn(name="ORGANIZATION_PARTY_ID")
   
   private List<SalesForecast> organizationSalesForecasts = null;
   @OneToMany(fetch=FetchType.LAZY, mappedBy="internalParty", cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REMOVE})
   @JoinColumn(name="INTERNAL_PARTY_ID")
   
   private List<SalesForecast> internalSalesForecasts = null;
   @OneToMany(fetch=FetchType.LAZY, mappedBy="organizationParty", cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REMOVE})
   @JoinColumn(name="ORGANIZATION_PARTY_ID")
   
   private List<SalesForecastHistory> organizationSalesForecastHistorys = null;
   @OneToMany(fetch=FetchType.LAZY, mappedBy="internalParty", cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REMOVE})
   @JoinColumn(name="INTERNAL_PARTY_ID")
   
   private List<SalesForecastHistory> internalSalesForecastHistorys = null;
   @OneToMany(fetch=FetchType.LAZY, mappedBy="party", cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REMOVE})
   @JoinColumn(name="PARTY_ID")
   
   private List<SalesForecastItem> salesForecastItems = null;
   @OneToMany(fetch=FetchType.LAZY, mappedBy="party", cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REMOVE})
   @JoinColumn(name="PARTY_ID")
   @ContainedIn
   private List<SalesOpportunityRole> salesOpportunityRoles = null;
   @OneToMany(fetch=FetchType.LAZY, mappedBy="party", cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REMOVE})
   @JoinColumn(name="PARTY_ID")
   
   private List<SegmentGroupRole> segmentGroupRoles = null;
   private transient List<ServerHit> serverHits = null;
   private transient List<Shipment> toShipments = null;
   private transient List<Shipment> fromShipments = null;
   @OneToMany(fetch=FetchType.LAZY, mappedBy="party", cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REMOVE})
   @JoinColumn(name="PARTY_ID")
   
   private List<ShipmentCostEstimate> shipmentCostEstimates = null;
   @OneToMany(fetch=FetchType.LAZY, mappedBy="party", cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REMOVE})
   @JoinColumn(name="PARTY_ID")
   
   private List<ShipmentReceiptRole> shipmentReceiptRoles = null;
   private transient List<ShipmentRouteSegment> carrierShipmentRouteSegments = null;
   @OneToMany(fetch=FetchType.LAZY, mappedBy="party", cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REMOVE})
   @JoinColumn(name="PARTY_ID")
   
   private List<ShoppingList> shoppingLists = null;
   @OneToMany(fetch=FetchType.LAZY, mappedBy="party", cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REMOVE})
   @JoinColumn(name="PARTY_ID")
   
   private List<Subscription> subscriptions = null;
   @OneToMany(fetch=FetchType.LAZY, mappedBy="originatedFromParty", cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REMOVE})
   @JoinColumn(name="ORIGINATED_FROM_PARTY_ID")
   
   private List<Subscription> originatedFromSubscriptions = null;
   @OneToMany(fetch=FetchType.LAZY, mappedBy="party", cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REMOVE})
   @JoinColumn(name="PARTY_ID")
   
   private List<SupplierProduct> supplierProducts = null;
   @OneToMany(fetch=FetchType.LAZY, mappedBy="party", cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REMOVE})
   @JoinColumn(name="PARTY_ID")
   
   private List<SupplierProductFeature> supplierProductFeatures = null;
   @OneToMany(fetch=FetchType.LAZY, mappedBy="party", cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REMOVE})
   @JoinColumn(name="PARTY_ID")
   
   private List<SurveyResponse> surveyResponses = null;
   @OneToMany(fetch=FetchType.LAZY, mappedBy="taxAuthParty", cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REMOVE})
   @JoinColumn(name="TAX_AUTH_PARTY_ID")
   
   private List<TaxAuthority> taxAuthTaxAuthoritys = null;
   @OneToMany(fetch=FetchType.LAZY, mappedBy="organizationParty", cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REMOVE})
   @JoinColumn(name="ORGANIZATION_PARTY_ID")
   
   private List<TaxAuthorityGlAccount> organizationTaxAuthorityGlAccounts = null;
   @OneToMany(fetch=FetchType.LAZY, mappedBy="party", cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REMOVE})
   @JoinColumn(name="PARTY_ID")
   
   private List<TimeEntry> timeEntrys = null;
   @OneToMany(fetch=FetchType.LAZY, mappedBy="party", cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REMOVE})
   @JoinColumn(name="PARTY_ID")
   
   private List<Timesheet> timesheets = null;
   @OneToMany(fetch=FetchType.LAZY, mappedBy="clientParty", cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REMOVE})
   @JoinColumn(name="CLIENT_PARTY_ID")
   
   private List<Timesheet> clientTimesheets = null;
   @OneToMany(fetch=FetchType.LAZY, mappedBy="party", cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REMOVE})
   @JoinColumn(name="PARTY_ID")
   
   private List<TimesheetRole> timesheetRoles = null;
   @OneToMany(fetch=FetchType.LAZY, mappedBy="party", cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REMOVE})
   @JoinColumn(name="PARTY_ID")
   
   private List<UserLogin> userLogins = null;
   private transient List<UserLoginHistory> userLoginHistorys = null;
   @OneToMany(fetch=FetchType.LAZY, mappedBy="organizationParty", cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REMOVE})
   @JoinColumn(name="ORGANIZATION_PARTY_ID")
   
   private List<VarianceReasonGlAccount> organizationVarianceReasonGlAccounts = null;
   @OneToOne(cascade = {CascadeType.PERSIST, CascadeType.MERGE}, fetch=FetchType.LAZY)
   @JoinColumn(name="PARTY_ID", insertable=false, updatable=false)
   @org.hibernate.annotations.Generated(
      org.hibernate.annotations.GenerationTime.ALWAYS
   )
   
   private Vendor vendor = null;
   @OneToMany(fetch=FetchType.LAZY, mappedBy="vendorParty", cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REMOVE})
   @JoinColumn(name="VENDOR_PARTY_ID")
   
   private List<VendorProduct> vendorVendorProducts = null;
   @OneToMany(fetch=FetchType.LAZY, mappedBy="party", cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REMOVE})
   @JoinColumn(name="PARTY_ID")
   
   private List<Visit> visits = null;
   @OneToMany(fetch=FetchType.LAZY, mappedBy="party", cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REMOVE})
   @JoinColumn(name="PARTY_ID")
   
   private List<Visitor> visitors = null;
   @OneToMany(fetch=FetchType.LAZY, mappedBy="party", cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REMOVE})
   @JoinColumn(name="PARTY_ID")
   
   private List<WebSiteRole> webSiteRoles = null;
   @OneToMany(fetch=FetchType.LAZY, mappedBy="party", cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REMOVE})
   @JoinColumn(name="PARTY_ID")
   
   private List<WebUserPreference> webUserPreferences = null;
   @OneToMany(fetch=FetchType.LAZY, mappedBy="party", cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REMOVE})
   @JoinColumn(name="PARTY_ID")
   
   private List<WorkEffortPartyAssignment> workEffortPartyAssignments = null;

  /**
   * Default constructor.
   */
  public Party() {
      super();
      this.baseEntityName = "Party";
      this.isView = false;
      
      this.primaryKeyNames = new ArrayList<String>();
      this.primaryKeyNames.add("partyId");
      this.allFieldsNames = new ArrayList<String>();
      this.allFieldsNames.add("partyId");this.allFieldsNames.add("partyTypeId");this.allFieldsNames.add("externalId");this.allFieldsNames.add("preferredCurrencyUomId");this.allFieldsNames.add("description");this.allFieldsNames.add("statusId");this.allFieldsNames.add("createdDate");this.allFieldsNames.add("createdByUserLogin");this.allFieldsNames.add("lastModifiedDate");this.allFieldsNames.add("lastModifiedByUserLogin");this.allFieldsNames.add("dataSourceId");this.allFieldsNames.add("isUnread");this.allFieldsNames.add("lastUpdatedStamp");this.allFieldsNames.add("lastUpdatedTxStamp");this.allFieldsNames.add("createdStamp");this.allFieldsNames.add("createdTxStamp");
      this.nonPrimaryKeyNames = new ArrayList<String>();
      this.nonPrimaryKeyNames.addAll(allFieldsNames);
      this.nonPrimaryKeyNames.removeAll(primaryKeyNames);
  }

  /**
   * Constructor with a repository.
   * @param repository a <code>RepositoryInterface</code> value
   */
  public Party(RepositoryInterface repository) {
      this();
      initRepository(repository);
  }

    /**
     * Auto generated value setter.
     * @param partyId the partyId to set
     */
    public void setPartyId(String partyId) {
        this.partyId = partyId;
    }
    /**
     * Auto generated value setter.
     * @param partyTypeId the partyTypeId to set
     */
    public void setPartyTypeId(String partyTypeId) {
        this.partyTypeId = partyTypeId;
    }
    /**
     * Auto generated value setter.
     * @param externalId the externalId to set
     */
    public void setExternalId(String externalId) {
        this.externalId = externalId;
    }
    /**
     * Auto generated value setter.
     * @param preferredCurrencyUomId the preferredCurrencyUomId to set
     */
    public void setPreferredCurrencyUomId(String preferredCurrencyUomId) {
        this.preferredCurrencyUomId = preferredCurrencyUomId;
    }
    /**
     * Auto generated value setter.
     * @param description the description to set
     */
    public void setDescription(String description) {
        this.description = description;
    }
    /**
     * Auto generated value setter.
     * @param statusId the statusId to set
     */
    public void setStatusId(String statusId) {
        this.statusId = statusId;
    }
    /**
     * Auto generated value setter.
     * @param createdDate the createdDate to set
     */
    public void setCreatedDate(Timestamp createdDate) {
        this.createdDate = createdDate;
    }
    /**
     * Auto generated value setter.
     * @param createdByUserLogin the createdByUserLogin to set
     */
    public void setCreatedByUserLogin(String createdByUserLogin) {
        this.createdByUserLogin = createdByUserLogin;
    }
    /**
     * Auto generated value setter.
     * @param lastModifiedDate the lastModifiedDate to set
     */
    public void setLastModifiedDate(Timestamp lastModifiedDate) {
        this.lastModifiedDate = lastModifiedDate;
    }
    /**
     * Auto generated value setter.
     * @param lastModifiedByUserLogin the lastModifiedByUserLogin to set
     */
    public void setLastModifiedByUserLogin(String lastModifiedByUserLogin) {
        this.lastModifiedByUserLogin = lastModifiedByUserLogin;
    }
    /**
     * Auto generated value setter.
     * @param dataSourceId the dataSourceId to set
     */
    public void setDataSourceId(String dataSourceId) {
        this.dataSourceId = dataSourceId;
    }
    /**
     * Auto generated value setter.
     * @param isUnread the isUnread to set
     */
    public void setIsUnread(String isUnread) {
        this.isUnread = isUnread;
    }
    /**
     * Auto generated value setter.
     * @param lastUpdatedStamp the lastUpdatedStamp to set
     */
    public void setLastUpdatedStamp(Timestamp lastUpdatedStamp) {
        this.lastUpdatedStamp = lastUpdatedStamp;
    }
    /**
     * Auto generated value setter.
     * @param lastUpdatedTxStamp the lastUpdatedTxStamp to set
     */
    public void setLastUpdatedTxStamp(Timestamp lastUpdatedTxStamp) {
        this.lastUpdatedTxStamp = lastUpdatedTxStamp;
    }
    /**
     * Auto generated value setter.
     * @param createdStamp the createdStamp to set
     */
    public void setCreatedStamp(Timestamp createdStamp) {
        this.createdStamp = createdStamp;
    }
    /**
     * Auto generated value setter.
     * @param createdTxStamp the createdTxStamp to set
     */
    public void setCreatedTxStamp(Timestamp createdTxStamp) {
        this.createdTxStamp = createdTxStamp;
    }

    /**
     * Auto generated value accessor.
     * @return <code>String</code>
     */
    public String getPartyId() {
        return this.partyId;
    }
    /**
     * Auto generated value accessor.
     * @return <code>String</code>
     */
    public String getPartyTypeId() {
        return this.partyTypeId;
    }
    /**
     * Auto generated value accessor.
     * @return <code>String</code>
     */
    public String getExternalId() {
        return this.externalId;
    }
    /**
     * Auto generated value accessor.
     * @return <code>String</code>
     */
    public String getPreferredCurrencyUomId() {
        return this.preferredCurrencyUomId;
    }
    /**
     * Auto generated value accessor.
     * @return <code>String</code>
     */
    public String getDescription() {
        return this.description;
    }
    /**
     * Auto generated value accessor.
     * @return <code>String</code>
     */
    public String getStatusId() {
        return this.statusId;
    }
    /**
     * Auto generated value accessor.
     * @return <code>Timestamp</code>
     */
    public Timestamp getCreatedDate() {
        return this.createdDate;
    }
    /**
     * Auto generated value accessor.
     * @return <code>String</code>
     */
    public String getCreatedByUserLogin() {
        return this.createdByUserLogin;
    }
    /**
     * Auto generated value accessor.
     * @return <code>Timestamp</code>
     */
    public Timestamp getLastModifiedDate() {
        return this.lastModifiedDate;
    }
    /**
     * Auto generated value accessor.
     * @return <code>String</code>
     */
    public String getLastModifiedByUserLogin() {
        return this.lastModifiedByUserLogin;
    }
    /**
     * Auto generated value accessor.
     * @return <code>String</code>
     */
    public String getDataSourceId() {
        return this.dataSourceId;
    }
    /**
     * Auto generated value accessor.
     * @return <code>String</code>
     */
    public String getIsUnread() {
        return this.isUnread;
    }
    /**
     * Auto generated value accessor.
     * @return <code>Timestamp</code>
     */
    public Timestamp getLastUpdatedStamp() {
        return this.lastUpdatedStamp;
    }
    /**
     * Auto generated value accessor.
     * @return <code>Timestamp</code>
     */
    public Timestamp getLastUpdatedTxStamp() {
        return this.lastUpdatedTxStamp;
    }
    /**
     * Auto generated value accessor.
     * @return <code>Timestamp</code>
     */
    public Timestamp getCreatedStamp() {
        return this.createdStamp;
    }
    /**
     * Auto generated value accessor.
     * @return <code>Timestamp</code>
     */
    public Timestamp getCreatedTxStamp() {
        return this.createdTxStamp;
    }

    /**
     * Auto generated method that gets the related <code>PartyType</code> by the relation named <code>PartyType</code>.
     * @return the <code>PartyType</code>
     * @throws RepositoryException if an error occurs
     */
    public PartyType getPartyType() throws RepositoryException {
        if (this.partyType == null) {
            this.partyType = getRelatedOne(PartyType.class, "PartyType");
        }
        return this.partyType;
    }
    /**
     * Auto generated method that gets the related <code>UserLogin</code> by the relation named <code>CreatedByUserLogin</code>.
     * @return the <code>UserLogin</code>
     * @throws RepositoryException if an error occurs
     */
    public UserLogin getRelatedCreatedByUserLogin() throws RepositoryException {
        if (this.relatedCreatedByUserLogin == null) {
            this.relatedCreatedByUserLogin = getRelatedOne(UserLogin.class, "CreatedByUserLogin");
        }
        return this.relatedCreatedByUserLogin;
    }
    /**
     * Auto generated method that gets the related <code>UserLogin</code> by the relation named <code>LastModifiedByUserLogin</code>.
     * @return the <code>UserLogin</code>
     * @throws RepositoryException if an error occurs
     */
    public UserLogin getRelatedLastModifiedByUserLogin() throws RepositoryException {
        if (this.relatedLastModifiedByUserLogin == null) {
            this.relatedLastModifiedByUserLogin = getRelatedOne(UserLogin.class, "LastModifiedByUserLogin");
        }
        return this.relatedLastModifiedByUserLogin;
    }
    /**
     * Auto generated method that gets the related <code>Uom</code> by the relation named <code>Uom</code>.
     * @return the <code>Uom</code>
     * @throws RepositoryException if an error occurs
     */
    public Uom getUom() throws RepositoryException {
        if (this.uom == null) {
            this.uom = getRelatedOne(Uom.class, "Uom");
        }
        return this.uom;
    }
    /**
     * Auto generated method that gets the related <code>StatusItem</code> by the relation named <code>StatusItem</code>.
     * @return the <code>StatusItem</code>
     * @throws RepositoryException if an error occurs
     */
    public StatusItem getStatusItem() throws RepositoryException {
        if (this.statusItem == null) {
            this.statusItem = getRelatedOne(StatusItem.class, "StatusItem");
        }
        return this.statusItem;
    }
    /**
     * Auto generated method that gets the related <code>PartyTypeAttr</code> by the relation named <code>PartyTypeAttr</code>.
     * @return the list of <code>PartyTypeAttr</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends PartyTypeAttr> getPartyTypeAttrs() throws RepositoryException {
        if (this.partyTypeAttrs == null) {
            this.partyTypeAttrs = getRelated(PartyTypeAttr.class, "PartyTypeAttr");
        }
        return this.partyTypeAttrs;
    }
    /**
     * Auto generated method that gets the related <code>DataSource</code> by the relation named <code>DataSource</code>.
     * @return the <code>DataSource</code>
     * @throws RepositoryException if an error occurs
     */
    public DataSource getDataSource() throws RepositoryException {
        if (this.dataSource == null) {
            this.dataSource = getRelatedOne(DataSource.class, "DataSource");
        }
        return this.dataSource;
    }
    /**
     * Auto generated method that gets the related <code>AccountBalanceHistory</code> by the relation named <code>OrganizationAccountBalanceHistory</code>.
     * @return the list of <code>AccountBalanceHistory</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends AccountBalanceHistory> getOrganizationAccountBalanceHistorys() throws RepositoryException {
        if (this.organizationAccountBalanceHistorys == null) {
            this.organizationAccountBalanceHistorys = getRelated(AccountBalanceHistory.class, "OrganizationAccountBalanceHistory");
        }
        return this.organizationAccountBalanceHistorys;
    }
    /**
     * Auto generated method that gets the related <code>AccountBalanceHistory</code> by the relation named <code>AccountBalanceHistory</code>.
     * @return the list of <code>AccountBalanceHistory</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends AccountBalanceHistory> getAccountBalanceHistorys() throws RepositoryException {
        if (this.accountBalanceHistorys == null) {
            this.accountBalanceHistorys = getRelated(AccountBalanceHistory.class, "AccountBalanceHistory");
        }
        return this.accountBalanceHistorys;
    }
    /**
     * Auto generated method that gets the related <code>AcctgTagEnumType</code> by the relation named <code>AcctgTagEnumType</code>.
     * @return the list of <code>AcctgTagEnumType</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends AcctgTagEnumType> getAcctgTagEnumTypes() throws RepositoryException {
        if (this.acctgTagEnumTypes == null) {
            this.acctgTagEnumTypes = getRelated(AcctgTagEnumType.class, "AcctgTagEnumType");
        }
        return this.acctgTagEnumTypes;
    }
    /**
     * Auto generated method that gets the related <code>AcctgTagPostingCheck</code> by the relation named <code>AcctgTagPostingCheck</code>.
     * @return the <code>AcctgTagPostingCheck</code>
     * @throws RepositoryException if an error occurs
     */
    public AcctgTagPostingCheck getAcctgTagPostingCheck() throws RepositoryException {
        if (this.acctgTagPostingCheck == null) {
            this.acctgTagPostingCheck = getRelatedOne(AcctgTagPostingCheck.class, "AcctgTagPostingCheck");
        }
        return this.acctgTagPostingCheck;
    }
    /**
     * Auto generated method that gets the related <code>AcctgTrans</code> by the relation named <code>AcctgTrans</code>.
     * @return the list of <code>AcctgTrans</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends AcctgTrans> getAcctgTranses() throws RepositoryException {
        if (this.acctgTranses == null) {
            this.acctgTranses = getRelated(AcctgTrans.class, "AcctgTrans");
        }
        return this.acctgTranses;
    }
    /**
     * Auto generated method that gets the related <code>AcctgTransEntry</code> by the relation named <code>AcctgTransEntry</code>.
     * @return the list of <code>AcctgTransEntry</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends AcctgTransEntry> getAcctgTransEntrys() throws RepositoryException {
        if (this.acctgTransEntrys == null) {
            this.acctgTransEntrys = getRelated(AcctgTransEntry.class, "AcctgTransEntry");
        }
        return this.acctgTransEntrys;
    }
    /**
     * Auto generated method that gets the related <code>Affiliate</code> by the relation named <code>Affiliate</code>.
     * @return the <code>Affiliate</code>
     * @throws RepositoryException if an error occurs
     */
    public Affiliate getAffiliate() throws RepositoryException {
        if (this.affiliate == null) {
            this.affiliate = getRelatedOne(Affiliate.class, "Affiliate");
        }
        return this.affiliate;
    }
    /**
     * Auto generated method that gets the related <code>Agreement</code> by the relation named <code>FromAgreement</code>.
     * @return the list of <code>Agreement</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends Agreement> getFromAgreements() throws RepositoryException {
        if (this.fromAgreements == null) {
            this.fromAgreements = getRelated(Agreement.class, "FromAgreement");
        }
        return this.fromAgreements;
    }
    /**
     * Auto generated method that gets the related <code>Agreement</code> by the relation named <code>ToAgreement</code>.
     * @return the list of <code>Agreement</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends Agreement> getToAgreements() throws RepositoryException {
        if (this.toAgreements == null) {
            this.toAgreements = getRelated(Agreement.class, "ToAgreement");
        }
        return this.toAgreements;
    }
    /**
     * Auto generated method that gets the related <code>AgreementPartyApplic</code> by the relation named <code>AgreementPartyApplic</code>.
     * @return the list of <code>AgreementPartyApplic</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends AgreementPartyApplic> getAgreementPartyApplics() throws RepositoryException {
        if (this.agreementPartyApplics == null) {
            this.agreementPartyApplics = getRelated(AgreementPartyApplic.class, "AgreementPartyApplic");
        }
        return this.agreementPartyApplics;
    }
    /**
     * Auto generated method that gets the related <code>AgreementRole</code> by the relation named <code>AgreementRole</code>.
     * @return the list of <code>AgreementRole</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends AgreementRole> getAgreementRoles() throws RepositoryException {
        if (this.agreementRoles == null) {
            this.agreementRoles = getRelated(AgreementRole.class, "AgreementRole");
        }
        return this.agreementRoles;
    }
    /**
     * Auto generated method that gets the related <code>AgreementTerm</code> by the relation named <code>AgreementTerm</code>.
     * @return the list of <code>AgreementTerm</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends AgreementTerm> getAgreementTerms() throws RepositoryException {
        if (this.agreementTerms == null) {
            this.agreementTerms = getRelated(AgreementTerm.class, "AgreementTerm");
        }
        return this.agreementTerms;
    }
    /**
     * Auto generated method that gets the related <code>AgreementTermBilling</code> by the relation named <code>AgreementTermBilling</code>.
     * @return the list of <code>AgreementTermBilling</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends AgreementTermBilling> getAgreementTermBillings() throws RepositoryException {
        if (this.agreementTermBillings == null) {
            this.agreementTermBillings = getRelated(AgreementTermBilling.class, "AgreementTermBilling");
        }
        return this.agreementTermBillings;
    }
    /**
     * Auto generated method that gets the related <code>AgreementTypeForRoleType</code> by the relation named <code>AgreementTypeForRoleType</code>.
     * @return the list of <code>AgreementTypeForRoleType</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends AgreementTypeForRoleType> getAgreementTypeForRoleTypes() throws RepositoryException {
        if (this.agreementTypeForRoleTypes == null) {
            this.agreementTypeForRoleTypes = getRelated(AgreementTypeForRoleType.class, "AgreementTypeForRoleType");
        }
        return this.agreementTypeForRoleTypes;
    }
    /**
     * Auto generated method that gets the related <code>BillingAccountRole</code> by the relation named <code>BillingAccountRole</code>.
     * @return the list of <code>BillingAccountRole</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends BillingAccountRole> getBillingAccountRoles() throws RepositoryException {
        if (this.billingAccountRoles == null) {
            this.billingAccountRoles = getRelated(BillingAccountRole.class, "BillingAccountRole");
        }
        return this.billingAccountRoles;
    }
    /**
     * Auto generated method that gets the related <code>BudgetReview</code> by the relation named <code>BudgetReview</code>.
     * @return the list of <code>BudgetReview</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends BudgetReview> getBudgetReviews() throws RepositoryException {
        if (this.budgetReviews == null) {
            this.budgetReviews = getRelated(BudgetReview.class, "BudgetReview");
        }
        return this.budgetReviews;
    }
    /**
     * Auto generated method that gets the related <code>BudgetRole</code> by the relation named <code>BudgetRole</code>.
     * @return the list of <code>BudgetRole</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends BudgetRole> getBudgetRoles() throws RepositoryException {
        if (this.budgetRoles == null) {
            this.budgetRoles = getRelated(BudgetRole.class, "BudgetRole");
        }
        return this.budgetRoles;
    }
    /**
     * Auto generated method that gets the related <code>CarrierReturnService</code> by the relation named <code>CarrierReturnService</code>.
     * @return the list of <code>CarrierReturnService</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends CarrierReturnService> getCarrierReturnServices() throws RepositoryException {
        if (this.carrierReturnServices == null) {
            this.carrierReturnServices = getRelated(CarrierReturnService.class, "CarrierReturnService");
        }
        return this.carrierReturnServices;
    }
    /**
     * Auto generated method that gets the related <code>CarrierShipmentBoxType</code> by the relation named <code>CarrierShipmentBoxType</code>.
     * @return the list of <code>CarrierShipmentBoxType</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends CarrierShipmentBoxType> getCarrierShipmentBoxTypes() throws RepositoryException {
        if (this.carrierShipmentBoxTypes == null) {
            this.carrierShipmentBoxTypes = getRelated(CarrierShipmentBoxType.class, "CarrierShipmentBoxType");
        }
        return this.carrierShipmentBoxTypes;
    }
    /**
     * Auto generated method that gets the related <code>CarrierShipmentMethod</code> by the relation named <code>CarrierShipmentMethod</code>.
     * @return the list of <code>CarrierShipmentMethod</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends CarrierShipmentMethod> getCarrierShipmentMethods() throws RepositoryException {
        if (this.carrierShipmentMethods == null) {
            this.carrierShipmentMethods = getRelated(CarrierShipmentMethod.class, "CarrierShipmentMethod");
        }
        return this.carrierShipmentMethods;
    }
    /**
     * Auto generated method that gets the related <code>CommunicationEvent</code> by the relation named <code>ToCommunicationEvent</code>.
     * @return the list of <code>CommunicationEvent</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends CommunicationEvent> getToCommunicationEvents() throws RepositoryException {
        if (this.toCommunicationEvents == null) {
            this.toCommunicationEvents = getRelated(CommunicationEvent.class, "ToCommunicationEvent");
        }
        return this.toCommunicationEvents;
    }
    /**
     * Auto generated method that gets the related <code>CommunicationEvent</code> by the relation named <code>FromCommunicationEvent</code>.
     * @return the list of <code>CommunicationEvent</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends CommunicationEvent> getFromCommunicationEvents() throws RepositoryException {
        if (this.fromCommunicationEvents == null) {
            this.fromCommunicationEvents = getRelated(CommunicationEvent.class, "FromCommunicationEvent");
        }
        return this.fromCommunicationEvents;
    }
    /**
     * Auto generated method that gets the related <code>CommunicationEventRole</code> by the relation named <code>CommunicationEventRole</code>.
     * @return the list of <code>CommunicationEventRole</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends CommunicationEventRole> getCommunicationEventRoles() throws RepositoryException {
        if (this.communicationEventRoles == null) {
            this.communicationEventRoles = getRelated(CommunicationEventRole.class, "CommunicationEventRole");
        }
        return this.communicationEventRoles;
    }
    /**
     * Auto generated method that gets the related <code>ContactList</code> by the relation named <code>OwnerContactList</code>.
     * @return the list of <code>ContactList</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends ContactList> getOwnerContactLists() throws RepositoryException {
        if (this.ownerContactLists == null) {
            this.ownerContactLists = getRelated(ContactList.class, "OwnerContactList");
        }
        return this.ownerContactLists;
    }
    /**
     * Auto generated method that gets the related <code>ContactListParty</code> by the relation named <code>ContactListParty</code>.
     * @return the list of <code>ContactListParty</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends ContactListParty> getContactListPartys() throws RepositoryException {
        if (this.contactListPartys == null) {
            this.contactListPartys = getRelated(ContactListParty.class, "ContactListParty");
        }
        return this.contactListPartys;
    }
    /**
     * Auto generated method that gets the related <code>ContentApproval</code> by the relation named <code>ContentApproval</code>.
     * @return the list of <code>ContentApproval</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends ContentApproval> getContentApprovals() throws RepositoryException {
        if (this.contentApprovals == null) {
            this.contentApprovals = getRelated(ContentApproval.class, "ContentApproval");
        }
        return this.contentApprovals;
    }
    /**
     * Auto generated method that gets the related <code>ContentRevision</code> by the relation named <code>CommittedByContentRevision</code>.
     * @return the list of <code>ContentRevision</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends ContentRevision> getCommittedByContentRevisions() throws RepositoryException {
        if (this.committedByContentRevisions == null) {
            this.committedByContentRevisions = getRelated(ContentRevision.class, "CommittedByContentRevision");
        }
        return this.committedByContentRevisions;
    }
    /**
     * Auto generated method that gets the related <code>ContentRole</code> by the relation named <code>ContentRole</code>.
     * @return the list of <code>ContentRole</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends ContentRole> getContentRoles() throws RepositoryException {
        if (this.contentRoles == null) {
            this.contentRoles = getRelated(ContentRole.class, "ContentRole");
        }
        return this.contentRoles;
    }
    /**
     * Auto generated method that gets the related <code>CostComponent</code> by the relation named <code>CostComponent</code>.
     * @return the list of <code>CostComponent</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends CostComponent> getCostComponents() throws RepositoryException {
        if (this.costComponents == null) {
            this.costComponents = getRelated(CostComponent.class, "CostComponent");
        }
        return this.costComponents;
    }
    /**
     * Auto generated method that gets the related <code>CustRequest</code> by the relation named <code>FromCustRequest</code>.
     * @return the list of <code>CustRequest</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends CustRequest> getFromCustRequests() throws RepositoryException {
        if (this.fromCustRequests == null) {
            this.fromCustRequests = getRelated(CustRequest.class, "FromCustRequest");
        }
        return this.fromCustRequests;
    }
    /**
     * Auto generated method that gets the related <code>CustRequestParty</code> by the relation named <code>CustRequestParty</code>.
     * @return the list of <code>CustRequestParty</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends CustRequestParty> getCustRequestPartys() throws RepositoryException {
        if (this.custRequestPartys == null) {
            this.custRequestPartys = getRelated(CustRequestParty.class, "CustRequestParty");
        }
        return this.custRequestPartys;
    }
    /**
     * Auto generated method that gets the related <code>CustRequestRole</code> by the relation named <code>CustRequestRole</code>.
     * @return the list of <code>CustRequestRole</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends CustRequestRole> getCustRequestRoles() throws RepositoryException {
        if (this.custRequestRoles == null) {
            this.custRequestRoles = getRelated(CustRequestRole.class, "CustRequestRole");
        }
        return this.custRequestRoles;
    }
    /**
     * Auto generated method that gets the related <code>CustRequestType</code> by the relation named <code>CustRequestType</code>.
     * @return the list of <code>CustRequestType</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends CustRequestType> getCustRequestTypes() throws RepositoryException {
        if (this.custRequestTypes == null) {
            this.custRequestTypes = getRelated(CustRequestType.class, "CustRequestType");
        }
        return this.custRequestTypes;
    }
    /**
     * Auto generated method that gets the related <code>CustomTimePeriod</code> by the relation named <code>OrganizationCustomTimePeriod</code>.
     * @return the list of <code>CustomTimePeriod</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends CustomTimePeriod> getOrganizationCustomTimePeriods() throws RepositoryException {
        if (this.organizationCustomTimePeriods == null) {
            this.organizationCustomTimePeriods = getRelated(CustomTimePeriod.class, "OrganizationCustomTimePeriod");
        }
        return this.organizationCustomTimePeriods;
    }
    /**
     * Auto generated method that gets the related <code>DataImportOrderHeader</code> by the relation named <code>CustomerDataImportOrderHeader</code>.
     * @return the list of <code>DataImportOrderHeader</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends DataImportOrderHeader> getCustomerDataImportOrderHeaders() throws RepositoryException {
        if (this.customerDataImportOrderHeaders == null) {
            this.customerDataImportOrderHeaders = getRelated(DataImportOrderHeader.class, "CustomerDataImportOrderHeader");
        }
        return this.customerDataImportOrderHeaders;
    }
    /**
     * Auto generated method that gets the related <code>DataImportOrderHeader</code> by the relation named <code>SupplierDataImportOrderHeader</code>.
     * @return the list of <code>DataImportOrderHeader</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends DataImportOrderHeader> getSupplierDataImportOrderHeaders() throws RepositoryException {
        if (this.supplierDataImportOrderHeaders == null) {
            this.supplierDataImportOrderHeaders = getRelated(DataImportOrderHeader.class, "SupplierDataImportOrderHeader");
        }
        return this.supplierDataImportOrderHeaders;
    }
    /**
     * Auto generated method that gets the related <code>DataImportShoppingList</code> by the relation named <code>DataImportShoppingList</code>.
     * @return the <code>DataImportShoppingList</code>
     * @throws RepositoryException if an error occurs
     */
    public DataImportShoppingList getDataImportShoppingList() throws RepositoryException {
        if (this.dataImportShoppingList == null) {
            this.dataImportShoppingList = getRelatedOne(DataImportShoppingList.class, "DataImportShoppingList");
        }
        return this.dataImportShoppingList;
    }
    /**
     * Auto generated method that gets the related <code>DataImportShoppingListItem</code> by the relation named <code>DataImportShoppingListItem</code>.
     * @return the list of <code>DataImportShoppingListItem</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends DataImportShoppingListItem> getDataImportShoppingListItems() throws RepositoryException {
        if (this.dataImportShoppingListItems == null) {
            this.dataImportShoppingListItems = getRelated(DataImportShoppingListItem.class, "DataImportShoppingListItem");
        }
        return this.dataImportShoppingListItems;
    }
    /**
     * Auto generated method that gets the related <code>DataResourceRole</code> by the relation named <code>DataResourceRole</code>.
     * @return the list of <code>DataResourceRole</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends DataResourceRole> getDataResourceRoles() throws RepositoryException {
        if (this.dataResourceRoles == null) {
            this.dataResourceRoles = getRelated(DataResourceRole.class, "DataResourceRole");
        }
        return this.dataResourceRoles;
    }
    /**
     * Auto generated method that gets the related <code>EmplLeave</code> by the relation named <code>EmplLeave</code>.
     * @return the list of <code>EmplLeave</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends EmplLeave> getEmplLeaves() throws RepositoryException {
        if (this.emplLeaves == null) {
            this.emplLeaves = getRelated(EmplLeave.class, "EmplLeave");
        }
        return this.emplLeaves;
    }
    /**
     * Auto generated method that gets the related <code>EmplPosition</code> by the relation named <code>EmplPosition</code>.
     * @return the list of <code>EmplPosition</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends EmplPosition> getEmplPositions() throws RepositoryException {
        if (this.emplPositions == null) {
            this.emplPositions = getRelated(EmplPosition.class, "EmplPosition");
        }
        return this.emplPositions;
    }
    /**
     * Auto generated method that gets the related <code>EmplPositionFulfillment</code> by the relation named <code>EmplPositionFulfillment</code>.
     * @return the list of <code>EmplPositionFulfillment</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends EmplPositionFulfillment> getEmplPositionFulfillments() throws RepositoryException {
        if (this.emplPositionFulfillments == null) {
            this.emplPositionFulfillments = getRelated(EmplPositionFulfillment.class, "EmplPositionFulfillment");
        }
        return this.emplPositionFulfillments;
    }
    /**
     * Auto generated method that gets the related <code>EmployeePaycheckType</code> by the relation named <code>OrganizationEmployeePaycheckType</code>.
     * @return the list of <code>EmployeePaycheckType</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends EmployeePaycheckType> getOrganizationEmployeePaycheckTypes() throws RepositoryException {
        if (this.organizationEmployeePaycheckTypes == null) {
            this.organizationEmployeePaycheckTypes = getRelated(EmployeePaycheckType.class, "OrganizationEmployeePaycheckType");
        }
        return this.organizationEmployeePaycheckTypes;
    }
    /**
     * Auto generated method that gets the related <code>EmployeePaycheckType</code> by the relation named <code>EmployeeEmployeePaycheckType</code>.
     * @return the list of <code>EmployeePaycheckType</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends EmployeePaycheckType> getEmployeeEmployeePaycheckTypes() throws RepositoryException {
        if (this.employeeEmployeePaycheckTypes == null) {
            this.employeeEmployeePaycheckTypes = getRelated(EmployeePaycheckType.class, "EmployeeEmployeePaycheckType");
        }
        return this.employeeEmployeePaycheckTypes;
    }
    /**
     * Auto generated method that gets the related <code>Employment</code> by the relation named <code>ToEmployment</code>.
     * @return the list of <code>Employment</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends Employment> getToEmployments() throws RepositoryException {
        if (this.toEmployments == null) {
            this.toEmployments = getRelated(Employment.class, "ToEmployment");
        }
        return this.toEmployments;
    }
    /**
     * Auto generated method that gets the related <code>Employment</code> by the relation named <code>FromEmployment</code>.
     * @return the list of <code>Employment</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends Employment> getFromEmployments() throws RepositoryException {
        if (this.fromEmployments == null) {
            this.fromEmployments = getRelated(Employment.class, "FromEmployment");
        }
        return this.fromEmployments;
    }
    /**
     * Auto generated method that gets the related <code>EmploymentApp</code> by the relation named <code>ApplyingEmploymentApp</code>.
     * @return the list of <code>EmploymentApp</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends EmploymentApp> getApplyingEmploymentApps() throws RepositoryException {
        if (this.applyingEmploymentApps == null) {
            this.applyingEmploymentApps = getRelated(EmploymentApp.class, "ApplyingEmploymentApp");
        }
        return this.applyingEmploymentApps;
    }
    /**
     * Auto generated method that gets the related <code>EmploymentApp</code> by the relation named <code>ReferredByEmploymentApp</code>.
     * @return the list of <code>EmploymentApp</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends EmploymentApp> getReferredByEmploymentApps() throws RepositoryException {
        if (this.referredByEmploymentApps == null) {
            this.referredByEmploymentApps = getRelated(EmploymentApp.class, "ReferredByEmploymentApp");
        }
        return this.referredByEmploymentApps;
    }
    /**
     * Auto generated method that gets the related <code>Facility</code> by the relation named <code>OwnerFacility</code>.
     * @return the list of <code>Facility</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends Facility> getOwnerFacilitys() throws RepositoryException {
        if (this.ownerFacilitys == null) {
            this.ownerFacilitys = getRelated(Facility.class, "OwnerFacility");
        }
        return this.ownerFacilitys;
    }
    /**
     * Auto generated method that gets the related <code>FacilityCarrierShipment</code> by the relation named <code>FacilityCarrierShipment</code>.
     * @return the list of <code>FacilityCarrierShipment</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends FacilityCarrierShipment> getFacilityCarrierShipments() throws RepositoryException {
        if (this.facilityCarrierShipments == null) {
            this.facilityCarrierShipments = getRelated(FacilityCarrierShipment.class, "FacilityCarrierShipment");
        }
        return this.facilityCarrierShipments;
    }
    /**
     * Auto generated method that gets the related <code>FacilityGroupRole</code> by the relation named <code>FacilityGroupRole</code>.
     * @return the list of <code>FacilityGroupRole</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends FacilityGroupRole> getFacilityGroupRoles() throws RepositoryException {
        if (this.facilityGroupRoles == null) {
            this.facilityGroupRoles = getRelated(FacilityGroupRole.class, "FacilityGroupRole");
        }
        return this.facilityGroupRoles;
    }
    /**
     * Auto generated method that gets the related <code>FacilityParty</code> by the relation named <code>FacilityParty</code>.
     * @return the list of <code>FacilityParty</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends FacilityParty> getFacilityPartys() throws RepositoryException {
        if (this.facilityPartys == null) {
            this.facilityPartys = getRelated(FacilityParty.class, "FacilityParty");
        }
        return this.facilityPartys;
    }
    /**
     * Auto generated method that gets the related <code>FacilityPartyPermission</code> by the relation named <code>FacilityPartyPermission</code>.
     * @return the list of <code>FacilityPartyPermission</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends FacilityPartyPermission> getFacilityPartyPermissions() throws RepositoryException {
        if (this.facilityPartyPermissions == null) {
            this.facilityPartyPermissions = getRelated(FacilityPartyPermission.class, "FacilityPartyPermission");
        }
        return this.facilityPartyPermissions;
    }
    /**
     * Auto generated method that gets the related <code>FacilityRole</code> by the relation named <code>FacilityRole</code>.
     * @return the list of <code>FacilityRole</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends FacilityRole> getFacilityRoles() throws RepositoryException {
        if (this.facilityRoles == null) {
            this.facilityRoles = getRelated(FacilityRole.class, "FacilityRole");
        }
        return this.facilityRoles;
    }
    /**
     * Auto generated method that gets the related <code>FinAccount</code> by the relation named <code>OrganizationFinAccount</code>.
     * @return the list of <code>FinAccount</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends FinAccount> getOrganizationFinAccounts() throws RepositoryException {
        if (this.organizationFinAccounts == null) {
            this.organizationFinAccounts = getRelated(FinAccount.class, "OrganizationFinAccount");
        }
        return this.organizationFinAccounts;
    }
    /**
     * Auto generated method that gets the related <code>FinAccount</code> by the relation named <code>OwnerFinAccount</code>.
     * @return the list of <code>FinAccount</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends FinAccount> getOwnerFinAccounts() throws RepositoryException {
        if (this.ownerFinAccounts == null) {
            this.ownerFinAccounts = getRelated(FinAccount.class, "OwnerFinAccount");
        }
        return this.ownerFinAccounts;
    }
    /**
     * Auto generated method that gets the related <code>FinAccountRole</code> by the relation named <code>FinAccountRole</code>.
     * @return the list of <code>FinAccountRole</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends FinAccountRole> getFinAccountRoles() throws RepositoryException {
        if (this.finAccountRoles == null) {
            this.finAccountRoles = getRelated(FinAccountRole.class, "FinAccountRole");
        }
        return this.finAccountRoles;
    }
    /**
     * Auto generated method that gets the related <code>FinAccountTrans</code> by the relation named <code>FinAccountTrans</code>.
     * @return the list of <code>FinAccountTrans</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends FinAccountTrans> getFinAccountTranses() throws RepositoryException {
        if (this.finAccountTranses == null) {
            this.finAccountTranses = getRelated(FinAccountTrans.class, "FinAccountTrans");
        }
        return this.finAccountTranses;
    }
    /**
     * Auto generated method that gets the related <code>FinAccountTrans</code> by the relation named <code>PerformedByFinAccountTrans</code>.
     * @return the list of <code>FinAccountTrans</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends FinAccountTrans> getPerformedByFinAccountTranses() throws RepositoryException {
        if (this.performedByFinAccountTranses == null) {
            this.performedByFinAccountTranses = getRelated(FinAccountTrans.class, "PerformedByFinAccountTrans");
        }
        return this.performedByFinAccountTranses;
    }
    /**
     * Auto generated method that gets the related <code>FinAccountTypeGlAccount</code> by the relation named <code>OrganizationFinAccountTypeGlAccount</code>.
     * @return the list of <code>FinAccountTypeGlAccount</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends FinAccountTypeGlAccount> getOrganizationFinAccountTypeGlAccounts() throws RepositoryException {
        if (this.organizationFinAccountTypeGlAccounts == null) {
            this.organizationFinAccountTypeGlAccounts = getRelated(FinAccountTypeGlAccount.class, "OrganizationFinAccountTypeGlAccount");
        }
        return this.organizationFinAccountTypeGlAccounts;
    }
    /**
     * Auto generated method that gets the related <code>FixedAsset</code> by the relation named <code>FixedAsset</code>.
     * @return the list of <code>FixedAsset</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends FixedAsset> getFixedAssets() throws RepositoryException {
        if (this.fixedAssets == null) {
            this.fixedAssets = getRelated(FixedAsset.class, "FixedAsset");
        }
        return this.fixedAssets;
    }
    /**
     * Auto generated method that gets the related <code>FixedAssetRegistration</code> by the relation named <code>GovAgencyFixedAssetRegistration</code>.
     * @return the list of <code>FixedAssetRegistration</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends FixedAssetRegistration> getGovAgencyFixedAssetRegistrations() throws RepositoryException {
        if (this.govAgencyFixedAssetRegistrations == null) {
            this.govAgencyFixedAssetRegistrations = getRelated(FixedAssetRegistration.class, "GovAgencyFixedAssetRegistration");
        }
        return this.govAgencyFixedAssetRegistrations;
    }
    /**
     * Auto generated method that gets the related <code>GiftCardFulfillment</code> by the relation named <code>GiftCardFulfillment</code>.
     * @return the list of <code>GiftCardFulfillment</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends GiftCardFulfillment> getGiftCardFulfillments() throws RepositoryException {
        if (this.giftCardFulfillments == null) {
            this.giftCardFulfillments = getRelated(GiftCardFulfillment.class, "GiftCardFulfillment");
        }
        return this.giftCardFulfillments;
    }
    /**
     * Auto generated method that gets the related <code>GlAccountHistory</code> by the relation named <code>GlAccountHistory</code>.
     * @return the list of <code>GlAccountHistory</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends GlAccountHistory> getGlAccountHistorys() throws RepositoryException {
        if (this.glAccountHistorys == null) {
            this.glAccountHistorys = getRelated(GlAccountHistory.class, "GlAccountHistory");
        }
        return this.glAccountHistorys;
    }
    /**
     * Auto generated method that gets the related <code>GlAccountOrganization</code> by the relation named <code>GlAccountOrganization</code>.
     * @return the list of <code>GlAccountOrganization</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends GlAccountOrganization> getGlAccountOrganizations() throws RepositoryException {
        if (this.glAccountOrganizations == null) {
            this.glAccountOrganizations = getRelated(GlAccountOrganization.class, "GlAccountOrganization");
        }
        return this.glAccountOrganizations;
    }
    /**
     * Auto generated method that gets the related <code>GlAccountRole</code> by the relation named <code>GlAccountRole</code>.
     * @return the list of <code>GlAccountRole</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends GlAccountRole> getGlAccountRoles() throws RepositoryException {
        if (this.glAccountRoles == null) {
            this.glAccountRoles = getRelated(GlAccountRole.class, "GlAccountRole");
        }
        return this.glAccountRoles;
    }
    /**
     * Auto generated method that gets the related <code>GlAccountTypeDefault</code> by the relation named <code>OrganizationGlAccountTypeDefault</code>.
     * @return the list of <code>GlAccountTypeDefault</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends GlAccountTypeDefault> getOrganizationGlAccountTypeDefaults() throws RepositoryException {
        if (this.organizationGlAccountTypeDefaults == null) {
            this.organizationGlAccountTypeDefaults = getRelated(GlAccountTypeDefault.class, "OrganizationGlAccountTypeDefault");
        }
        return this.organizationGlAccountTypeDefaults;
    }
    /**
     * Auto generated method that gets the related <code>GlJournal</code> by the relation named <code>GlJournal</code>.
     * @return the list of <code>GlJournal</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends GlJournal> getGlJournals() throws RepositoryException {
        if (this.glJournals == null) {
            this.glJournals = getRelated(GlJournal.class, "GlJournal");
        }
        return this.glJournals;
    }
    /**
     * Auto generated method that gets the related <code>GlReconciliation</code> by the relation named <code>GlReconciliation</code>.
     * @return the list of <code>GlReconciliation</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends GlReconciliation> getGlReconciliations() throws RepositoryException {
        if (this.glReconciliations == null) {
            this.glReconciliations = getRelated(GlReconciliation.class, "GlReconciliation");
        }
        return this.glReconciliations;
    }
    /**
     * Auto generated method that gets the related <code>InventoryItem</code> by the relation named <code>InventoryItem</code>.
     * @return the list of <code>InventoryItem</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends InventoryItem> getInventoryItems() throws RepositoryException {
        if (this.inventoryItems == null) {
            this.inventoryItems = getRelated(InventoryItem.class, "InventoryItem");
        }
        return this.inventoryItems;
    }
    /**
     * Auto generated method that gets the related <code>InventoryItem</code> by the relation named <code>OwnerInventoryItem</code>.
     * @return the list of <code>InventoryItem</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends InventoryItem> getOwnerInventoryItems() throws RepositoryException {
        if (this.ownerInventoryItems == null) {
            this.ownerInventoryItems = getRelated(InventoryItem.class, "OwnerInventoryItem");
        }
        return this.ownerInventoryItems;
    }
    /**
     * Auto generated method that gets the related <code>Invoice</code> by the relation named <code>FromInvoice</code>.
     * @return the list of <code>Invoice</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends Invoice> getFromInvoices() throws RepositoryException {
        if (this.fromInvoices == null) {
            this.fromInvoices = getRelated(Invoice.class, "FromInvoice");
        }
        return this.fromInvoices;
    }
    /**
     * Auto generated method that gets the related <code>Invoice</code> by the relation named <code>Invoice</code>.
     * @return the list of <code>Invoice</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends Invoice> getInvoices() throws RepositoryException {
        if (this.invoices == null) {
            this.invoices = getRelated(Invoice.class, "Invoice");
        }
        return this.invoices;
    }
    /**
     * Auto generated method that gets the related <code>InvoiceAdjustmentGlAccount</code> by the relation named <code>InvoiceAdjustmentGlAccount</code>.
     * @return the list of <code>InvoiceAdjustmentGlAccount</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends InvoiceAdjustmentGlAccount> getInvoiceAdjustmentGlAccounts() throws RepositoryException {
        if (this.invoiceAdjustmentGlAccounts == null) {
            this.invoiceAdjustmentGlAccounts = getRelated(InvoiceAdjustmentGlAccount.class, "InvoiceAdjustmentGlAccount");
        }
        return this.invoiceAdjustmentGlAccounts;
    }
    /**
     * Auto generated method that gets the related <code>InvoiceGlAccountType</code> by the relation named <code>InvoiceGlAccountType</code>.
     * @return the list of <code>InvoiceGlAccountType</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends InvoiceGlAccountType> getInvoiceGlAccountTypes() throws RepositoryException {
        if (this.invoiceGlAccountTypes == null) {
            this.invoiceGlAccountTypes = getRelated(InvoiceGlAccountType.class, "InvoiceGlAccountType");
        }
        return this.invoiceGlAccountTypes;
    }
    /**
     * Auto generated method that gets the related <code>InvoiceItem</code> by the relation named <code>TaxAuthorityInvoiceItem</code>.
     * @return the list of <code>InvoiceItem</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends InvoiceItem> getTaxAuthorityInvoiceItems() throws RepositoryException {
        if (this.taxAuthorityInvoiceItems == null) {
            this.taxAuthorityInvoiceItems = getRelated(InvoiceItem.class, "TaxAuthorityInvoiceItem");
        }
        return this.taxAuthorityInvoiceItems;
    }
    /**
     * Auto generated method that gets the related <code>InvoiceItem</code> by the relation named <code>OverrideOrgInvoiceItem</code>.
     * @return the list of <code>InvoiceItem</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends InvoiceItem> getOverrideOrgInvoiceItems() throws RepositoryException {
        if (this.overrideOrgInvoiceItems == null) {
            this.overrideOrgInvoiceItems = getRelated(InvoiceItem.class, "OverrideOrgInvoiceItem");
        }
        return this.overrideOrgInvoiceItems;
    }
    /**
     * Auto generated method that gets the related <code>InvoiceItemTypeGlAccount</code> by the relation named <code>OrganizationInvoiceItemTypeGlAccount</code>.
     * @return the list of <code>InvoiceItemTypeGlAccount</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends InvoiceItemTypeGlAccount> getOrganizationInvoiceItemTypeGlAccounts() throws RepositoryException {
        if (this.organizationInvoiceItemTypeGlAccounts == null) {
            this.organizationInvoiceItemTypeGlAccounts = getRelated(InvoiceItemTypeGlAccount.class, "OrganizationInvoiceItemTypeGlAccount");
        }
        return this.organizationInvoiceItemTypeGlAccounts;
    }
    /**
     * Auto generated method that gets the related <code>InvoiceRole</code> by the relation named <code>InvoiceRole</code>.
     * @return the list of <code>InvoiceRole</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends InvoiceRole> getInvoiceRoles() throws RepositoryException {
        if (this.invoiceRoles == null) {
            this.invoiceRoles = getRelated(InvoiceRole.class, "InvoiceRole");
        }
        return this.invoiceRoles;
    }
    /**
     * Auto generated method that gets the related <code>ItemIssuanceRole</code> by the relation named <code>ItemIssuanceRole</code>.
     * @return the list of <code>ItemIssuanceRole</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends ItemIssuanceRole> getItemIssuanceRoles() throws RepositoryException {
        if (this.itemIssuanceRoles == null) {
            this.itemIssuanceRoles = getRelated(ItemIssuanceRole.class, "ItemIssuanceRole");
        }
        return this.itemIssuanceRoles;
    }
    /**
     * Auto generated method that gets the related <code>Lot</code> by the relation named <code>Lot</code>.
     * @return the list of <code>Lot</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends Lot> getLots() throws RepositoryException {
        if (this.lots == null) {
            this.lots = getRelated(Lot.class, "Lot");
        }
        return this.lots;
    }
    /**
     * Auto generated method that gets the related <code>MarketingCampaignRole</code> by the relation named <code>MarketingCampaignRole</code>.
     * @return the list of <code>MarketingCampaignRole</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends MarketingCampaignRole> getMarketingCampaignRoles() throws RepositoryException {
        if (this.marketingCampaignRoles == null) {
            this.marketingCampaignRoles = getRelated(MarketingCampaignRole.class, "MarketingCampaignRole");
        }
        return this.marketingCampaignRoles;
    }
    /**
     * Auto generated method that gets the related <code>NoteData</code> by the relation named <code>NoteNoteData</code>.
     * @return the list of <code>NoteData</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends NoteData> getNoteNoteDatas() throws RepositoryException {
        if (this.noteNoteDatas == null) {
            this.noteNoteDatas = getRelated(NoteData.class, "NoteNoteData");
        }
        return this.noteNoteDatas;
    }
    /**
     * Auto generated method that gets the related <code>OldOrderShipmentPreference</code> by the relation named <code>CarrierOldOrderShipmentPreference</code>.
     * @return the list of <code>OldOrderShipmentPreference</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends OldOrderShipmentPreference> getCarrierOldOrderShipmentPreferences() throws RepositoryException {
        if (this.carrierOldOrderShipmentPreferences == null) {
            this.carrierOldOrderShipmentPreferences = getRelated(OldOrderShipmentPreference.class, "CarrierOldOrderShipmentPreference");
        }
        return this.carrierOldOrderShipmentPreferences;
    }
    /**
     * Auto generated method that gets the related <code>OldPartyRate</code> by the relation named <code>OldPartyRate</code>.
     * @return the list of <code>OldPartyRate</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends OldPartyRate> getOldPartyRates() throws RepositoryException {
        if (this.oldPartyRates == null) {
            this.oldPartyRates = getRelated(OldPartyRate.class, "OldPartyRate");
        }
        return this.oldPartyRates;
    }
    /**
     * Auto generated method that gets the related <code>OldPartyTaxInfo</code> by the relation named <code>OldPartyTaxInfo</code>.
     * @return the list of <code>OldPartyTaxInfo</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends OldPartyTaxInfo> getOldPartyTaxInfoes() throws RepositoryException {
        if (this.oldPartyTaxInfoes == null) {
            this.oldPartyTaxInfoes = getRelated(OldPartyTaxInfo.class, "OldPartyTaxInfo");
        }
        return this.oldPartyTaxInfoes;
    }
    /**
     * Auto generated method that gets the related <code>OldValueLinkFulfillment</code> by the relation named <code>OldValueLinkFulfillment</code>.
     * @return the list of <code>OldValueLinkFulfillment</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends OldValueLinkFulfillment> getOldValueLinkFulfillments() throws RepositoryException {
        if (this.oldValueLinkFulfillments == null) {
            this.oldValueLinkFulfillments = getRelated(OldValueLinkFulfillment.class, "OldValueLinkFulfillment");
        }
        return this.oldValueLinkFulfillments;
    }
    /**
     * Auto generated method that gets the related <code>OldWorkEffortAssignmentRate</code> by the relation named <code>OldWorkEffortAssignmentRate</code>.
     * @return the list of <code>OldWorkEffortAssignmentRate</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends OldWorkEffortAssignmentRate> getOldWorkEffortAssignmentRates() throws RepositoryException {
        if (this.oldWorkEffortAssignmentRates == null) {
            this.oldWorkEffortAssignmentRates = getRelated(OldWorkEffortAssignmentRate.class, "OldWorkEffortAssignmentRate");
        }
        return this.oldWorkEffortAssignmentRates;
    }
    /**
     * Auto generated method that gets the related <code>OrderHeader</code> by the relation named <code>BillFromVendorOrderHeader</code>.
     * @return the list of <code>OrderHeader</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends OrderHeader> getBillFromVendorOrderHeaders() throws RepositoryException {
        if (this.billFromVendorOrderHeaders == null) {
            this.billFromVendorOrderHeaders = getRelated(OrderHeader.class, "BillFromVendorOrderHeader");
        }
        return this.billFromVendorOrderHeaders;
    }
    /**
     * Auto generated method that gets the related <code>OrderHeader</code> by the relation named <code>BillToCustomerOrderHeader</code>.
     * @return the list of <code>OrderHeader</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends OrderHeader> getBillToCustomerOrderHeaders() throws RepositoryException {
        if (this.billToCustomerOrderHeaders == null) {
            this.billToCustomerOrderHeaders = getRelated(OrderHeader.class, "BillToCustomerOrderHeader");
        }
        return this.billToCustomerOrderHeaders;
    }
    /**
     * Auto generated method that gets the related <code>OrderItemRole</code> by the relation named <code>OrderItemRole</code>.
     * @return the list of <code>OrderItemRole</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends OrderItemRole> getOrderItemRoles() throws RepositoryException {
        if (this.orderItemRoles == null) {
            this.orderItemRoles = getRelated(OrderItemRole.class, "OrderItemRole");
        }
        return this.orderItemRoles;
    }
    /**
     * Auto generated method that gets the related <code>OrderItemShipGroup</code> by the relation named <code>SupplierOrderItemShipGroup</code>.
     * @return the list of <code>OrderItemShipGroup</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends OrderItemShipGroup> getSupplierOrderItemShipGroups() throws RepositoryException {
        if (this.supplierOrderItemShipGroups == null) {
            this.supplierOrderItemShipGroups = getRelated(OrderItemShipGroup.class, "SupplierOrderItemShipGroup");
        }
        return this.supplierOrderItemShipGroups;
    }
    /**
     * Auto generated method that gets the related <code>OrderItemShipGroup</code> by the relation named <code>VendorOrderItemShipGroup</code>.
     * @return the list of <code>OrderItemShipGroup</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends OrderItemShipGroup> getVendorOrderItemShipGroups() throws RepositoryException {
        if (this.vendorOrderItemShipGroups == null) {
            this.vendorOrderItemShipGroups = getRelated(OrderItemShipGroup.class, "VendorOrderItemShipGroup");
        }
        return this.vendorOrderItemShipGroups;
    }
    /**
     * Auto generated method that gets the related <code>OrderItemShipGroup</code> by the relation named <code>CarrierOrderItemShipGroup</code>.
     * @return the list of <code>OrderItemShipGroup</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends OrderItemShipGroup> getCarrierOrderItemShipGroups() throws RepositoryException {
        if (this.carrierOrderItemShipGroups == null) {
            this.carrierOrderItemShipGroups = getRelated(OrderItemShipGroup.class, "CarrierOrderItemShipGroup");
        }
        return this.carrierOrderItemShipGroups;
    }
    /**
     * Auto generated method that gets the related <code>OrderRole</code> by the relation named <code>OrderRole</code>.
     * @return the list of <code>OrderRole</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends OrderRole> getOrderRoles() throws RepositoryException {
        if (this.orderRoles == null) {
            this.orderRoles = getRelated(OrderRole.class, "OrderRole");
        }
        return this.orderRoles;
    }
    /**
     * Auto generated method that gets the related <code>PartyAcctgPreference</code> by the relation named <code>PartyAcctgPreference</code>.
     * @return the <code>PartyAcctgPreference</code>
     * @throws RepositoryException if an error occurs
     */
    public PartyAcctgPreference getPartyAcctgPreference() throws RepositoryException {
        if (this.partyAcctgPreference == null) {
            this.partyAcctgPreference = getRelatedOne(PartyAcctgPreference.class, "PartyAcctgPreference");
        }
        return this.partyAcctgPreference;
    }
    /**
     * Auto generated method that gets the related <code>PartyAttribute</code> by the relation named <code>PartyAttribute</code>.
     * @return the list of <code>PartyAttribute</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends PartyAttribute> getPartyAttributes() throws RepositoryException {
        if (this.partyAttributes == null) {
            this.partyAttributes = getRelated(PartyAttribute.class, "PartyAttribute");
        }
        return this.partyAttributes;
    }
    /**
     * Auto generated method that gets the related <code>PartyBenefit</code> by the relation named <code>ToPartyBenefit</code>.
     * @return the list of <code>PartyBenefit</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends PartyBenefit> getToPartyBenefits() throws RepositoryException {
        if (this.toPartyBenefits == null) {
            this.toPartyBenefits = getRelated(PartyBenefit.class, "ToPartyBenefit");
        }
        return this.toPartyBenefits;
    }
    /**
     * Auto generated method that gets the related <code>PartyBenefit</code> by the relation named <code>FromPartyBenefit</code>.
     * @return the list of <code>PartyBenefit</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends PartyBenefit> getFromPartyBenefits() throws RepositoryException {
        if (this.fromPartyBenefits == null) {
            this.fromPartyBenefits = getRelated(PartyBenefit.class, "FromPartyBenefit");
        }
        return this.fromPartyBenefits;
    }
    /**
     * Auto generated method that gets the related <code>PartyCarrierAccount</code> by the relation named <code>PartyCarrierAccount</code>.
     * @return the list of <code>PartyCarrierAccount</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends PartyCarrierAccount> getPartyCarrierAccounts() throws RepositoryException {
        if (this.partyCarrierAccounts == null) {
            this.partyCarrierAccounts = getRelated(PartyCarrierAccount.class, "PartyCarrierAccount");
        }
        return this.partyCarrierAccounts;
    }
    /**
     * Auto generated method that gets the related <code>PartyCarrierAccount</code> by the relation named <code>CarrierPartyCarrierAccount</code>.
     * @return the list of <code>PartyCarrierAccount</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends PartyCarrierAccount> getCarrierPartyCarrierAccounts() throws RepositoryException {
        if (this.carrierPartyCarrierAccounts == null) {
            this.carrierPartyCarrierAccounts = getRelated(PartyCarrierAccount.class, "CarrierPartyCarrierAccount");
        }
        return this.carrierPartyCarrierAccounts;
    }
    /**
     * Auto generated method that gets the related <code>PartyClassification</code> by the relation named <code>PartyClassification</code>.
     * @return the list of <code>PartyClassification</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends PartyClassification> getPartyClassifications() throws RepositoryException {
        if (this.partyClassifications == null) {
            this.partyClassifications = getRelated(PartyClassification.class, "PartyClassification");
        }
        return this.partyClassifications;
    }
    /**
     * Auto generated method that gets the related <code>PartyContactMech</code> by the relation named <code>PartyContactMech</code>.
     * @return the list of <code>PartyContactMech</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends PartyContactMech> getPartyContactMeches() throws RepositoryException {
        if (this.partyContactMeches == null) {
            this.partyContactMeches = getRelated(PartyContactMech.class, "PartyContactMech");
        }
        return this.partyContactMeches;
    }
    /**
     * Auto generated method that gets the related <code>PartyContactMechPurpose</code> by the relation named <code>PartyContactMechPurpose</code>.
     * @return the list of <code>PartyContactMechPurpose</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends PartyContactMechPurpose> getPartyContactMechPurposes() throws RepositoryException {
        if (this.partyContactMechPurposes == null) {
            this.partyContactMechPurposes = getRelated(PartyContactMechPurpose.class, "PartyContactMechPurpose");
        }
        return this.partyContactMechPurposes;
    }
    /**
     * Auto generated method that gets the related <code>PartyContent</code> by the relation named <code>PartyContent</code>.
     * @return the list of <code>PartyContent</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends PartyContent> getPartyContents() throws RepositoryException {
        if (this.partyContents == null) {
            this.partyContents = getRelated(PartyContent.class, "PartyContent");
        }
        return this.partyContents;
    }
    /**
     * Auto generated method that gets the related <code>PartyDataSource</code> by the relation named <code>PartyDataSource</code>.
     * @return the list of <code>PartyDataSource</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends PartyDataSource> getPartyDataSources() throws RepositoryException {
        if (this.partyDataSources == null) {
            this.partyDataSources = getRelated(PartyDataSource.class, "PartyDataSource");
        }
        return this.partyDataSources;
    }
    /**
     * Auto generated method that gets the related <code>PartyFixedAssetAssignment</code> by the relation named <code>PartyFixedAssetAssignment</code>.
     * @return the list of <code>PartyFixedAssetAssignment</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends PartyFixedAssetAssignment> getPartyFixedAssetAssignments() throws RepositoryException {
        if (this.partyFixedAssetAssignments == null) {
            this.partyFixedAssetAssignments = getRelated(PartyFixedAssetAssignment.class, "PartyFixedAssetAssignment");
        }
        return this.partyFixedAssetAssignments;
    }
    /**
     * Auto generated method that gets the related <code>PartyGeoPoint</code> by the relation named <code>PartyGeoPoint</code>.
     * @return the list of <code>PartyGeoPoint</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends PartyGeoPoint> getPartyGeoPoints() throws RepositoryException {
        if (this.partyGeoPoints == null) {
            this.partyGeoPoints = getRelated(PartyGeoPoint.class, "PartyGeoPoint");
        }
        return this.partyGeoPoints;
    }
    /**
     * Auto generated method that gets the related <code>PartyGlAccount</code> by the relation named <code>OrganizationPartyGlAccount</code>.
     * @return the list of <code>PartyGlAccount</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends PartyGlAccount> getOrganizationPartyGlAccounts() throws RepositoryException {
        if (this.organizationPartyGlAccounts == null) {
            this.organizationPartyGlAccounts = getRelated(PartyGlAccount.class, "OrganizationPartyGlAccount");
        }
        return this.organizationPartyGlAccounts;
    }
    /**
     * Auto generated method that gets the related <code>PartyGlAccount</code> by the relation named <code>PartyGlAccount</code>.
     * @return the list of <code>PartyGlAccount</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends PartyGlAccount> getPartyGlAccounts() throws RepositoryException {
        if (this.partyGlAccounts == null) {
            this.partyGlAccounts = getRelated(PartyGlAccount.class, "PartyGlAccount");
        }
        return this.partyGlAccounts;
    }
    /**
     * Auto generated method that gets the related <code>PartyGroup</code> by the relation named <code>PartyGroup</code>.
     * @return the <code>PartyGroup</code>
     * @throws RepositoryException if an error occurs
     */
    public PartyGroup getPartyGroup() throws RepositoryException {
        if (this.partyGroup == null) {
            this.partyGroup = getRelatedOne(PartyGroup.class, "PartyGroup");
        }
        return this.partyGroup;
    }
    /**
     * Auto generated method that gets the related <code>PartyIcsAvsOverride</code> by the relation named <code>PartyIcsAvsOverride</code>.
     * @return the <code>PartyIcsAvsOverride</code>
     * @throws RepositoryException if an error occurs
     */
    public PartyIcsAvsOverride getPartyIcsAvsOverride() throws RepositoryException {
        if (this.partyIcsAvsOverride == null) {
            this.partyIcsAvsOverride = getRelatedOne(PartyIcsAvsOverride.class, "PartyIcsAvsOverride");
        }
        return this.partyIcsAvsOverride;
    }
    /**
     * Auto generated method that gets the related <code>PartyInvitation</code> by the relation named <code>PartyInvitation</code>.
     * @return the list of <code>PartyInvitation</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends PartyInvitation> getPartyInvitations() throws RepositoryException {
        if (this.partyInvitations == null) {
            this.partyInvitations = getRelated(PartyInvitation.class, "PartyInvitation");
        }
        return this.partyInvitations;
    }
    /**
     * Auto generated method that gets the related <code>PartyInvitationGroupAssoc</code> by the relation named <code>ToPartyInvitationGroupAssoc</code>.
     * @return the list of <code>PartyInvitationGroupAssoc</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends PartyInvitationGroupAssoc> getToPartyInvitationGroupAssocs() throws RepositoryException {
        if (this.toPartyInvitationGroupAssocs == null) {
            this.toPartyInvitationGroupAssocs = getRelated(PartyInvitationGroupAssoc.class, "ToPartyInvitationGroupAssoc");
        }
        return this.toPartyInvitationGroupAssocs;
    }
    /**
     * Auto generated method that gets the related <code>PartyNameHistory</code> by the relation named <code>PartyNameHistory</code>.
     * @return the list of <code>PartyNameHistory</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends PartyNameHistory> getPartyNameHistorys() throws RepositoryException {
        if (this.partyNameHistorys == null) {
            this.partyNameHistorys = getRelated(PartyNameHistory.class, "PartyNameHistory");
        }
        return this.partyNameHistorys;
    }
    /**
     * Auto generated method that gets the related <code>PartyNeed</code> by the relation named <code>PartyNeed</code>.
     * @return the list of <code>PartyNeed</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends PartyNeed> getPartyNeeds() throws RepositoryException {
        if (this.partyNeeds == null) {
            this.partyNeeds = getRelated(PartyNeed.class, "PartyNeed");
        }
        return this.partyNeeds;
    }
    /**
     * Auto generated method that gets the related <code>PartyNote</code> by the relation named <code>PartyNote</code>.
     * @return the list of <code>PartyNote</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends PartyNote> getPartyNotes() throws RepositoryException {
        if (this.partyNotes == null) {
            this.partyNotes = getRelated(PartyNote.class, "PartyNote");
        }
        return this.partyNotes;
    }
    /**
     * Auto generated method that gets the related <code>PartyProfileDefault</code> by the relation named <code>PartyProfileDefault</code>.
     * @return the list of <code>PartyProfileDefault</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends PartyProfileDefault> getPartyProfileDefaults() throws RepositoryException {
        if (this.partyProfileDefaults == null) {
            this.partyProfileDefaults = getRelated(PartyProfileDefault.class, "PartyProfileDefault");
        }
        return this.partyProfileDefaults;
    }
    /**
     * Auto generated method that gets the related <code>PartyQual</code> by the relation named <code>PartyQual</code>.
     * @return the list of <code>PartyQual</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends PartyQual> getPartyQuals() throws RepositoryException {
        if (this.partyQuals == null) {
            this.partyQuals = getRelated(PartyQual.class, "PartyQual");
        }
        return this.partyQuals;
    }
    /**
     * Auto generated method that gets the related <code>PartyRate</code> by the relation named <code>PartyRate</code>.
     * @return the list of <code>PartyRate</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends PartyRate> getPartyRates() throws RepositoryException {
        if (this.partyRates == null) {
            this.partyRates = getRelated(PartyRate.class, "PartyRate");
        }
        return this.partyRates;
    }
    /**
     * Auto generated method that gets the related <code>PartyRelationship</code> by the relation named <code>FromPartyRelationship</code>.
     * @return the list of <code>PartyRelationship</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends PartyRelationship> getFromPartyRelationships() throws RepositoryException {
        if (this.fromPartyRelationships == null) {
            this.fromPartyRelationships = getRelated(PartyRelationship.class, "FromPartyRelationship");
        }
        return this.fromPartyRelationships;
    }
    /**
     * Auto generated method that gets the related <code>PartyRelationship</code> by the relation named <code>ToPartyRelationship</code>.
     * @return the list of <code>PartyRelationship</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends PartyRelationship> getToPartyRelationships() throws RepositoryException {
        if (this.toPartyRelationships == null) {
            this.toPartyRelationships = getRelated(PartyRelationship.class, "ToPartyRelationship");
        }
        return this.toPartyRelationships;
    }
    /**
     * Auto generated method that gets the related <code>PartyResume</code> by the relation named <code>PartyResume</code>.
     * @return the list of <code>PartyResume</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends PartyResume> getPartyResumes() throws RepositoryException {
        if (this.partyResumes == null) {
            this.partyResumes = getRelated(PartyResume.class, "PartyResume");
        }
        return this.partyResumes;
    }
    /**
     * Auto generated method that gets the related <code>PartyRole</code> by the relation named <code>PartyRole</code>.
     * @return the list of <code>PartyRole</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends PartyRole> getPartyRoles() throws RepositoryException {
        if (this.partyRoles == null) {
            this.partyRoles = getRelated(PartyRole.class, "PartyRole");
        }
        return this.partyRoles;
    }
    /**
     * Auto generated method that gets the related <code>PartySkill</code> by the relation named <code>PartySkill</code>.
     * @return the list of <code>PartySkill</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends PartySkill> getPartySkills() throws RepositoryException {
        if (this.partySkills == null) {
            this.partySkills = getRelated(PartySkill.class, "PartySkill");
        }
        return this.partySkills;
    }
    /**
     * Auto generated method that gets the related <code>PartyStatus</code> by the relation named <code>PartyStatus</code>.
     * @return the list of <code>PartyStatus</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends PartyStatus> getPartyStatuses() throws RepositoryException {
        if (this.partyStatuses == null) {
            this.partyStatuses = getRelated(PartyStatus.class, "PartyStatus");
        }
        return this.partyStatuses;
    }
    /**
     * Auto generated method that gets the related <code>PartySupplementalData</code> by the relation named <code>PartySupplementalData</code>.
     * @return the <code>PartySupplementalData</code>
     * @throws RepositoryException if an error occurs
     */
    public PartySupplementalData getPartySupplementalData() throws RepositoryException {
        if (this.partySupplementalData == null) {
            this.partySupplementalData = getRelatedOne(PartySupplementalData.class, "PartySupplementalData");
        }
        return this.partySupplementalData;
    }
    /**
     * Auto generated method that gets the related <code>PartySupplementalData</code> by the relation named <code>ParentPartySupplementalData</code>.
     * @return the list of <code>PartySupplementalData</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends PartySupplementalData> getParentPartySupplementalDatas() throws RepositoryException {
        if (this.parentPartySupplementalDatas == null) {
            this.parentPartySupplementalDatas = getRelated(PartySupplementalData.class, "ParentPartySupplementalData");
        }
        return this.parentPartySupplementalDatas;
    }
    /**
     * Auto generated method that gets the related <code>PartyTaxAuthInfo</code> by the relation named <code>PartyTaxAuthInfo</code>.
     * @return the list of <code>PartyTaxAuthInfo</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends PartyTaxAuthInfo> getPartyTaxAuthInfoes() throws RepositoryException {
        if (this.partyTaxAuthInfoes == null) {
            this.partyTaxAuthInfoes = getRelated(PartyTaxAuthInfo.class, "PartyTaxAuthInfo");
        }
        return this.partyTaxAuthInfoes;
    }
    /**
     * Auto generated method that gets the related <code>PaycheckItem</code> by the relation named <code>PaycheckItem</code>.
     * @return the list of <code>PaycheckItem</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends PaycheckItem> getPaycheckItems() throws RepositoryException {
        if (this.paycheckItems == null) {
            this.paycheckItems = getRelated(PaycheckItem.class, "PaycheckItem");
        }
        return this.paycheckItems;
    }
    /**
     * Auto generated method that gets the related <code>PaycheckItemTypeGlAccount</code> by the relation named <code>OrganizationPaycheckItemTypeGlAccount</code>.
     * @return the list of <code>PaycheckItemTypeGlAccount</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends PaycheckItemTypeGlAccount> getOrganizationPaycheckItemTypeGlAccounts() throws RepositoryException {
        if (this.organizationPaycheckItemTypeGlAccounts == null) {
            this.organizationPaycheckItemTypeGlAccounts = getRelated(PaycheckItemTypeGlAccount.class, "OrganizationPaycheckItemTypeGlAccount");
        }
        return this.organizationPaycheckItemTypeGlAccounts;
    }
    /**
     * Auto generated method that gets the related <code>PaycheckItemTypeGlAccount</code> by the relation named <code>DefaultDueToPaycheckItemTypeGlAccount</code>.
     * @return the list of <code>PaycheckItemTypeGlAccount</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends PaycheckItemTypeGlAccount> getDefaultDueToPaycheckItemTypeGlAccounts() throws RepositoryException {
        if (this.defaultDueToPaycheckItemTypeGlAccounts == null) {
            this.defaultDueToPaycheckItemTypeGlAccounts = getRelated(PaycheckItemTypeGlAccount.class, "DefaultDueToPaycheckItemTypeGlAccount");
        }
        return this.defaultDueToPaycheckItemTypeGlAccounts;
    }
    /**
     * Auto generated method that gets the related <code>Payment</code> by the relation named <code>FromPayment</code>.
     * @return the list of <code>Payment</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends Payment> getFromPayments() throws RepositoryException {
        if (this.fromPayments == null) {
            this.fromPayments = getRelated(Payment.class, "FromPayment");
        }
        return this.fromPayments;
    }
    /**
     * Auto generated method that gets the related <code>Payment</code> by the relation named <code>ToPayment</code>.
     * @return the list of <code>Payment</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends Payment> getToPayments() throws RepositoryException {
        if (this.toPayments == null) {
            this.toPayments = getRelated(Payment.class, "ToPayment");
        }
        return this.toPayments;
    }
    /**
     * Auto generated method that gets the related <code>PaymentGlAccountTypeMap</code> by the relation named <code>PaymentGlAccountTypeMap</code>.
     * @return the list of <code>PaymentGlAccountTypeMap</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends PaymentGlAccountTypeMap> getPaymentGlAccountTypeMaps() throws RepositoryException {
        if (this.paymentGlAccountTypeMaps == null) {
            this.paymentGlAccountTypeMaps = getRelated(PaymentGlAccountTypeMap.class, "PaymentGlAccountTypeMap");
        }
        return this.paymentGlAccountTypeMaps;
    }
    /**
     * Auto generated method that gets the related <code>PaymentMethod</code> by the relation named <code>PaymentMethod</code>.
     * @return the list of <code>PaymentMethod</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends PaymentMethod> getPaymentMethods() throws RepositoryException {
        if (this.paymentMethods == null) {
            this.paymentMethods = getRelated(PaymentMethod.class, "PaymentMethod");
        }
        return this.paymentMethods;
    }
    /**
     * Auto generated method that gets the related <code>PaymentMethodTypeGlAccount</code> by the relation named <code>OrganizationPaymentMethodTypeGlAccount</code>.
     * @return the list of <code>PaymentMethodTypeGlAccount</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends PaymentMethodTypeGlAccount> getOrganizationPaymentMethodTypeGlAccounts() throws RepositoryException {
        if (this.organizationPaymentMethodTypeGlAccounts == null) {
            this.organizationPaymentMethodTypeGlAccounts = getRelated(PaymentMethodTypeGlAccount.class, "OrganizationPaymentMethodTypeGlAccount");
        }
        return this.organizationPaymentMethodTypeGlAccounts;
    }
    /**
     * Auto generated method that gets the related <code>PayrollPreference</code> by the relation named <code>PayrollPreference</code>.
     * @return the list of <code>PayrollPreference</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends PayrollPreference> getPayrollPreferences() throws RepositoryException {
        if (this.payrollPreferences == null) {
            this.payrollPreferences = getRelated(PayrollPreference.class, "PayrollPreference");
        }
        return this.payrollPreferences;
    }
    /**
     * Auto generated method that gets the related <code>PerfReview</code> by the relation named <code>EmployeePerfReview</code>.
     * @return the list of <code>PerfReview</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends PerfReview> getEmployeePerfReviews() throws RepositoryException {
        if (this.employeePerfReviews == null) {
            this.employeePerfReviews = getRelated(PerfReview.class, "EmployeePerfReview");
        }
        return this.employeePerfReviews;
    }
    /**
     * Auto generated method that gets the related <code>PerfReview</code> by the relation named <code>ManagerPerfReview</code>.
     * @return the list of <code>PerfReview</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends PerfReview> getManagerPerfReviews() throws RepositoryException {
        if (this.managerPerfReviews == null) {
            this.managerPerfReviews = getRelated(PerfReview.class, "ManagerPerfReview");
        }
        return this.managerPerfReviews;
    }
    /**
     * Auto generated method that gets the related <code>PerfReviewItem</code> by the relation named <code>EmployeePerfReviewItem</code>.
     * @return the list of <code>PerfReviewItem</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends PerfReviewItem> getEmployeePerfReviewItems() throws RepositoryException {
        if (this.employeePerfReviewItems == null) {
            this.employeePerfReviewItems = getRelated(PerfReviewItem.class, "EmployeePerfReviewItem");
        }
        return this.employeePerfReviewItems;
    }
    /**
     * Auto generated method that gets the related <code>PerformanceNote</code> by the relation named <code>PerformanceNote</code>.
     * @return the list of <code>PerformanceNote</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends PerformanceNote> getPerformanceNotes() throws RepositoryException {
        if (this.performanceNotes == null) {
            this.performanceNotes = getRelated(PerformanceNote.class, "PerformanceNote");
        }
        return this.performanceNotes;
    }
    /**
     * Auto generated method that gets the related <code>Person</code> by the relation named <code>Person</code>.
     * @return the <code>Person</code>
     * @throws RepositoryException if an error occurs
     */
    public Person getPerson() throws RepositoryException {
        if (this.person == null) {
            this.person = getRelatedOne(Person.class, "Person");
        }
        return this.person;
    }
    /**
     * Auto generated method that gets the related <code>PersonTraining</code> by the relation named <code>PersonTraining</code>.
     * @return the list of <code>PersonTraining</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends PersonTraining> getPersonTrainings() throws RepositoryException {
        if (this.personTrainings == null) {
            this.personTrainings = getRelated(PersonTraining.class, "PersonTraining");
        }
        return this.personTrainings;
    }
    /**
     * Auto generated method that gets the related <code>ProdCatalogRole</code> by the relation named <code>ProdCatalogRole</code>.
     * @return the list of <code>ProdCatalogRole</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends ProdCatalogRole> getProdCatalogRoles() throws RepositoryException {
        if (this.prodCatalogRoles == null) {
            this.prodCatalogRoles = getRelated(ProdCatalogRole.class, "ProdCatalogRole");
        }
        return this.prodCatalogRoles;
    }
    /**
     * Auto generated method that gets the related <code>Product</code> by the relation named <code>ManufacturerProduct</code>.
     * @return the list of <code>Product</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends Product> getManufacturerProducts() throws RepositoryException {
        if (this.manufacturerProducts == null) {
            this.manufacturerProducts = getRelated(Product.class, "ManufacturerProduct");
        }
        return this.manufacturerProducts;
    }
    /**
     * Auto generated method that gets the related <code>ProductAverageCost</code> by the relation named <code>ProductAverageCost</code>.
     * @return the list of <code>ProductAverageCost</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends ProductAverageCost> getProductAverageCosts() throws RepositoryException {
        if (this.productAverageCosts == null) {
            this.productAverageCosts = getRelated(ProductAverageCost.class, "ProductAverageCost");
        }
        return this.productAverageCosts;
    }
    /**
     * Auto generated method that gets the related <code>ProductCategoryGlAccount</code> by the relation named <code>ProductCategoryGlAccount</code>.
     * @return the list of <code>ProductCategoryGlAccount</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends ProductCategoryGlAccount> getProductCategoryGlAccounts() throws RepositoryException {
        if (this.productCategoryGlAccounts == null) {
            this.productCategoryGlAccounts = getRelated(ProductCategoryGlAccount.class, "ProductCategoryGlAccount");
        }
        return this.productCategoryGlAccounts;
    }
    /**
     * Auto generated method that gets the related <code>ProductCategoryRole</code> by the relation named <code>ProductCategoryRole</code>.
     * @return the list of <code>ProductCategoryRole</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends ProductCategoryRole> getProductCategoryRoles() throws RepositoryException {
        if (this.productCategoryRoles == null) {
            this.productCategoryRoles = getRelated(ProductCategoryRole.class, "ProductCategoryRole");
        }
        return this.productCategoryRoles;
    }
    /**
     * Auto generated method that gets the related <code>ProductGlAccount</code> by the relation named <code>ProductGlAccount</code>.
     * @return the list of <code>ProductGlAccount</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends ProductGlAccount> getProductGlAccounts() throws RepositoryException {
        if (this.productGlAccounts == null) {
            this.productGlAccounts = getRelated(ProductGlAccount.class, "ProductGlAccount");
        }
        return this.productGlAccounts;
    }
    /**
     * Auto generated method that gets the related <code>ProductPromo</code> by the relation named <code>ProductPromo</code>.
     * @return the list of <code>ProductPromo</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends ProductPromo> getProductPromoes() throws RepositoryException {
        if (this.productPromoes == null) {
            this.productPromoes = getRelated(ProductPromo.class, "ProductPromo");
        }
        return this.productPromoes;
    }
    /**
     * Auto generated method that gets the related <code>ProductPromoCodeParty</code> by the relation named <code>ProductPromoCodeParty</code>.
     * @return the list of <code>ProductPromoCodeParty</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends ProductPromoCodeParty> getProductPromoCodePartys() throws RepositoryException {
        if (this.productPromoCodePartys == null) {
            this.productPromoCodePartys = getRelated(ProductPromoCodeParty.class, "ProductPromoCodeParty");
        }
        return this.productPromoCodePartys;
    }
    /**
     * Auto generated method that gets the related <code>ProductPromoUse</code> by the relation named <code>ProductPromoUse</code>.
     * @return the list of <code>ProductPromoUse</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends ProductPromoUse> getProductPromoUses() throws RepositoryException {
        if (this.productPromoUses == null) {
            this.productPromoUses = getRelated(ProductPromoUse.class, "ProductPromoUse");
        }
        return this.productPromoUses;
    }
    /**
     * Auto generated method that gets the related <code>ProductRole</code> by the relation named <code>ProductRole</code>.
     * @return the list of <code>ProductRole</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends ProductRole> getProductRoles() throws RepositoryException {
        if (this.productRoles == null) {
            this.productRoles = getRelated(ProductRole.class, "ProductRole");
        }
        return this.productRoles;
    }
    /**
     * Auto generated method that gets the related <code>ProductStore</code> by the relation named <code>ProductStore</code>.
     * @return the list of <code>ProductStore</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends ProductStore> getProductStores() throws RepositoryException {
        if (this.productStores == null) {
            this.productStores = getRelated(ProductStore.class, "ProductStore");
        }
        return this.productStores;
    }
    /**
     * Auto generated method that gets the related <code>ProductStore</code> by the relation named <code>DefaultCarrierProductStore</code>.
     * @return the list of <code>ProductStore</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends ProductStore> getDefaultCarrierProductStores() throws RepositoryException {
        if (this.defaultCarrierProductStores == null) {
            this.defaultCarrierProductStores = getRelated(ProductStore.class, "DefaultCarrierProductStore");
        }
        return this.defaultCarrierProductStores;
    }
    /**
     * Auto generated method that gets the related <code>ProductStore</code> by the relation named <code>BillToThirdPartyProductStore</code>.
     * @return the list of <code>ProductStore</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends ProductStore> getBillToThirdPartyProductStores() throws RepositoryException {
        if (this.billToThirdPartyProductStores == null) {
            this.billToThirdPartyProductStores = getRelated(ProductStore.class, "BillToThirdPartyProductStore");
        }
        return this.billToThirdPartyProductStores;
    }
    /**
     * Auto generated method that gets the related <code>ProductStoreGroupRole</code> by the relation named <code>ProductStoreGroupRole</code>.
     * @return the list of <code>ProductStoreGroupRole</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends ProductStoreGroupRole> getProductStoreGroupRoles() throws RepositoryException {
        if (this.productStoreGroupRoles == null) {
            this.productStoreGroupRoles = getRelated(ProductStoreGroupRole.class, "ProductStoreGroupRole");
        }
        return this.productStoreGroupRoles;
    }
    /**
     * Auto generated method that gets the related <code>ProductStoreRole</code> by the relation named <code>ProductStoreRole</code>.
     * @return the list of <code>ProductStoreRole</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends ProductStoreRole> getProductStoreRoles() throws RepositoryException {
        if (this.productStoreRoles == null) {
            this.productStoreRoles = getRelated(ProductStoreRole.class, "ProductStoreRole");
        }
        return this.productStoreRoles;
    }
    /**
     * Auto generated method that gets the related <code>ProductStoreShipmentMeth</code> by the relation named <code>ProductStoreShipmentMeth</code>.
     * @return the list of <code>ProductStoreShipmentMeth</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends ProductStoreShipmentMeth> getProductStoreShipmentMeths() throws RepositoryException {
        if (this.productStoreShipmentMeths == null) {
            this.productStoreShipmentMeths = getRelated(ProductStoreShipmentMeth.class, "ProductStoreShipmentMeth");
        }
        return this.productStoreShipmentMeths;
    }
    /**
     * Auto generated method that gets the related <code>ProductStoreVendorPayment</code> by the relation named <code>VendorProductStoreVendorPayment</code>.
     * @return the list of <code>ProductStoreVendorPayment</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends ProductStoreVendorPayment> getVendorProductStoreVendorPayments() throws RepositoryException {
        if (this.vendorProductStoreVendorPayments == null) {
            this.vendorProductStoreVendorPayments = getRelated(ProductStoreVendorPayment.class, "VendorProductStoreVendorPayment");
        }
        return this.vendorProductStoreVendorPayments;
    }
    /**
     * Auto generated method that gets the related <code>ProductStoreVendorShipment</code> by the relation named <code>VendorProductStoreVendorShipment</code>.
     * @return the list of <code>ProductStoreVendorShipment</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends ProductStoreVendorShipment> getVendorProductStoreVendorShipments() throws RepositoryException {
        if (this.vendorProductStoreVendorShipments == null) {
            this.vendorProductStoreVendorShipments = getRelated(ProductStoreVendorShipment.class, "VendorProductStoreVendorShipment");
        }
        return this.vendorProductStoreVendorShipments;
    }
    /**
     * Auto generated method that gets the related <code>ProductStoreVendorShipment</code> by the relation named <code>CarrierProductStoreVendorShipment</code>.
     * @return the list of <code>ProductStoreVendorShipment</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends ProductStoreVendorShipment> getCarrierProductStoreVendorShipments() throws RepositoryException {
        if (this.carrierProductStoreVendorShipments == null) {
            this.carrierProductStoreVendorShipments = getRelated(ProductStoreVendorShipment.class, "CarrierProductStoreVendorShipment");
        }
        return this.carrierProductStoreVendorShipments;
    }
    /**
     * Auto generated method that gets the related <code>Quote</code> by the relation named <code>Quote</code>.
     * @return the list of <code>Quote</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends Quote> getQuotes() throws RepositoryException {
        if (this.quotes == null) {
            this.quotes = getRelated(Quote.class, "Quote");
        }
        return this.quotes;
    }
    /**
     * Auto generated method that gets the related <code>Quote</code> by the relation named <code>CreatedByQuote</code>.
     * @return the list of <code>Quote</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends Quote> getCreatedByQuotes() throws RepositoryException {
        if (this.createdByQuotes == null) {
            this.createdByQuotes = getRelated(Quote.class, "CreatedByQuote");
        }
        return this.createdByQuotes;
    }
    /**
     * Auto generated method that gets the related <code>Quote</code> by the relation named <code>ContactQuote</code>.
     * @return the list of <code>Quote</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends Quote> getContactQuotes() throws RepositoryException {
        if (this.contactQuotes == null) {
            this.contactQuotes = getRelated(Quote.class, "ContactQuote");
        }
        return this.contactQuotes;
    }
    /**
     * Auto generated method that gets the related <code>QuoteRole</code> by the relation named <code>QuoteRole</code>.
     * @return the list of <code>QuoteRole</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends QuoteRole> getQuoteRoles() throws RepositoryException {
        if (this.quoteRoles == null) {
            this.quoteRoles = getRelated(QuoteRole.class, "QuoteRole");
        }
        return this.quoteRoles;
    }
    /**
     * Auto generated method that gets the related <code>RateAmount</code> by the relation named <code>RateAmount</code>.
     * @return the list of <code>RateAmount</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends RateAmount> getRateAmounts() throws RepositoryException {
        if (this.rateAmounts == null) {
            this.rateAmounts = getRelated(RateAmount.class, "RateAmount");
        }
        return this.rateAmounts;
    }
    /**
     * Auto generated method that gets the related <code>ReorderGuideline</code> by the relation named <code>ReorderGuideline</code>.
     * @return the list of <code>ReorderGuideline</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends ReorderGuideline> getReorderGuidelines() throws RepositoryException {
        if (this.reorderGuidelines == null) {
            this.reorderGuidelines = getRelated(ReorderGuideline.class, "ReorderGuideline");
        }
        return this.reorderGuidelines;
    }
    /**
     * Auto generated method that gets the related <code>RequirementRole</code> by the relation named <code>RequirementRole</code>.
     * @return the list of <code>RequirementRole</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends RequirementRole> getRequirementRoles() throws RepositoryException {
        if (this.requirementRoles == null) {
            this.requirementRoles = getRelated(RequirementRole.class, "RequirementRole");
        }
        return this.requirementRoles;
    }
    /**
     * Auto generated method that gets the related <code>RespondingParty</code> by the relation named <code>RespondingParty</code>.
     * @return the list of <code>RespondingParty</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends RespondingParty> getRespondingPartys() throws RepositoryException {
        if (this.respondingPartys == null) {
            this.respondingPartys = getRelated(RespondingParty.class, "RespondingParty");
        }
        return this.respondingPartys;
    }
    /**
     * Auto generated method that gets the related <code>ReturnHeader</code> by the relation named <code>ReturnHeader</code>.
     * @return the list of <code>ReturnHeader</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends ReturnHeader> getReturnHeaders() throws RepositoryException {
        if (this.returnHeaders == null) {
            this.returnHeaders = getRelated(ReturnHeader.class, "ReturnHeader");
        }
        return this.returnHeaders;
    }
    /**
     * Auto generated method that gets the related <code>ReturnHeader</code> by the relation named <code>ToReturnHeader</code>.
     * @return the list of <code>ReturnHeader</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends ReturnHeader> getToReturnHeaders() throws RepositoryException {
        if (this.toReturnHeaders == null) {
            this.toReturnHeaders = getRelated(ReturnHeader.class, "ToReturnHeader");
        }
        return this.toReturnHeaders;
    }
    /**
     * Auto generated method that gets the related <code>SalesForecast</code> by the relation named <code>OrganizationSalesForecast</code>.
     * @return the list of <code>SalesForecast</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends SalesForecast> getOrganizationSalesForecasts() throws RepositoryException {
        if (this.organizationSalesForecasts == null) {
            this.organizationSalesForecasts = getRelated(SalesForecast.class, "OrganizationSalesForecast");
        }
        return this.organizationSalesForecasts;
    }
    /**
     * Auto generated method that gets the related <code>SalesForecast</code> by the relation named <code>InternalSalesForecast</code>.
     * @return the list of <code>SalesForecast</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends SalesForecast> getInternalSalesForecasts() throws RepositoryException {
        if (this.internalSalesForecasts == null) {
            this.internalSalesForecasts = getRelated(SalesForecast.class, "InternalSalesForecast");
        }
        return this.internalSalesForecasts;
    }
    /**
     * Auto generated method that gets the related <code>SalesForecastHistory</code> by the relation named <code>OrganizationSalesForecastHistory</code>.
     * @return the list of <code>SalesForecastHistory</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends SalesForecastHistory> getOrganizationSalesForecastHistorys() throws RepositoryException {
        if (this.organizationSalesForecastHistorys == null) {
            this.organizationSalesForecastHistorys = getRelated(SalesForecastHistory.class, "OrganizationSalesForecastHistory");
        }
        return this.organizationSalesForecastHistorys;
    }
    /**
     * Auto generated method that gets the related <code>SalesForecastHistory</code> by the relation named <code>InternalSalesForecastHistory</code>.
     * @return the list of <code>SalesForecastHistory</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends SalesForecastHistory> getInternalSalesForecastHistorys() throws RepositoryException {
        if (this.internalSalesForecastHistorys == null) {
            this.internalSalesForecastHistorys = getRelated(SalesForecastHistory.class, "InternalSalesForecastHistory");
        }
        return this.internalSalesForecastHistorys;
    }
    /**
     * Auto generated method that gets the related <code>SalesForecastItem</code> by the relation named <code>SalesForecastItem</code>.
     * @return the list of <code>SalesForecastItem</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends SalesForecastItem> getSalesForecastItems() throws RepositoryException {
        if (this.salesForecastItems == null) {
            this.salesForecastItems = getRelated(SalesForecastItem.class, "SalesForecastItem");
        }
        return this.salesForecastItems;
    }
    /**
     * Auto generated method that gets the related <code>SalesOpportunityRole</code> by the relation named <code>SalesOpportunityRole</code>.
     * @return the list of <code>SalesOpportunityRole</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends SalesOpportunityRole> getSalesOpportunityRoles() throws RepositoryException {
        if (this.salesOpportunityRoles == null) {
            this.salesOpportunityRoles = getRelated(SalesOpportunityRole.class, "SalesOpportunityRole");
        }
        return this.salesOpportunityRoles;
    }
    /**
     * Auto generated method that gets the related <code>SegmentGroupRole</code> by the relation named <code>SegmentGroupRole</code>.
     * @return the list of <code>SegmentGroupRole</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends SegmentGroupRole> getSegmentGroupRoles() throws RepositoryException {
        if (this.segmentGroupRoles == null) {
            this.segmentGroupRoles = getRelated(SegmentGroupRole.class, "SegmentGroupRole");
        }
        return this.segmentGroupRoles;
    }
    /**
     * Auto generated method that gets the related <code>ServerHit</code> by the relation named <code>ServerHit</code>.
     * @return the list of <code>ServerHit</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends ServerHit> getServerHits() throws RepositoryException {
        if (this.serverHits == null) {
            this.serverHits = getRelated(ServerHit.class, "ServerHit");
        }
        return this.serverHits;
    }
    /**
     * Auto generated method that gets the related <code>Shipment</code> by the relation named <code>ToShipment</code>.
     * @return the list of <code>Shipment</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends Shipment> getToShipments() throws RepositoryException {
        if (this.toShipments == null) {
            this.toShipments = getRelated(Shipment.class, "ToShipment");
        }
        return this.toShipments;
    }
    /**
     * Auto generated method that gets the related <code>Shipment</code> by the relation named <code>FromShipment</code>.
     * @return the list of <code>Shipment</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends Shipment> getFromShipments() throws RepositoryException {
        if (this.fromShipments == null) {
            this.fromShipments = getRelated(Shipment.class, "FromShipment");
        }
        return this.fromShipments;
    }
    /**
     * Auto generated method that gets the related <code>ShipmentCostEstimate</code> by the relation named <code>ShipmentCostEstimate</code>.
     * @return the list of <code>ShipmentCostEstimate</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends ShipmentCostEstimate> getShipmentCostEstimates() throws RepositoryException {
        if (this.shipmentCostEstimates == null) {
            this.shipmentCostEstimates = getRelated(ShipmentCostEstimate.class, "ShipmentCostEstimate");
        }
        return this.shipmentCostEstimates;
    }
    /**
     * Auto generated method that gets the related <code>ShipmentReceiptRole</code> by the relation named <code>ShipmentReceiptRole</code>.
     * @return the list of <code>ShipmentReceiptRole</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends ShipmentReceiptRole> getShipmentReceiptRoles() throws RepositoryException {
        if (this.shipmentReceiptRoles == null) {
            this.shipmentReceiptRoles = getRelated(ShipmentReceiptRole.class, "ShipmentReceiptRole");
        }
        return this.shipmentReceiptRoles;
    }
    /**
     * Auto generated method that gets the related <code>ShipmentRouteSegment</code> by the relation named <code>CarrierShipmentRouteSegment</code>.
     * @return the list of <code>ShipmentRouteSegment</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends ShipmentRouteSegment> getCarrierShipmentRouteSegments() throws RepositoryException {
        if (this.carrierShipmentRouteSegments == null) {
            this.carrierShipmentRouteSegments = getRelated(ShipmentRouteSegment.class, "CarrierShipmentRouteSegment");
        }
        return this.carrierShipmentRouteSegments;
    }
    /**
     * Auto generated method that gets the related <code>ShoppingList</code> by the relation named <code>ShoppingList</code>.
     * @return the list of <code>ShoppingList</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends ShoppingList> getShoppingLists() throws RepositoryException {
        if (this.shoppingLists == null) {
            this.shoppingLists = getRelated(ShoppingList.class, "ShoppingList");
        }
        return this.shoppingLists;
    }
    /**
     * Auto generated method that gets the related <code>Subscription</code> by the relation named <code>Subscription</code>.
     * @return the list of <code>Subscription</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends Subscription> getSubscriptions() throws RepositoryException {
        if (this.subscriptions == null) {
            this.subscriptions = getRelated(Subscription.class, "Subscription");
        }
        return this.subscriptions;
    }
    /**
     * Auto generated method that gets the related <code>Subscription</code> by the relation named <code>OriginatedFromSubscription</code>.
     * @return the list of <code>Subscription</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends Subscription> getOriginatedFromSubscriptions() throws RepositoryException {
        if (this.originatedFromSubscriptions == null) {
            this.originatedFromSubscriptions = getRelated(Subscription.class, "OriginatedFromSubscription");
        }
        return this.originatedFromSubscriptions;
    }
    /**
     * Auto generated method that gets the related <code>SupplierProduct</code> by the relation named <code>SupplierProduct</code>.
     * @return the list of <code>SupplierProduct</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends SupplierProduct> getSupplierProducts() throws RepositoryException {
        if (this.supplierProducts == null) {
            this.supplierProducts = getRelated(SupplierProduct.class, "SupplierProduct");
        }
        return this.supplierProducts;
    }
    /**
     * Auto generated method that gets the related <code>SupplierProductFeature</code> by the relation named <code>SupplierProductFeature</code>.
     * @return the list of <code>SupplierProductFeature</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends SupplierProductFeature> getSupplierProductFeatures() throws RepositoryException {
        if (this.supplierProductFeatures == null) {
            this.supplierProductFeatures = getRelated(SupplierProductFeature.class, "SupplierProductFeature");
        }
        return this.supplierProductFeatures;
    }
    /**
     * Auto generated method that gets the related <code>SurveyResponse</code> by the relation named <code>SurveyResponse</code>.
     * @return the list of <code>SurveyResponse</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends SurveyResponse> getSurveyResponses() throws RepositoryException {
        if (this.surveyResponses == null) {
            this.surveyResponses = getRelated(SurveyResponse.class, "SurveyResponse");
        }
        return this.surveyResponses;
    }
    /**
     * Auto generated method that gets the related <code>TaxAuthority</code> by the relation named <code>TaxAuthTaxAuthority</code>.
     * @return the list of <code>TaxAuthority</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends TaxAuthority> getTaxAuthTaxAuthoritys() throws RepositoryException {
        if (this.taxAuthTaxAuthoritys == null) {
            this.taxAuthTaxAuthoritys = getRelated(TaxAuthority.class, "TaxAuthTaxAuthority");
        }
        return this.taxAuthTaxAuthoritys;
    }
    /**
     * Auto generated method that gets the related <code>TaxAuthorityGlAccount</code> by the relation named <code>OrganizationTaxAuthorityGlAccount</code>.
     * @return the list of <code>TaxAuthorityGlAccount</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends TaxAuthorityGlAccount> getOrganizationTaxAuthorityGlAccounts() throws RepositoryException {
        if (this.organizationTaxAuthorityGlAccounts == null) {
            this.organizationTaxAuthorityGlAccounts = getRelated(TaxAuthorityGlAccount.class, "OrganizationTaxAuthorityGlAccount");
        }
        return this.organizationTaxAuthorityGlAccounts;
    }
    /**
     * Auto generated method that gets the related <code>TimeEntry</code> by the relation named <code>TimeEntry</code>.
     * @return the list of <code>TimeEntry</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends TimeEntry> getTimeEntrys() throws RepositoryException {
        if (this.timeEntrys == null) {
            this.timeEntrys = getRelated(TimeEntry.class, "TimeEntry");
        }
        return this.timeEntrys;
    }
    /**
     * Auto generated method that gets the related <code>Timesheet</code> by the relation named <code>Timesheet</code>.
     * @return the list of <code>Timesheet</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends Timesheet> getTimesheets() throws RepositoryException {
        if (this.timesheets == null) {
            this.timesheets = getRelated(Timesheet.class, "Timesheet");
        }
        return this.timesheets;
    }
    /**
     * Auto generated method that gets the related <code>Timesheet</code> by the relation named <code>ClientTimesheet</code>.
     * @return the list of <code>Timesheet</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends Timesheet> getClientTimesheets() throws RepositoryException {
        if (this.clientTimesheets == null) {
            this.clientTimesheets = getRelated(Timesheet.class, "ClientTimesheet");
        }
        return this.clientTimesheets;
    }
    /**
     * Auto generated method that gets the related <code>TimesheetRole</code> by the relation named <code>TimesheetRole</code>.
     * @return the list of <code>TimesheetRole</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends TimesheetRole> getTimesheetRoles() throws RepositoryException {
        if (this.timesheetRoles == null) {
            this.timesheetRoles = getRelated(TimesheetRole.class, "TimesheetRole");
        }
        return this.timesheetRoles;
    }
    /**
     * Auto generated method that gets the related <code>UserLogin</code> by the relation named <code>UserLogin</code>.
     * @return the list of <code>UserLogin</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends UserLogin> getUserLogins() throws RepositoryException {
        if (this.userLogins == null) {
            this.userLogins = getRelated(UserLogin.class, "UserLogin");
        }
        return this.userLogins;
    }
    /**
     * Auto generated method that gets the related <code>UserLoginHistory</code> by the relation named <code>UserLoginHistory</code>.
     * @return the list of <code>UserLoginHistory</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends UserLoginHistory> getUserLoginHistorys() throws RepositoryException {
        if (this.userLoginHistorys == null) {
            this.userLoginHistorys = getRelated(UserLoginHistory.class, "UserLoginHistory");
        }
        return this.userLoginHistorys;
    }
    /**
     * Auto generated method that gets the related <code>VarianceReasonGlAccount</code> by the relation named <code>OrganizationVarianceReasonGlAccount</code>.
     * @return the list of <code>VarianceReasonGlAccount</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends VarianceReasonGlAccount> getOrganizationVarianceReasonGlAccounts() throws RepositoryException {
        if (this.organizationVarianceReasonGlAccounts == null) {
            this.organizationVarianceReasonGlAccounts = getRelated(VarianceReasonGlAccount.class, "OrganizationVarianceReasonGlAccount");
        }
        return this.organizationVarianceReasonGlAccounts;
    }
    /**
     * Auto generated method that gets the related <code>Vendor</code> by the relation named <code>Vendor</code>.
     * @return the <code>Vendor</code>
     * @throws RepositoryException if an error occurs
     */
    public Vendor getVendor() throws RepositoryException {
        if (this.vendor == null) {
            this.vendor = getRelatedOne(Vendor.class, "Vendor");
        }
        return this.vendor;
    }
    /**
     * Auto generated method that gets the related <code>VendorProduct</code> by the relation named <code>VendorVendorProduct</code>.
     * @return the list of <code>VendorProduct</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends VendorProduct> getVendorVendorProducts() throws RepositoryException {
        if (this.vendorVendorProducts == null) {
            this.vendorVendorProducts = getRelated(VendorProduct.class, "VendorVendorProduct");
        }
        return this.vendorVendorProducts;
    }
    /**
     * Auto generated method that gets the related <code>Visit</code> by the relation named <code>Visit</code>.
     * @return the list of <code>Visit</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends Visit> getVisits() throws RepositoryException {
        if (this.visits == null) {
            this.visits = getRelated(Visit.class, "Visit");
        }
        return this.visits;
    }
    /**
     * Auto generated method that gets the related <code>Visitor</code> by the relation named <code>Visitor</code>.
     * @return the list of <code>Visitor</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends Visitor> getVisitors() throws RepositoryException {
        if (this.visitors == null) {
            this.visitors = getRelated(Visitor.class, "Visitor");
        }
        return this.visitors;
    }
    /**
     * Auto generated method that gets the related <code>WebSiteRole</code> by the relation named <code>WebSiteRole</code>.
     * @return the list of <code>WebSiteRole</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends WebSiteRole> getWebSiteRoles() throws RepositoryException {
        if (this.webSiteRoles == null) {
            this.webSiteRoles = getRelated(WebSiteRole.class, "WebSiteRole");
        }
        return this.webSiteRoles;
    }
    /**
     * Auto generated method that gets the related <code>WebUserPreference</code> by the relation named <code>WebUserPreference</code>.
     * @return the list of <code>WebUserPreference</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends WebUserPreference> getWebUserPreferences() throws RepositoryException {
        if (this.webUserPreferences == null) {
            this.webUserPreferences = getRelated(WebUserPreference.class, "WebUserPreference");
        }
        return this.webUserPreferences;
    }
    /**
     * Auto generated method that gets the related <code>WorkEffortPartyAssignment</code> by the relation named <code>WorkEffortPartyAssignment</code>.
     * @return the list of <code>WorkEffortPartyAssignment</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends WorkEffortPartyAssignment> getWorkEffortPartyAssignments() throws RepositoryException {
        if (this.workEffortPartyAssignments == null) {
            this.workEffortPartyAssignments = getRelated(WorkEffortPartyAssignment.class, "WorkEffortPartyAssignment");
        }
        return this.workEffortPartyAssignments;
    }

    /**
     * Auto generated value setter.
     * @param partyType the partyType to set
    */
    public void setPartyType(PartyType partyType) {
        this.partyType = partyType;
    }
    /**
     * Auto generated value setter.
     * @param relatedCreatedByUserLogin the relatedCreatedByUserLogin to set
    */
    public void setRelatedCreatedByUserLogin(UserLogin relatedCreatedByUserLogin) {
        this.relatedCreatedByUserLogin = relatedCreatedByUserLogin;
    }
    /**
     * Auto generated value setter.
     * @param relatedLastModifiedByUserLogin the relatedLastModifiedByUserLogin to set
    */
    public void setRelatedLastModifiedByUserLogin(UserLogin relatedLastModifiedByUserLogin) {
        this.relatedLastModifiedByUserLogin = relatedLastModifiedByUserLogin;
    }
    /**
     * Auto generated value setter.
     * @param uom the uom to set
    */
    public void setUom(Uom uom) {
        this.uom = uom;
    }
    /**
     * Auto generated value setter.
     * @param statusItem the statusItem to set
    */
    public void setStatusItem(StatusItem statusItem) {
        this.statusItem = statusItem;
    }
    /**
     * Auto generated value setter.
     * @param partyTypeAttrs the partyTypeAttrs to set
    */
    public void setPartyTypeAttrs(List<PartyTypeAttr> partyTypeAttrs) {
        this.partyTypeAttrs = partyTypeAttrs;
    }
    /**
     * Auto generated value setter.
     * @param dataSource the dataSource to set
    */
    public void setDataSource(DataSource dataSource) {
        this.dataSource = dataSource;
    }
    /**
     * Auto generated value setter.
     * @param organizationAccountBalanceHistorys the organizationAccountBalanceHistorys to set
    */
    public void setOrganizationAccountBalanceHistorys(List<AccountBalanceHistory> organizationAccountBalanceHistorys) {
        this.organizationAccountBalanceHistorys = organizationAccountBalanceHistorys;
    }
    /**
     * Auto generated value setter.
     * @param accountBalanceHistorys the accountBalanceHistorys to set
    */
    public void setAccountBalanceHistorys(List<AccountBalanceHistory> accountBalanceHistorys) {
        this.accountBalanceHistorys = accountBalanceHistorys;
    }
    /**
     * Auto generated value setter.
     * @param acctgTagEnumTypes the acctgTagEnumTypes to set
    */
    public void setAcctgTagEnumTypes(List<AcctgTagEnumType> acctgTagEnumTypes) {
        this.acctgTagEnumTypes = acctgTagEnumTypes;
    }
    /**
     * Auto generated value setter.
     * @param acctgTagPostingCheck the acctgTagPostingCheck to set
    */
    public void setAcctgTagPostingCheck(AcctgTagPostingCheck acctgTagPostingCheck) {
        this.acctgTagPostingCheck = acctgTagPostingCheck;
    }
    /**
     * Auto generated value setter.
     * @param acctgTranses the acctgTranses to set
    */
    public void setAcctgTranses(List<AcctgTrans> acctgTranses) {
        this.acctgTranses = acctgTranses;
    }
    /**
     * Auto generated value setter.
     * @param acctgTransEntrys the acctgTransEntrys to set
    */
    public void setAcctgTransEntrys(List<AcctgTransEntry> acctgTransEntrys) {
        this.acctgTransEntrys = acctgTransEntrys;
    }
    /**
     * Auto generated value setter.
     * @param affiliate the affiliate to set
    */
    public void setAffiliate(Affiliate affiliate) {
        this.affiliate = affiliate;
    }
    /**
     * Auto generated value setter.
     * @param fromAgreements the fromAgreements to set
    */
    public void setFromAgreements(List<Agreement> fromAgreements) {
        this.fromAgreements = fromAgreements;
    }
    /**
     * Auto generated value setter.
     * @param toAgreements the toAgreements to set
    */
    public void setToAgreements(List<Agreement> toAgreements) {
        this.toAgreements = toAgreements;
    }
    /**
     * Auto generated value setter.
     * @param agreementPartyApplics the agreementPartyApplics to set
    */
    public void setAgreementPartyApplics(List<AgreementPartyApplic> agreementPartyApplics) {
        this.agreementPartyApplics = agreementPartyApplics;
    }
    /**
     * Auto generated value setter.
     * @param agreementRoles the agreementRoles to set
    */
    public void setAgreementRoles(List<AgreementRole> agreementRoles) {
        this.agreementRoles = agreementRoles;
    }
    /**
     * Auto generated value setter.
     * @param agreementTerms the agreementTerms to set
    */
    public void setAgreementTerms(List<AgreementTerm> agreementTerms) {
        this.agreementTerms = agreementTerms;
    }
    /**
     * Auto generated value setter.
     * @param agreementTermBillings the agreementTermBillings to set
    */
    public void setAgreementTermBillings(List<AgreementTermBilling> agreementTermBillings) {
        this.agreementTermBillings = agreementTermBillings;
    }
    /**
     * Auto generated value setter.
     * @param agreementTypeForRoleTypes the agreementTypeForRoleTypes to set
    */
    public void setAgreementTypeForRoleTypes(List<AgreementTypeForRoleType> agreementTypeForRoleTypes) {
        this.agreementTypeForRoleTypes = agreementTypeForRoleTypes;
    }
    /**
     * Auto generated value setter.
     * @param billingAccountRoles the billingAccountRoles to set
    */
    public void setBillingAccountRoles(List<BillingAccountRole> billingAccountRoles) {
        this.billingAccountRoles = billingAccountRoles;
    }
    /**
     * Auto generated value setter.
     * @param budgetReviews the budgetReviews to set
    */
    public void setBudgetReviews(List<BudgetReview> budgetReviews) {
        this.budgetReviews = budgetReviews;
    }
    /**
     * Auto generated value setter.
     * @param budgetRoles the budgetRoles to set
    */
    public void setBudgetRoles(List<BudgetRole> budgetRoles) {
        this.budgetRoles = budgetRoles;
    }
    /**
     * Auto generated value setter.
     * @param carrierReturnServices the carrierReturnServices to set
    */
    public void setCarrierReturnServices(List<CarrierReturnService> carrierReturnServices) {
        this.carrierReturnServices = carrierReturnServices;
    }
    /**
     * Auto generated value setter.
     * @param carrierShipmentBoxTypes the carrierShipmentBoxTypes to set
    */
    public void setCarrierShipmentBoxTypes(List<CarrierShipmentBoxType> carrierShipmentBoxTypes) {
        this.carrierShipmentBoxTypes = carrierShipmentBoxTypes;
    }
    /**
     * Auto generated value setter.
     * @param carrierShipmentMethods the carrierShipmentMethods to set
    */
    public void setCarrierShipmentMethods(List<CarrierShipmentMethod> carrierShipmentMethods) {
        this.carrierShipmentMethods = carrierShipmentMethods;
    }
    /**
     * Auto generated value setter.
     * @param toCommunicationEvents the toCommunicationEvents to set
    */
    public void setToCommunicationEvents(List<CommunicationEvent> toCommunicationEvents) {
        this.toCommunicationEvents = toCommunicationEvents;
    }
    /**
     * Auto generated value setter.
     * @param fromCommunicationEvents the fromCommunicationEvents to set
    */
    public void setFromCommunicationEvents(List<CommunicationEvent> fromCommunicationEvents) {
        this.fromCommunicationEvents = fromCommunicationEvents;
    }
    /**
     * Auto generated value setter.
     * @param communicationEventRoles the communicationEventRoles to set
    */
    public void setCommunicationEventRoles(List<CommunicationEventRole> communicationEventRoles) {
        this.communicationEventRoles = communicationEventRoles;
    }
    /**
     * Auto generated value setter.
     * @param ownerContactLists the ownerContactLists to set
    */
    public void setOwnerContactLists(List<ContactList> ownerContactLists) {
        this.ownerContactLists = ownerContactLists;
    }
    /**
     * Auto generated value setter.
     * @param contactListPartys the contactListPartys to set
    */
    public void setContactListPartys(List<ContactListParty> contactListPartys) {
        this.contactListPartys = contactListPartys;
    }
    /**
     * Auto generated value setter.
     * @param contentApprovals the contentApprovals to set
    */
    public void setContentApprovals(List<ContentApproval> contentApprovals) {
        this.contentApprovals = contentApprovals;
    }
    /**
     * Auto generated value setter.
     * @param committedByContentRevisions the committedByContentRevisions to set
    */
    public void setCommittedByContentRevisions(List<ContentRevision> committedByContentRevisions) {
        this.committedByContentRevisions = committedByContentRevisions;
    }
    /**
     * Auto generated value setter.
     * @param contentRoles the contentRoles to set
    */
    public void setContentRoles(List<ContentRole> contentRoles) {
        this.contentRoles = contentRoles;
    }
    /**
     * Auto generated value setter.
     * @param costComponents the costComponents to set
    */
    public void setCostComponents(List<CostComponent> costComponents) {
        this.costComponents = costComponents;
    }
    /**
     * Auto generated value setter.
     * @param fromCustRequests the fromCustRequests to set
    */
    public void setFromCustRequests(List<CustRequest> fromCustRequests) {
        this.fromCustRequests = fromCustRequests;
    }
    /**
     * Auto generated value setter.
     * @param custRequestPartys the custRequestPartys to set
    */
    public void setCustRequestPartys(List<CustRequestParty> custRequestPartys) {
        this.custRequestPartys = custRequestPartys;
    }
    /**
     * Auto generated value setter.
     * @param custRequestRoles the custRequestRoles to set
    */
    public void setCustRequestRoles(List<CustRequestRole> custRequestRoles) {
        this.custRequestRoles = custRequestRoles;
    }
    /**
     * Auto generated value setter.
     * @param custRequestTypes the custRequestTypes to set
    */
    public void setCustRequestTypes(List<CustRequestType> custRequestTypes) {
        this.custRequestTypes = custRequestTypes;
    }
    /**
     * Auto generated value setter.
     * @param organizationCustomTimePeriods the organizationCustomTimePeriods to set
    */
    public void setOrganizationCustomTimePeriods(List<CustomTimePeriod> organizationCustomTimePeriods) {
        this.organizationCustomTimePeriods = organizationCustomTimePeriods;
    }
    /**
     * Auto generated value setter.
     * @param customerDataImportOrderHeaders the customerDataImportOrderHeaders to set
    */
    public void setCustomerDataImportOrderHeaders(List<DataImportOrderHeader> customerDataImportOrderHeaders) {
        this.customerDataImportOrderHeaders = customerDataImportOrderHeaders;
    }
    /**
     * Auto generated value setter.
     * @param supplierDataImportOrderHeaders the supplierDataImportOrderHeaders to set
    */
    public void setSupplierDataImportOrderHeaders(List<DataImportOrderHeader> supplierDataImportOrderHeaders) {
        this.supplierDataImportOrderHeaders = supplierDataImportOrderHeaders;
    }
    /**
     * Auto generated value setter.
     * @param dataImportShoppingList the dataImportShoppingList to set
    */
    public void setDataImportShoppingList(DataImportShoppingList dataImportShoppingList) {
        this.dataImportShoppingList = dataImportShoppingList;
    }
    /**
     * Auto generated value setter.
     * @param dataImportShoppingListItems the dataImportShoppingListItems to set
    */
    public void setDataImportShoppingListItems(List<DataImportShoppingListItem> dataImportShoppingListItems) {
        this.dataImportShoppingListItems = dataImportShoppingListItems;
    }
    /**
     * Auto generated value setter.
     * @param dataResourceRoles the dataResourceRoles to set
    */
    public void setDataResourceRoles(List<DataResourceRole> dataResourceRoles) {
        this.dataResourceRoles = dataResourceRoles;
    }
    /**
     * Auto generated value setter.
     * @param emplLeaves the emplLeaves to set
    */
    public void setEmplLeaves(List<EmplLeave> emplLeaves) {
        this.emplLeaves = emplLeaves;
    }
    /**
     * Auto generated value setter.
     * @param emplPositions the emplPositions to set
    */
    public void setEmplPositions(List<EmplPosition> emplPositions) {
        this.emplPositions = emplPositions;
    }
    /**
     * Auto generated value setter.
     * @param emplPositionFulfillments the emplPositionFulfillments to set
    */
    public void setEmplPositionFulfillments(List<EmplPositionFulfillment> emplPositionFulfillments) {
        this.emplPositionFulfillments = emplPositionFulfillments;
    }
    /**
     * Auto generated value setter.
     * @param organizationEmployeePaycheckTypes the organizationEmployeePaycheckTypes to set
    */
    public void setOrganizationEmployeePaycheckTypes(List<EmployeePaycheckType> organizationEmployeePaycheckTypes) {
        this.organizationEmployeePaycheckTypes = organizationEmployeePaycheckTypes;
    }
    /**
     * Auto generated value setter.
     * @param employeeEmployeePaycheckTypes the employeeEmployeePaycheckTypes to set
    */
    public void setEmployeeEmployeePaycheckTypes(List<EmployeePaycheckType> employeeEmployeePaycheckTypes) {
        this.employeeEmployeePaycheckTypes = employeeEmployeePaycheckTypes;
    }
    /**
     * Auto generated value setter.
     * @param toEmployments the toEmployments to set
    */
    public void setToEmployments(List<Employment> toEmployments) {
        this.toEmployments = toEmployments;
    }
    /**
     * Auto generated value setter.
     * @param fromEmployments the fromEmployments to set
    */
    public void setFromEmployments(List<Employment> fromEmployments) {
        this.fromEmployments = fromEmployments;
    }
    /**
     * Auto generated value setter.
     * @param applyingEmploymentApps the applyingEmploymentApps to set
    */
    public void setApplyingEmploymentApps(List<EmploymentApp> applyingEmploymentApps) {
        this.applyingEmploymentApps = applyingEmploymentApps;
    }
    /**
     * Auto generated value setter.
     * @param referredByEmploymentApps the referredByEmploymentApps to set
    */
    public void setReferredByEmploymentApps(List<EmploymentApp> referredByEmploymentApps) {
        this.referredByEmploymentApps = referredByEmploymentApps;
    }
    /**
     * Auto generated value setter.
     * @param ownerFacilitys the ownerFacilitys to set
    */
    public void setOwnerFacilitys(List<Facility> ownerFacilitys) {
        this.ownerFacilitys = ownerFacilitys;
    }
    /**
     * Auto generated value setter.
     * @param facilityCarrierShipments the facilityCarrierShipments to set
    */
    public void setFacilityCarrierShipments(List<FacilityCarrierShipment> facilityCarrierShipments) {
        this.facilityCarrierShipments = facilityCarrierShipments;
    }
    /**
     * Auto generated value setter.
     * @param facilityGroupRoles the facilityGroupRoles to set
    */
    public void setFacilityGroupRoles(List<FacilityGroupRole> facilityGroupRoles) {
        this.facilityGroupRoles = facilityGroupRoles;
    }
    /**
     * Auto generated value setter.
     * @param facilityPartys the facilityPartys to set
    */
    public void setFacilityPartys(List<FacilityParty> facilityPartys) {
        this.facilityPartys = facilityPartys;
    }
    /**
     * Auto generated value setter.
     * @param facilityPartyPermissions the facilityPartyPermissions to set
    */
    public void setFacilityPartyPermissions(List<FacilityPartyPermission> facilityPartyPermissions) {
        this.facilityPartyPermissions = facilityPartyPermissions;
    }
    /**
     * Auto generated value setter.
     * @param facilityRoles the facilityRoles to set
    */
    public void setFacilityRoles(List<FacilityRole> facilityRoles) {
        this.facilityRoles = facilityRoles;
    }
    /**
     * Auto generated value setter.
     * @param organizationFinAccounts the organizationFinAccounts to set
    */
    public void setOrganizationFinAccounts(List<FinAccount> organizationFinAccounts) {
        this.organizationFinAccounts = organizationFinAccounts;
    }
    /**
     * Auto generated value setter.
     * @param ownerFinAccounts the ownerFinAccounts to set
    */
    public void setOwnerFinAccounts(List<FinAccount> ownerFinAccounts) {
        this.ownerFinAccounts = ownerFinAccounts;
    }
    /**
     * Auto generated value setter.
     * @param finAccountRoles the finAccountRoles to set
    */
    public void setFinAccountRoles(List<FinAccountRole> finAccountRoles) {
        this.finAccountRoles = finAccountRoles;
    }
    /**
     * Auto generated value setter.
     * @param finAccountTranses the finAccountTranses to set
    */
    public void setFinAccountTranses(List<FinAccountTrans> finAccountTranses) {
        this.finAccountTranses = finAccountTranses;
    }
    /**
     * Auto generated value setter.
     * @param performedByFinAccountTranses the performedByFinAccountTranses to set
    */
    public void setPerformedByFinAccountTranses(List<FinAccountTrans> performedByFinAccountTranses) {
        this.performedByFinAccountTranses = performedByFinAccountTranses;
    }
    /**
     * Auto generated value setter.
     * @param organizationFinAccountTypeGlAccounts the organizationFinAccountTypeGlAccounts to set
    */
    public void setOrganizationFinAccountTypeGlAccounts(List<FinAccountTypeGlAccount> organizationFinAccountTypeGlAccounts) {
        this.organizationFinAccountTypeGlAccounts = organizationFinAccountTypeGlAccounts;
    }
    /**
     * Auto generated value setter.
     * @param fixedAssets the fixedAssets to set
    */
    public void setFixedAssets(List<FixedAsset> fixedAssets) {
        this.fixedAssets = fixedAssets;
    }
    /**
     * Auto generated value setter.
     * @param govAgencyFixedAssetRegistrations the govAgencyFixedAssetRegistrations to set
    */
    public void setGovAgencyFixedAssetRegistrations(List<FixedAssetRegistration> govAgencyFixedAssetRegistrations) {
        this.govAgencyFixedAssetRegistrations = govAgencyFixedAssetRegistrations;
    }
    /**
     * Auto generated value setter.
     * @param giftCardFulfillments the giftCardFulfillments to set
    */
    public void setGiftCardFulfillments(List<GiftCardFulfillment> giftCardFulfillments) {
        this.giftCardFulfillments = giftCardFulfillments;
    }
    /**
     * Auto generated value setter.
     * @param glAccountHistorys the glAccountHistorys to set
    */
    public void setGlAccountHistorys(List<GlAccountHistory> glAccountHistorys) {
        this.glAccountHistorys = glAccountHistorys;
    }
    /**
     * Auto generated value setter.
     * @param glAccountOrganizations the glAccountOrganizations to set
    */
    public void setGlAccountOrganizations(List<GlAccountOrganization> glAccountOrganizations) {
        this.glAccountOrganizations = glAccountOrganizations;
    }
    /**
     * Auto generated value setter.
     * @param glAccountRoles the glAccountRoles to set
    */
    public void setGlAccountRoles(List<GlAccountRole> glAccountRoles) {
        this.glAccountRoles = glAccountRoles;
    }
    /**
     * Auto generated value setter.
     * @param organizationGlAccountTypeDefaults the organizationGlAccountTypeDefaults to set
    */
    public void setOrganizationGlAccountTypeDefaults(List<GlAccountTypeDefault> organizationGlAccountTypeDefaults) {
        this.organizationGlAccountTypeDefaults = organizationGlAccountTypeDefaults;
    }
    /**
     * Auto generated value setter.
     * @param glJournals the glJournals to set
    */
    public void setGlJournals(List<GlJournal> glJournals) {
        this.glJournals = glJournals;
    }
    /**
     * Auto generated value setter.
     * @param glReconciliations the glReconciliations to set
    */
    public void setGlReconciliations(List<GlReconciliation> glReconciliations) {
        this.glReconciliations = glReconciliations;
    }
    /**
     * Auto generated value setter.
     * @param inventoryItems the inventoryItems to set
    */
    public void setInventoryItems(List<InventoryItem> inventoryItems) {
        this.inventoryItems = inventoryItems;
    }
    /**
     * Auto generated value setter.
     * @param ownerInventoryItems the ownerInventoryItems to set
    */
    public void setOwnerInventoryItems(List<InventoryItem> ownerInventoryItems) {
        this.ownerInventoryItems = ownerInventoryItems;
    }
    /**
     * Auto generated value setter.
     * @param fromInvoices the fromInvoices to set
    */
    public void setFromInvoices(List<Invoice> fromInvoices) {
        this.fromInvoices = fromInvoices;
    }
    /**
     * Auto generated value setter.
     * @param invoices the invoices to set
    */
    public void setInvoices(List<Invoice> invoices) {
        this.invoices = invoices;
    }
    /**
     * Auto generated value setter.
     * @param invoiceAdjustmentGlAccounts the invoiceAdjustmentGlAccounts to set
    */
    public void setInvoiceAdjustmentGlAccounts(List<InvoiceAdjustmentGlAccount> invoiceAdjustmentGlAccounts) {
        this.invoiceAdjustmentGlAccounts = invoiceAdjustmentGlAccounts;
    }
    /**
     * Auto generated value setter.
     * @param invoiceGlAccountTypes the invoiceGlAccountTypes to set
    */
    public void setInvoiceGlAccountTypes(List<InvoiceGlAccountType> invoiceGlAccountTypes) {
        this.invoiceGlAccountTypes = invoiceGlAccountTypes;
    }
    /**
     * Auto generated value setter.
     * @param taxAuthorityInvoiceItems the taxAuthorityInvoiceItems to set
    */
    public void setTaxAuthorityInvoiceItems(List<InvoiceItem> taxAuthorityInvoiceItems) {
        this.taxAuthorityInvoiceItems = taxAuthorityInvoiceItems;
    }
    /**
     * Auto generated value setter.
     * @param overrideOrgInvoiceItems the overrideOrgInvoiceItems to set
    */
    public void setOverrideOrgInvoiceItems(List<InvoiceItem> overrideOrgInvoiceItems) {
        this.overrideOrgInvoiceItems = overrideOrgInvoiceItems;
    }
    /**
     * Auto generated value setter.
     * @param organizationInvoiceItemTypeGlAccounts the organizationInvoiceItemTypeGlAccounts to set
    */
    public void setOrganizationInvoiceItemTypeGlAccounts(List<InvoiceItemTypeGlAccount> organizationInvoiceItemTypeGlAccounts) {
        this.organizationInvoiceItemTypeGlAccounts = organizationInvoiceItemTypeGlAccounts;
    }
    /**
     * Auto generated value setter.
     * @param invoiceRoles the invoiceRoles to set
    */
    public void setInvoiceRoles(List<InvoiceRole> invoiceRoles) {
        this.invoiceRoles = invoiceRoles;
    }
    /**
     * Auto generated value setter.
     * @param itemIssuanceRoles the itemIssuanceRoles to set
    */
    public void setItemIssuanceRoles(List<ItemIssuanceRole> itemIssuanceRoles) {
        this.itemIssuanceRoles = itemIssuanceRoles;
    }
    /**
     * Auto generated value setter.
     * @param lots the lots to set
    */
    public void setLots(List<Lot> lots) {
        this.lots = lots;
    }
    /**
     * Auto generated value setter.
     * @param marketingCampaignRoles the marketingCampaignRoles to set
    */
    public void setMarketingCampaignRoles(List<MarketingCampaignRole> marketingCampaignRoles) {
        this.marketingCampaignRoles = marketingCampaignRoles;
    }
    /**
     * Auto generated value setter.
     * @param noteNoteDatas the noteNoteDatas to set
    */
    public void setNoteNoteDatas(List<NoteData> noteNoteDatas) {
        this.noteNoteDatas = noteNoteDatas;
    }
    /**
     * Auto generated value setter.
     * @param carrierOldOrderShipmentPreferences the carrierOldOrderShipmentPreferences to set
    */
    public void setCarrierOldOrderShipmentPreferences(List<OldOrderShipmentPreference> carrierOldOrderShipmentPreferences) {
        this.carrierOldOrderShipmentPreferences = carrierOldOrderShipmentPreferences;
    }
    /**
     * Auto generated value setter.
     * @param oldPartyRates the oldPartyRates to set
    */
    public void setOldPartyRates(List<OldPartyRate> oldPartyRates) {
        this.oldPartyRates = oldPartyRates;
    }
    /**
     * Auto generated value setter.
     * @param oldPartyTaxInfoes the oldPartyTaxInfoes to set
    */
    public void setOldPartyTaxInfoes(List<OldPartyTaxInfo> oldPartyTaxInfoes) {
        this.oldPartyTaxInfoes = oldPartyTaxInfoes;
    }
    /**
     * Auto generated value setter.
     * @param oldValueLinkFulfillments the oldValueLinkFulfillments to set
    */
    public void setOldValueLinkFulfillments(List<OldValueLinkFulfillment> oldValueLinkFulfillments) {
        this.oldValueLinkFulfillments = oldValueLinkFulfillments;
    }
    /**
     * Auto generated value setter.
     * @param oldWorkEffortAssignmentRates the oldWorkEffortAssignmentRates to set
    */
    public void setOldWorkEffortAssignmentRates(List<OldWorkEffortAssignmentRate> oldWorkEffortAssignmentRates) {
        this.oldWorkEffortAssignmentRates = oldWorkEffortAssignmentRates;
    }
    /**
     * Auto generated value setter.
     * @param billFromVendorOrderHeaders the billFromVendorOrderHeaders to set
    */
    public void setBillFromVendorOrderHeaders(List<OrderHeader> billFromVendorOrderHeaders) {
        this.billFromVendorOrderHeaders = billFromVendorOrderHeaders;
    }
    /**
     * Auto generated value setter.
     * @param billToCustomerOrderHeaders the billToCustomerOrderHeaders to set
    */
    public void setBillToCustomerOrderHeaders(List<OrderHeader> billToCustomerOrderHeaders) {
        this.billToCustomerOrderHeaders = billToCustomerOrderHeaders;
    }
    /**
     * Auto generated value setter.
     * @param orderItemRoles the orderItemRoles to set
    */
    public void setOrderItemRoles(List<OrderItemRole> orderItemRoles) {
        this.orderItemRoles = orderItemRoles;
    }
    /**
     * Auto generated value setter.
     * @param supplierOrderItemShipGroups the supplierOrderItemShipGroups to set
    */
    public void setSupplierOrderItemShipGroups(List<OrderItemShipGroup> supplierOrderItemShipGroups) {
        this.supplierOrderItemShipGroups = supplierOrderItemShipGroups;
    }
    /**
     * Auto generated value setter.
     * @param vendorOrderItemShipGroups the vendorOrderItemShipGroups to set
    */
    public void setVendorOrderItemShipGroups(List<OrderItemShipGroup> vendorOrderItemShipGroups) {
        this.vendorOrderItemShipGroups = vendorOrderItemShipGroups;
    }
    /**
     * Auto generated value setter.
     * @param carrierOrderItemShipGroups the carrierOrderItemShipGroups to set
    */
    public void setCarrierOrderItemShipGroups(List<OrderItemShipGroup> carrierOrderItemShipGroups) {
        this.carrierOrderItemShipGroups = carrierOrderItemShipGroups;
    }
    /**
     * Auto generated value setter.
     * @param orderRoles the orderRoles to set
    */
    public void setOrderRoles(List<OrderRole> orderRoles) {
        this.orderRoles = orderRoles;
    }
    /**
     * Auto generated value setter.
     * @param partyAcctgPreference the partyAcctgPreference to set
    */
    public void setPartyAcctgPreference(PartyAcctgPreference partyAcctgPreference) {
        this.partyAcctgPreference = partyAcctgPreference;
    }
    /**
     * Auto generated value setter.
     * @param partyAttributes the partyAttributes to set
    */
    public void setPartyAttributes(List<PartyAttribute> partyAttributes) {
        this.partyAttributes = partyAttributes;
    }
    /**
     * Auto generated value setter.
     * @param toPartyBenefits the toPartyBenefits to set
    */
    public void setToPartyBenefits(List<PartyBenefit> toPartyBenefits) {
        this.toPartyBenefits = toPartyBenefits;
    }
    /**
     * Auto generated value setter.
     * @param fromPartyBenefits the fromPartyBenefits to set
    */
    public void setFromPartyBenefits(List<PartyBenefit> fromPartyBenefits) {
        this.fromPartyBenefits = fromPartyBenefits;
    }
    /**
     * Auto generated value setter.
     * @param partyCarrierAccounts the partyCarrierAccounts to set
    */
    public void setPartyCarrierAccounts(List<PartyCarrierAccount> partyCarrierAccounts) {
        this.partyCarrierAccounts = partyCarrierAccounts;
    }
    /**
     * Auto generated value setter.
     * @param carrierPartyCarrierAccounts the carrierPartyCarrierAccounts to set
    */
    public void setCarrierPartyCarrierAccounts(List<PartyCarrierAccount> carrierPartyCarrierAccounts) {
        this.carrierPartyCarrierAccounts = carrierPartyCarrierAccounts;
    }
    /**
     * Auto generated value setter.
     * @param partyClassifications the partyClassifications to set
    */
    public void setPartyClassifications(List<PartyClassification> partyClassifications) {
        this.partyClassifications = partyClassifications;
    }
    /**
     * Auto generated value setter.
     * @param partyContactMeches the partyContactMeches to set
    */
    public void setPartyContactMeches(List<PartyContactMech> partyContactMeches) {
        this.partyContactMeches = partyContactMeches;
    }
    /**
     * Auto generated value setter.
     * @param partyContactMechPurposes the partyContactMechPurposes to set
    */
    public void setPartyContactMechPurposes(List<PartyContactMechPurpose> partyContactMechPurposes) {
        this.partyContactMechPurposes = partyContactMechPurposes;
    }
    /**
     * Auto generated value setter.
     * @param partyContents the partyContents to set
    */
    public void setPartyContents(List<PartyContent> partyContents) {
        this.partyContents = partyContents;
    }
    /**
     * Auto generated value setter.
     * @param partyDataSources the partyDataSources to set
    */
    public void setPartyDataSources(List<PartyDataSource> partyDataSources) {
        this.partyDataSources = partyDataSources;
    }
    /**
     * Auto generated value setter.
     * @param partyFixedAssetAssignments the partyFixedAssetAssignments to set
    */
    public void setPartyFixedAssetAssignments(List<PartyFixedAssetAssignment> partyFixedAssetAssignments) {
        this.partyFixedAssetAssignments = partyFixedAssetAssignments;
    }
    /**
     * Auto generated value setter.
     * @param partyGeoPoints the partyGeoPoints to set
    */
    public void setPartyGeoPoints(List<PartyGeoPoint> partyGeoPoints) {
        this.partyGeoPoints = partyGeoPoints;
    }
    /**
     * Auto generated value setter.
     * @param organizationPartyGlAccounts the organizationPartyGlAccounts to set
    */
    public void setOrganizationPartyGlAccounts(List<PartyGlAccount> organizationPartyGlAccounts) {
        this.organizationPartyGlAccounts = organizationPartyGlAccounts;
    }
    /**
     * Auto generated value setter.
     * @param partyGlAccounts the partyGlAccounts to set
    */
    public void setPartyGlAccounts(List<PartyGlAccount> partyGlAccounts) {
        this.partyGlAccounts = partyGlAccounts;
    }
    /**
     * Auto generated value setter.
     * @param partyGroup the partyGroup to set
    */
    public void setPartyGroup(PartyGroup partyGroup) {
        this.partyGroup = partyGroup;
    }
    /**
     * Auto generated value setter.
     * @param partyIcsAvsOverride the partyIcsAvsOverride to set
    */
    public void setPartyIcsAvsOverride(PartyIcsAvsOverride partyIcsAvsOverride) {
        this.partyIcsAvsOverride = partyIcsAvsOverride;
    }
    /**
     * Auto generated value setter.
     * @param partyInvitations the partyInvitations to set
    */
    public void setPartyInvitations(List<PartyInvitation> partyInvitations) {
        this.partyInvitations = partyInvitations;
    }
    /**
     * Auto generated value setter.
     * @param toPartyInvitationGroupAssocs the toPartyInvitationGroupAssocs to set
    */
    public void setToPartyInvitationGroupAssocs(List<PartyInvitationGroupAssoc> toPartyInvitationGroupAssocs) {
        this.toPartyInvitationGroupAssocs = toPartyInvitationGroupAssocs;
    }
    /**
     * Auto generated value setter.
     * @param partyNameHistorys the partyNameHistorys to set
    */
    public void setPartyNameHistorys(List<PartyNameHistory> partyNameHistorys) {
        this.partyNameHistorys = partyNameHistorys;
    }
    /**
     * Auto generated value setter.
     * @param partyNeeds the partyNeeds to set
    */
    public void setPartyNeeds(List<PartyNeed> partyNeeds) {
        this.partyNeeds = partyNeeds;
    }
    /**
     * Auto generated value setter.
     * @param partyNotes the partyNotes to set
    */
    public void setPartyNotes(List<PartyNote> partyNotes) {
        this.partyNotes = partyNotes;
    }
    /**
     * Auto generated value setter.
     * @param partyProfileDefaults the partyProfileDefaults to set
    */
    public void setPartyProfileDefaults(List<PartyProfileDefault> partyProfileDefaults) {
        this.partyProfileDefaults = partyProfileDefaults;
    }
    /**
     * Auto generated value setter.
     * @param partyQuals the partyQuals to set
    */
    public void setPartyQuals(List<PartyQual> partyQuals) {
        this.partyQuals = partyQuals;
    }
    /**
     * Auto generated value setter.
     * @param partyRates the partyRates to set
    */
    public void setPartyRates(List<PartyRate> partyRates) {
        this.partyRates = partyRates;
    }
    /**
     * Auto generated value setter.
     * @param fromPartyRelationships the fromPartyRelationships to set
    */
    public void setFromPartyRelationships(List<PartyRelationship> fromPartyRelationships) {
        this.fromPartyRelationships = fromPartyRelationships;
    }
    /**
     * Auto generated value setter.
     * @param toPartyRelationships the toPartyRelationships to set
    */
    public void setToPartyRelationships(List<PartyRelationship> toPartyRelationships) {
        this.toPartyRelationships = toPartyRelationships;
    }
    /**
     * Auto generated value setter.
     * @param partyResumes the partyResumes to set
    */
    public void setPartyResumes(List<PartyResume> partyResumes) {
        this.partyResumes = partyResumes;
    }
    /**
     * Auto generated value setter.
     * @param partyRoles the partyRoles to set
    */
    public void setPartyRoles(List<PartyRole> partyRoles) {
        this.partyRoles = partyRoles;
    }
    /**
     * Auto generated value setter.
     * @param partySkills the partySkills to set
    */
    public void setPartySkills(List<PartySkill> partySkills) {
        this.partySkills = partySkills;
    }
    /**
     * Auto generated value setter.
     * @param partyStatuses the partyStatuses to set
    */
    public void setPartyStatuses(List<PartyStatus> partyStatuses) {
        this.partyStatuses = partyStatuses;
    }
    /**
     * Auto generated value setter.
     * @param partySupplementalData the partySupplementalData to set
    */
    public void setPartySupplementalData(PartySupplementalData partySupplementalData) {
        this.partySupplementalData = partySupplementalData;
    }
    /**
     * Auto generated value setter.
     * @param parentPartySupplementalDatas the parentPartySupplementalDatas to set
    */
    public void setParentPartySupplementalDatas(List<PartySupplementalData> parentPartySupplementalDatas) {
        this.parentPartySupplementalDatas = parentPartySupplementalDatas;
    }
    /**
     * Auto generated value setter.
     * @param partyTaxAuthInfoes the partyTaxAuthInfoes to set
    */
    public void setPartyTaxAuthInfoes(List<PartyTaxAuthInfo> partyTaxAuthInfoes) {
        this.partyTaxAuthInfoes = partyTaxAuthInfoes;
    }
    /**
     * Auto generated value setter.
     * @param paycheckItems the paycheckItems to set
    */
    public void setPaycheckItems(List<PaycheckItem> paycheckItems) {
        this.paycheckItems = paycheckItems;
    }
    /**
     * Auto generated value setter.
     * @param organizationPaycheckItemTypeGlAccounts the organizationPaycheckItemTypeGlAccounts to set
    */
    public void setOrganizationPaycheckItemTypeGlAccounts(List<PaycheckItemTypeGlAccount> organizationPaycheckItemTypeGlAccounts) {
        this.organizationPaycheckItemTypeGlAccounts = organizationPaycheckItemTypeGlAccounts;
    }
    /**
     * Auto generated value setter.
     * @param defaultDueToPaycheckItemTypeGlAccounts the defaultDueToPaycheckItemTypeGlAccounts to set
    */
    public void setDefaultDueToPaycheckItemTypeGlAccounts(List<PaycheckItemTypeGlAccount> defaultDueToPaycheckItemTypeGlAccounts) {
        this.defaultDueToPaycheckItemTypeGlAccounts = defaultDueToPaycheckItemTypeGlAccounts;
    }
    /**
     * Auto generated value setter.
     * @param fromPayments the fromPayments to set
    */
    public void setFromPayments(List<Payment> fromPayments) {
        this.fromPayments = fromPayments;
    }
    /**
     * Auto generated value setter.
     * @param toPayments the toPayments to set
    */
    public void setToPayments(List<Payment> toPayments) {
        this.toPayments = toPayments;
    }
    /**
     * Auto generated value setter.
     * @param paymentGlAccountTypeMaps the paymentGlAccountTypeMaps to set
    */
    public void setPaymentGlAccountTypeMaps(List<PaymentGlAccountTypeMap> paymentGlAccountTypeMaps) {
        this.paymentGlAccountTypeMaps = paymentGlAccountTypeMaps;
    }
    /**
     * Auto generated value setter.
     * @param paymentMethods the paymentMethods to set
    */
    public void setPaymentMethods(List<PaymentMethod> paymentMethods) {
        this.paymentMethods = paymentMethods;
    }
    /**
     * Auto generated value setter.
     * @param organizationPaymentMethodTypeGlAccounts the organizationPaymentMethodTypeGlAccounts to set
    */
    public void setOrganizationPaymentMethodTypeGlAccounts(List<PaymentMethodTypeGlAccount> organizationPaymentMethodTypeGlAccounts) {
        this.organizationPaymentMethodTypeGlAccounts = organizationPaymentMethodTypeGlAccounts;
    }
    /**
     * Auto generated value setter.
     * @param payrollPreferences the payrollPreferences to set
    */
    public void setPayrollPreferences(List<PayrollPreference> payrollPreferences) {
        this.payrollPreferences = payrollPreferences;
    }
    /**
     * Auto generated value setter.
     * @param employeePerfReviews the employeePerfReviews to set
    */
    public void setEmployeePerfReviews(List<PerfReview> employeePerfReviews) {
        this.employeePerfReviews = employeePerfReviews;
    }
    /**
     * Auto generated value setter.
     * @param managerPerfReviews the managerPerfReviews to set
    */
    public void setManagerPerfReviews(List<PerfReview> managerPerfReviews) {
        this.managerPerfReviews = managerPerfReviews;
    }
    /**
     * Auto generated value setter.
     * @param employeePerfReviewItems the employeePerfReviewItems to set
    */
    public void setEmployeePerfReviewItems(List<PerfReviewItem> employeePerfReviewItems) {
        this.employeePerfReviewItems = employeePerfReviewItems;
    }
    /**
     * Auto generated value setter.
     * @param performanceNotes the performanceNotes to set
    */
    public void setPerformanceNotes(List<PerformanceNote> performanceNotes) {
        this.performanceNotes = performanceNotes;
    }
    /**
     * Auto generated value setter.
     * @param person the person to set
    */
    public void setPerson(Person person) {
        this.person = person;
    }
    /**
     * Auto generated value setter.
     * @param personTrainings the personTrainings to set
    */
    public void setPersonTrainings(List<PersonTraining> personTrainings) {
        this.personTrainings = personTrainings;
    }
    /**
     * Auto generated value setter.
     * @param prodCatalogRoles the prodCatalogRoles to set
    */
    public void setProdCatalogRoles(List<ProdCatalogRole> prodCatalogRoles) {
        this.prodCatalogRoles = prodCatalogRoles;
    }
    /**
     * Auto generated value setter.
     * @param manufacturerProducts the manufacturerProducts to set
    */
    public void setManufacturerProducts(List<Product> manufacturerProducts) {
        this.manufacturerProducts = manufacturerProducts;
    }
    /**
     * Auto generated value setter.
     * @param productAverageCosts the productAverageCosts to set
    */
    public void setProductAverageCosts(List<ProductAverageCost> productAverageCosts) {
        this.productAverageCosts = productAverageCosts;
    }
    /**
     * Auto generated value setter.
     * @param productCategoryGlAccounts the productCategoryGlAccounts to set
    */
    public void setProductCategoryGlAccounts(List<ProductCategoryGlAccount> productCategoryGlAccounts) {
        this.productCategoryGlAccounts = productCategoryGlAccounts;
    }
    /**
     * Auto generated value setter.
     * @param productCategoryRoles the productCategoryRoles to set
    */
    public void setProductCategoryRoles(List<ProductCategoryRole> productCategoryRoles) {
        this.productCategoryRoles = productCategoryRoles;
    }
    /**
     * Auto generated value setter.
     * @param productGlAccounts the productGlAccounts to set
    */
    public void setProductGlAccounts(List<ProductGlAccount> productGlAccounts) {
        this.productGlAccounts = productGlAccounts;
    }
    /**
     * Auto generated value setter.
     * @param productPromoes the productPromoes to set
    */
    public void setProductPromoes(List<ProductPromo> productPromoes) {
        this.productPromoes = productPromoes;
    }
    /**
     * Auto generated value setter.
     * @param productPromoCodePartys the productPromoCodePartys to set
    */
    public void setProductPromoCodePartys(List<ProductPromoCodeParty> productPromoCodePartys) {
        this.productPromoCodePartys = productPromoCodePartys;
    }
    /**
     * Auto generated value setter.
     * @param productPromoUses the productPromoUses to set
    */
    public void setProductPromoUses(List<ProductPromoUse> productPromoUses) {
        this.productPromoUses = productPromoUses;
    }
    /**
     * Auto generated value setter.
     * @param productRoles the productRoles to set
    */
    public void setProductRoles(List<ProductRole> productRoles) {
        this.productRoles = productRoles;
    }
    /**
     * Auto generated value setter.
     * @param productStores the productStores to set
    */
    public void setProductStores(List<ProductStore> productStores) {
        this.productStores = productStores;
    }
    /**
     * Auto generated value setter.
     * @param defaultCarrierProductStores the defaultCarrierProductStores to set
    */
    public void setDefaultCarrierProductStores(List<ProductStore> defaultCarrierProductStores) {
        this.defaultCarrierProductStores = defaultCarrierProductStores;
    }
    /**
     * Auto generated value setter.
     * @param billToThirdPartyProductStores the billToThirdPartyProductStores to set
    */
    public void setBillToThirdPartyProductStores(List<ProductStore> billToThirdPartyProductStores) {
        this.billToThirdPartyProductStores = billToThirdPartyProductStores;
    }
    /**
     * Auto generated value setter.
     * @param productStoreGroupRoles the productStoreGroupRoles to set
    */
    public void setProductStoreGroupRoles(List<ProductStoreGroupRole> productStoreGroupRoles) {
        this.productStoreGroupRoles = productStoreGroupRoles;
    }
    /**
     * Auto generated value setter.
     * @param productStoreRoles the productStoreRoles to set
    */
    public void setProductStoreRoles(List<ProductStoreRole> productStoreRoles) {
        this.productStoreRoles = productStoreRoles;
    }
    /**
     * Auto generated value setter.
     * @param productStoreShipmentMeths the productStoreShipmentMeths to set
    */
    public void setProductStoreShipmentMeths(List<ProductStoreShipmentMeth> productStoreShipmentMeths) {
        this.productStoreShipmentMeths = productStoreShipmentMeths;
    }
    /**
     * Auto generated value setter.
     * @param vendorProductStoreVendorPayments the vendorProductStoreVendorPayments to set
    */
    public void setVendorProductStoreVendorPayments(List<ProductStoreVendorPayment> vendorProductStoreVendorPayments) {
        this.vendorProductStoreVendorPayments = vendorProductStoreVendorPayments;
    }
    /**
     * Auto generated value setter.
     * @param vendorProductStoreVendorShipments the vendorProductStoreVendorShipments to set
    */
    public void setVendorProductStoreVendorShipments(List<ProductStoreVendorShipment> vendorProductStoreVendorShipments) {
        this.vendorProductStoreVendorShipments = vendorProductStoreVendorShipments;
    }
    /**
     * Auto generated value setter.
     * @param carrierProductStoreVendorShipments the carrierProductStoreVendorShipments to set
    */
    public void setCarrierProductStoreVendorShipments(List<ProductStoreVendorShipment> carrierProductStoreVendorShipments) {
        this.carrierProductStoreVendorShipments = carrierProductStoreVendorShipments;
    }
    /**
     * Auto generated value setter.
     * @param quotes the quotes to set
    */
    public void setQuotes(List<Quote> quotes) {
        this.quotes = quotes;
    }
    /**
     * Auto generated value setter.
     * @param createdByQuotes the createdByQuotes to set
    */
    public void setCreatedByQuotes(List<Quote> createdByQuotes) {
        this.createdByQuotes = createdByQuotes;
    }
    /**
     * Auto generated value setter.
     * @param contactQuotes the contactQuotes to set
    */
    public void setContactQuotes(List<Quote> contactQuotes) {
        this.contactQuotes = contactQuotes;
    }
    /**
     * Auto generated value setter.
     * @param quoteRoles the quoteRoles to set
    */
    public void setQuoteRoles(List<QuoteRole> quoteRoles) {
        this.quoteRoles = quoteRoles;
    }
    /**
     * Auto generated value setter.
     * @param rateAmounts the rateAmounts to set
    */
    public void setRateAmounts(List<RateAmount> rateAmounts) {
        this.rateAmounts = rateAmounts;
    }
    /**
     * Auto generated value setter.
     * @param reorderGuidelines the reorderGuidelines to set
    */
    public void setReorderGuidelines(List<ReorderGuideline> reorderGuidelines) {
        this.reorderGuidelines = reorderGuidelines;
    }
    /**
     * Auto generated value setter.
     * @param requirementRoles the requirementRoles to set
    */
    public void setRequirementRoles(List<RequirementRole> requirementRoles) {
        this.requirementRoles = requirementRoles;
    }
    /**
     * Auto generated value setter.
     * @param respondingPartys the respondingPartys to set
    */
    public void setRespondingPartys(List<RespondingParty> respondingPartys) {
        this.respondingPartys = respondingPartys;
    }
    /**
     * Auto generated value setter.
     * @param returnHeaders the returnHeaders to set
    */
    public void setReturnHeaders(List<ReturnHeader> returnHeaders) {
        this.returnHeaders = returnHeaders;
    }
    /**
     * Auto generated value setter.
     * @param toReturnHeaders the toReturnHeaders to set
    */
    public void setToReturnHeaders(List<ReturnHeader> toReturnHeaders) {
        this.toReturnHeaders = toReturnHeaders;
    }
    /**
     * Auto generated value setter.
     * @param organizationSalesForecasts the organizationSalesForecasts to set
    */
    public void setOrganizationSalesForecasts(List<SalesForecast> organizationSalesForecasts) {
        this.organizationSalesForecasts = organizationSalesForecasts;
    }
    /**
     * Auto generated value setter.
     * @param internalSalesForecasts the internalSalesForecasts to set
    */
    public void setInternalSalesForecasts(List<SalesForecast> internalSalesForecasts) {
        this.internalSalesForecasts = internalSalesForecasts;
    }
    /**
     * Auto generated value setter.
     * @param organizationSalesForecastHistorys the organizationSalesForecastHistorys to set
    */
    public void setOrganizationSalesForecastHistorys(List<SalesForecastHistory> organizationSalesForecastHistorys) {
        this.organizationSalesForecastHistorys = organizationSalesForecastHistorys;
    }
    /**
     * Auto generated value setter.
     * @param internalSalesForecastHistorys the internalSalesForecastHistorys to set
    */
    public void setInternalSalesForecastHistorys(List<SalesForecastHistory> internalSalesForecastHistorys) {
        this.internalSalesForecastHistorys = internalSalesForecastHistorys;
    }
    /**
     * Auto generated value setter.
     * @param salesForecastItems the salesForecastItems to set
    */
    public void setSalesForecastItems(List<SalesForecastItem> salesForecastItems) {
        this.salesForecastItems = salesForecastItems;
    }
    /**
     * Auto generated value setter.
     * @param salesOpportunityRoles the salesOpportunityRoles to set
    */
    public void setSalesOpportunityRoles(List<SalesOpportunityRole> salesOpportunityRoles) {
        this.salesOpportunityRoles = salesOpportunityRoles;
    }
    /**
     * Auto generated value setter.
     * @param segmentGroupRoles the segmentGroupRoles to set
    */
    public void setSegmentGroupRoles(List<SegmentGroupRole> segmentGroupRoles) {
        this.segmentGroupRoles = segmentGroupRoles;
    }
    /**
     * Auto generated value setter.
     * @param serverHits the serverHits to set
    */
    public void setServerHits(List<ServerHit> serverHits) {
        this.serverHits = serverHits;
    }
    /**
     * Auto generated value setter.
     * @param toShipments the toShipments to set
    */
    public void setToShipments(List<Shipment> toShipments) {
        this.toShipments = toShipments;
    }
    /**
     * Auto generated value setter.
     * @param fromShipments the fromShipments to set
    */
    public void setFromShipments(List<Shipment> fromShipments) {
        this.fromShipments = fromShipments;
    }
    /**
     * Auto generated value setter.
     * @param shipmentCostEstimates the shipmentCostEstimates to set
    */
    public void setShipmentCostEstimates(List<ShipmentCostEstimate> shipmentCostEstimates) {
        this.shipmentCostEstimates = shipmentCostEstimates;
    }
    /**
     * Auto generated value setter.
     * @param shipmentReceiptRoles the shipmentReceiptRoles to set
    */
    public void setShipmentReceiptRoles(List<ShipmentReceiptRole> shipmentReceiptRoles) {
        this.shipmentReceiptRoles = shipmentReceiptRoles;
    }
    /**
     * Auto generated value setter.
     * @param carrierShipmentRouteSegments the carrierShipmentRouteSegments to set
    */
    public void setCarrierShipmentRouteSegments(List<ShipmentRouteSegment> carrierShipmentRouteSegments) {
        this.carrierShipmentRouteSegments = carrierShipmentRouteSegments;
    }
    /**
     * Auto generated value setter.
     * @param shoppingLists the shoppingLists to set
    */
    public void setShoppingLists(List<ShoppingList> shoppingLists) {
        this.shoppingLists = shoppingLists;
    }
    /**
     * Auto generated value setter.
     * @param subscriptions the subscriptions to set
    */
    public void setSubscriptions(List<Subscription> subscriptions) {
        this.subscriptions = subscriptions;
    }
    /**
     * Auto generated value setter.
     * @param originatedFromSubscriptions the originatedFromSubscriptions to set
    */
    public void setOriginatedFromSubscriptions(List<Subscription> originatedFromSubscriptions) {
        this.originatedFromSubscriptions = originatedFromSubscriptions;
    }
    /**
     * Auto generated value setter.
     * @param supplierProducts the supplierProducts to set
    */
    public void setSupplierProducts(List<SupplierProduct> supplierProducts) {
        this.supplierProducts = supplierProducts;
    }
    /**
     * Auto generated value setter.
     * @param supplierProductFeatures the supplierProductFeatures to set
    */
    public void setSupplierProductFeatures(List<SupplierProductFeature> supplierProductFeatures) {
        this.supplierProductFeatures = supplierProductFeatures;
    }
    /**
     * Auto generated value setter.
     * @param surveyResponses the surveyResponses to set
    */
    public void setSurveyResponses(List<SurveyResponse> surveyResponses) {
        this.surveyResponses = surveyResponses;
    }
    /**
     * Auto generated value setter.
     * @param taxAuthTaxAuthoritys the taxAuthTaxAuthoritys to set
    */
    public void setTaxAuthTaxAuthoritys(List<TaxAuthority> taxAuthTaxAuthoritys) {
        this.taxAuthTaxAuthoritys = taxAuthTaxAuthoritys;
    }
    /**
     * Auto generated value setter.
     * @param organizationTaxAuthorityGlAccounts the organizationTaxAuthorityGlAccounts to set
    */
    public void setOrganizationTaxAuthorityGlAccounts(List<TaxAuthorityGlAccount> organizationTaxAuthorityGlAccounts) {
        this.organizationTaxAuthorityGlAccounts = organizationTaxAuthorityGlAccounts;
    }
    /**
     * Auto generated value setter.
     * @param timeEntrys the timeEntrys to set
    */
    public void setTimeEntrys(List<TimeEntry> timeEntrys) {
        this.timeEntrys = timeEntrys;
    }
    /**
     * Auto generated value setter.
     * @param timesheets the timesheets to set
    */
    public void setTimesheets(List<Timesheet> timesheets) {
        this.timesheets = timesheets;
    }
    /**
     * Auto generated value setter.
     * @param clientTimesheets the clientTimesheets to set
    */
    public void setClientTimesheets(List<Timesheet> clientTimesheets) {
        this.clientTimesheets = clientTimesheets;
    }
    /**
     * Auto generated value setter.
     * @param timesheetRoles the timesheetRoles to set
    */
    public void setTimesheetRoles(List<TimesheetRole> timesheetRoles) {
        this.timesheetRoles = timesheetRoles;
    }
    /**
     * Auto generated value setter.
     * @param userLogins the userLogins to set
    */
    public void setUserLogins(List<UserLogin> userLogins) {
        this.userLogins = userLogins;
    }
    /**
     * Auto generated value setter.
     * @param userLoginHistorys the userLoginHistorys to set
    */
    public void setUserLoginHistorys(List<UserLoginHistory> userLoginHistorys) {
        this.userLoginHistorys = userLoginHistorys;
    }
    /**
     * Auto generated value setter.
     * @param organizationVarianceReasonGlAccounts the organizationVarianceReasonGlAccounts to set
    */
    public void setOrganizationVarianceReasonGlAccounts(List<VarianceReasonGlAccount> organizationVarianceReasonGlAccounts) {
        this.organizationVarianceReasonGlAccounts = organizationVarianceReasonGlAccounts;
    }
    /**
     * Auto generated value setter.
     * @param vendor the vendor to set
    */
    public void setVendor(Vendor vendor) {
        this.vendor = vendor;
    }
    /**
     * Auto generated value setter.
     * @param vendorVendorProducts the vendorVendorProducts to set
    */
    public void setVendorVendorProducts(List<VendorProduct> vendorVendorProducts) {
        this.vendorVendorProducts = vendorVendorProducts;
    }
    /**
     * Auto generated value setter.
     * @param visits the visits to set
    */
    public void setVisits(List<Visit> visits) {
        this.visits = visits;
    }
    /**
     * Auto generated value setter.
     * @param visitors the visitors to set
    */
    public void setVisitors(List<Visitor> visitors) {
        this.visitors = visitors;
    }
    /**
     * Auto generated value setter.
     * @param webSiteRoles the webSiteRoles to set
    */
    public void setWebSiteRoles(List<WebSiteRole> webSiteRoles) {
        this.webSiteRoles = webSiteRoles;
    }
    /**
     * Auto generated value setter.
     * @param webUserPreferences the webUserPreferences to set
    */
    public void setWebUserPreferences(List<WebUserPreference> webUserPreferences) {
        this.webUserPreferences = webUserPreferences;
    }
    /**
     * Auto generated value setter.
     * @param workEffortPartyAssignments the workEffortPartyAssignments to set
    */
    public void setWorkEffortPartyAssignments(List<WorkEffortPartyAssignment> workEffortPartyAssignments) {
        this.workEffortPartyAssignments = workEffortPartyAssignments;
    }

    /**
     * Auto generated method that add item to collection.
     */
    public void addAgreementPartyApplic(AgreementPartyApplic agreementPartyApplic) {
        if (this.agreementPartyApplics == null) {
            this.agreementPartyApplics = new ArrayList<AgreementPartyApplic>();
        }
        this.agreementPartyApplics.add(agreementPartyApplic);
    }
    /**
     * Auto generated method that remove item from collection.
     */
    public void removeAgreementPartyApplic(AgreementPartyApplic agreementPartyApplic) {
        if (this.agreementPartyApplics == null) {
            return;
        }
        this.agreementPartyApplics.remove(agreementPartyApplic);
    }
    /**
     * Auto generated method that clear items from collection.
     */
    public void clearAgreementPartyApplic() {
        if (this.agreementPartyApplics == null) {
            return;
        }
        this.agreementPartyApplics.clear();
    }
    /**
     * Auto generated method that add item to collection.
     */
    public void addAgreementRole(AgreementRole agreementRole) {
        if (this.agreementRoles == null) {
            this.agreementRoles = new ArrayList<AgreementRole>();
        }
        this.agreementRoles.add(agreementRole);
    }
    /**
     * Auto generated method that remove item from collection.
     */
    public void removeAgreementRole(AgreementRole agreementRole) {
        if (this.agreementRoles == null) {
            return;
        }
        this.agreementRoles.remove(agreementRole);
    }
    /**
     * Auto generated method that clear items from collection.
     */
    public void clearAgreementRole() {
        if (this.agreementRoles == null) {
            return;
        }
        this.agreementRoles.clear();
    }
    /**
     * Auto generated method that add item to collection.
     */
    public void addBillingAccountRole(BillingAccountRole billingAccountRole) {
        if (this.billingAccountRoles == null) {
            this.billingAccountRoles = new ArrayList<BillingAccountRole>();
        }
        this.billingAccountRoles.add(billingAccountRole);
    }
    /**
     * Auto generated method that remove item from collection.
     */
    public void removeBillingAccountRole(BillingAccountRole billingAccountRole) {
        if (this.billingAccountRoles == null) {
            return;
        }
        this.billingAccountRoles.remove(billingAccountRole);
    }
    /**
     * Auto generated method that clear items from collection.
     */
    public void clearBillingAccountRole() {
        if (this.billingAccountRoles == null) {
            return;
        }
        this.billingAccountRoles.clear();
    }
    /**
     * Auto generated method that add item to collection.
     */
    public void addBudgetReview(BudgetReview budgetReview) {
        if (this.budgetReviews == null) {
            this.budgetReviews = new ArrayList<BudgetReview>();
        }
        this.budgetReviews.add(budgetReview);
    }
    /**
     * Auto generated method that remove item from collection.
     */
    public void removeBudgetReview(BudgetReview budgetReview) {
        if (this.budgetReviews == null) {
            return;
        }
        this.budgetReviews.remove(budgetReview);
    }
    /**
     * Auto generated method that clear items from collection.
     */
    public void clearBudgetReview() {
        if (this.budgetReviews == null) {
            return;
        }
        this.budgetReviews.clear();
    }
    /**
     * Auto generated method that add item to collection.
     */
    public void addBudgetRole(BudgetRole budgetRole) {
        if (this.budgetRoles == null) {
            this.budgetRoles = new ArrayList<BudgetRole>();
        }
        this.budgetRoles.add(budgetRole);
    }
    /**
     * Auto generated method that remove item from collection.
     */
    public void removeBudgetRole(BudgetRole budgetRole) {
        if (this.budgetRoles == null) {
            return;
        }
        this.budgetRoles.remove(budgetRole);
    }
    /**
     * Auto generated method that clear items from collection.
     */
    public void clearBudgetRole() {
        if (this.budgetRoles == null) {
            return;
        }
        this.budgetRoles.clear();
    }
    /**
     * Auto generated method that add item to collection.
     */
    public void addCarrierShipmentBoxType(CarrierShipmentBoxType carrierShipmentBoxType) {
        if (this.carrierShipmentBoxTypes == null) {
            this.carrierShipmentBoxTypes = new ArrayList<CarrierShipmentBoxType>();
        }
        this.carrierShipmentBoxTypes.add(carrierShipmentBoxType);
    }
    /**
     * Auto generated method that remove item from collection.
     */
    public void removeCarrierShipmentBoxType(CarrierShipmentBoxType carrierShipmentBoxType) {
        if (this.carrierShipmentBoxTypes == null) {
            return;
        }
        this.carrierShipmentBoxTypes.remove(carrierShipmentBoxType);
    }
    /**
     * Auto generated method that clear items from collection.
     */
    public void clearCarrierShipmentBoxType() {
        if (this.carrierShipmentBoxTypes == null) {
            return;
        }
        this.carrierShipmentBoxTypes.clear();
    }
    /**
     * Auto generated method that add item to collection.
     */
    public void addCarrierShipmentMethod(CarrierShipmentMethod carrierShipmentMethod) {
        if (this.carrierShipmentMethods == null) {
            this.carrierShipmentMethods = new ArrayList<CarrierShipmentMethod>();
        }
        this.carrierShipmentMethods.add(carrierShipmentMethod);
    }
    /**
     * Auto generated method that remove item from collection.
     */
    public void removeCarrierShipmentMethod(CarrierShipmentMethod carrierShipmentMethod) {
        if (this.carrierShipmentMethods == null) {
            return;
        }
        this.carrierShipmentMethods.remove(carrierShipmentMethod);
    }
    /**
     * Auto generated method that clear items from collection.
     */
    public void clearCarrierShipmentMethod() {
        if (this.carrierShipmentMethods == null) {
            return;
        }
        this.carrierShipmentMethods.clear();
    }
    /**
     * Auto generated method that add item to collection.
     */
    public void addCommunicationEventRole(CommunicationEventRole communicationEventRole) {
        if (this.communicationEventRoles == null) {
            this.communicationEventRoles = new ArrayList<CommunicationEventRole>();
        }
        this.communicationEventRoles.add(communicationEventRole);
    }
    /**
     * Auto generated method that remove item from collection.
     */
    public void removeCommunicationEventRole(CommunicationEventRole communicationEventRole) {
        if (this.communicationEventRoles == null) {
            return;
        }
        this.communicationEventRoles.remove(communicationEventRole);
    }
    /**
     * Auto generated method that clear items from collection.
     */
    public void clearCommunicationEventRole() {
        if (this.communicationEventRoles == null) {
            return;
        }
        this.communicationEventRoles.clear();
    }
    /**
     * Auto generated method that add item to collection.
     */
    public void addContactListParty(ContactListParty contactListParty) {
        if (this.contactListPartys == null) {
            this.contactListPartys = new ArrayList<ContactListParty>();
        }
        this.contactListPartys.add(contactListParty);
    }
    /**
     * Auto generated method that remove item from collection.
     */
    public void removeContactListParty(ContactListParty contactListParty) {
        if (this.contactListPartys == null) {
            return;
        }
        this.contactListPartys.remove(contactListParty);
    }
    /**
     * Auto generated method that clear items from collection.
     */
    public void clearContactListParty() {
        if (this.contactListPartys == null) {
            return;
        }
        this.contactListPartys.clear();
    }
    /**
     * Auto generated method that add item to collection.
     */
    public void addContentRole(ContentRole contentRole) {
        if (this.contentRoles == null) {
            this.contentRoles = new ArrayList<ContentRole>();
        }
        this.contentRoles.add(contentRole);
    }
    /**
     * Auto generated method that remove item from collection.
     */
    public void removeContentRole(ContentRole contentRole) {
        if (this.contentRoles == null) {
            return;
        }
        this.contentRoles.remove(contentRole);
    }
    /**
     * Auto generated method that clear items from collection.
     */
    public void clearContentRole() {
        if (this.contentRoles == null) {
            return;
        }
        this.contentRoles.clear();
    }
    /**
     * Auto generated method that add item to collection.
     */
    public void addCustRequestParty(CustRequestParty custRequestParty) {
        if (this.custRequestPartys == null) {
            this.custRequestPartys = new ArrayList<CustRequestParty>();
        }
        this.custRequestPartys.add(custRequestParty);
    }
    /**
     * Auto generated method that remove item from collection.
     */
    public void removeCustRequestParty(CustRequestParty custRequestParty) {
        if (this.custRequestPartys == null) {
            return;
        }
        this.custRequestPartys.remove(custRequestParty);
    }
    /**
     * Auto generated method that clear items from collection.
     */
    public void clearCustRequestParty() {
        if (this.custRequestPartys == null) {
            return;
        }
        this.custRequestPartys.clear();
    }
    /**
     * Auto generated method that add item to collection.
     */
    public void addCustRequestRole(CustRequestRole custRequestRole) {
        if (this.custRequestRoles == null) {
            this.custRequestRoles = new ArrayList<CustRequestRole>();
        }
        this.custRequestRoles.add(custRequestRole);
    }
    /**
     * Auto generated method that remove item from collection.
     */
    public void removeCustRequestRole(CustRequestRole custRequestRole) {
        if (this.custRequestRoles == null) {
            return;
        }
        this.custRequestRoles.remove(custRequestRole);
    }
    /**
     * Auto generated method that clear items from collection.
     */
    public void clearCustRequestRole() {
        if (this.custRequestRoles == null) {
            return;
        }
        this.custRequestRoles.clear();
    }
    /**
     * Auto generated method that add item to collection.
     */
    public void addDataImportShoppingListItem(DataImportShoppingListItem dataImportShoppingListItem) {
        if (this.dataImportShoppingListItems == null) {
            this.dataImportShoppingListItems = new ArrayList<DataImportShoppingListItem>();
        }
        this.dataImportShoppingListItems.add(dataImportShoppingListItem);
    }
    /**
     * Auto generated method that remove item from collection.
     */
    public void removeDataImportShoppingListItem(DataImportShoppingListItem dataImportShoppingListItem) {
        if (this.dataImportShoppingListItems == null) {
            return;
        }
        this.dataImportShoppingListItems.remove(dataImportShoppingListItem);
    }
    /**
     * Auto generated method that clear items from collection.
     */
    public void clearDataImportShoppingListItem() {
        if (this.dataImportShoppingListItems == null) {
            return;
        }
        this.dataImportShoppingListItems.clear();
    }
    /**
     * Auto generated method that add item to collection.
     */
    public void addDataResourceRole(DataResourceRole dataResourceRole) {
        if (this.dataResourceRoles == null) {
            this.dataResourceRoles = new ArrayList<DataResourceRole>();
        }
        this.dataResourceRoles.add(dataResourceRole);
    }
    /**
     * Auto generated method that remove item from collection.
     */
    public void removeDataResourceRole(DataResourceRole dataResourceRole) {
        if (this.dataResourceRoles == null) {
            return;
        }
        this.dataResourceRoles.remove(dataResourceRole);
    }
    /**
     * Auto generated method that clear items from collection.
     */
    public void clearDataResourceRole() {
        if (this.dataResourceRoles == null) {
            return;
        }
        this.dataResourceRoles.clear();
    }
    /**
     * Auto generated method that add item to collection.
     */
    public void addEmplLeave(EmplLeave emplLeave) {
        if (this.emplLeaves == null) {
            this.emplLeaves = new ArrayList<EmplLeave>();
        }
        this.emplLeaves.add(emplLeave);
    }
    /**
     * Auto generated method that remove item from collection.
     */
    public void removeEmplLeave(EmplLeave emplLeave) {
        if (this.emplLeaves == null) {
            return;
        }
        this.emplLeaves.remove(emplLeave);
    }
    /**
     * Auto generated method that clear items from collection.
     */
    public void clearEmplLeave() {
        if (this.emplLeaves == null) {
            return;
        }
        this.emplLeaves.clear();
    }
    /**
     * Auto generated method that add item to collection.
     */
    public void addEmplPositionFulfillment(EmplPositionFulfillment emplPositionFulfillment) {
        if (this.emplPositionFulfillments == null) {
            this.emplPositionFulfillments = new ArrayList<EmplPositionFulfillment>();
        }
        this.emplPositionFulfillments.add(emplPositionFulfillment);
    }
    /**
     * Auto generated method that remove item from collection.
     */
    public void removeEmplPositionFulfillment(EmplPositionFulfillment emplPositionFulfillment) {
        if (this.emplPositionFulfillments == null) {
            return;
        }
        this.emplPositionFulfillments.remove(emplPositionFulfillment);
    }
    /**
     * Auto generated method that clear items from collection.
     */
    public void clearEmplPositionFulfillment() {
        if (this.emplPositionFulfillments == null) {
            return;
        }
        this.emplPositionFulfillments.clear();
    }
    /**
     * Auto generated method that add item to collection.
     */
    public void addOrganizationEmployeePaycheckType(EmployeePaycheckType organizationEmployeePaycheckType) {
        if (this.organizationEmployeePaycheckTypes == null) {
            this.organizationEmployeePaycheckTypes = new ArrayList<EmployeePaycheckType>();
        }
        this.organizationEmployeePaycheckTypes.add(organizationEmployeePaycheckType);
    }
    /**
     * Auto generated method that remove item from collection.
     */
    public void removeOrganizationEmployeePaycheckType(EmployeePaycheckType organizationEmployeePaycheckType) {
        if (this.organizationEmployeePaycheckTypes == null) {
            return;
        }
        this.organizationEmployeePaycheckTypes.remove(organizationEmployeePaycheckType);
    }
    /**
     * Auto generated method that clear items from collection.
     */
    public void clearOrganizationEmployeePaycheckType() {
        if (this.organizationEmployeePaycheckTypes == null) {
            return;
        }
        this.organizationEmployeePaycheckTypes.clear();
    }
    /**
     * Auto generated method that add item to collection.
     */
    public void addEmployeeEmployeePaycheckType(EmployeePaycheckType employeeEmployeePaycheckType) {
        if (this.employeeEmployeePaycheckTypes == null) {
            this.employeeEmployeePaycheckTypes = new ArrayList<EmployeePaycheckType>();
        }
        this.employeeEmployeePaycheckTypes.add(employeeEmployeePaycheckType);
    }
    /**
     * Auto generated method that remove item from collection.
     */
    public void removeEmployeeEmployeePaycheckType(EmployeePaycheckType employeeEmployeePaycheckType) {
        if (this.employeeEmployeePaycheckTypes == null) {
            return;
        }
        this.employeeEmployeePaycheckTypes.remove(employeeEmployeePaycheckType);
    }
    /**
     * Auto generated method that clear items from collection.
     */
    public void clearEmployeeEmployeePaycheckType() {
        if (this.employeeEmployeePaycheckTypes == null) {
            return;
        }
        this.employeeEmployeePaycheckTypes.clear();
    }
    /**
     * Auto generated method that add item to collection.
     */
    public void addFacilityCarrierShipment(FacilityCarrierShipment facilityCarrierShipment) {
        if (this.facilityCarrierShipments == null) {
            this.facilityCarrierShipments = new ArrayList<FacilityCarrierShipment>();
        }
        this.facilityCarrierShipments.add(facilityCarrierShipment);
    }
    /**
     * Auto generated method that remove item from collection.
     */
    public void removeFacilityCarrierShipment(FacilityCarrierShipment facilityCarrierShipment) {
        if (this.facilityCarrierShipments == null) {
            return;
        }
        this.facilityCarrierShipments.remove(facilityCarrierShipment);
    }
    /**
     * Auto generated method that clear items from collection.
     */
    public void clearFacilityCarrierShipment() {
        if (this.facilityCarrierShipments == null) {
            return;
        }
        this.facilityCarrierShipments.clear();
    }
    /**
     * Auto generated method that add item to collection.
     */
    public void addFacilityGroupRole(FacilityGroupRole facilityGroupRole) {
        if (this.facilityGroupRoles == null) {
            this.facilityGroupRoles = new ArrayList<FacilityGroupRole>();
        }
        this.facilityGroupRoles.add(facilityGroupRole);
    }
    /**
     * Auto generated method that remove item from collection.
     */
    public void removeFacilityGroupRole(FacilityGroupRole facilityGroupRole) {
        if (this.facilityGroupRoles == null) {
            return;
        }
        this.facilityGroupRoles.remove(facilityGroupRole);
    }
    /**
     * Auto generated method that clear items from collection.
     */
    public void clearFacilityGroupRole() {
        if (this.facilityGroupRoles == null) {
            return;
        }
        this.facilityGroupRoles.clear();
    }
    /**
     * Auto generated method that add item to collection.
     */
    public void addFacilityParty(FacilityParty facilityParty) {
        if (this.facilityPartys == null) {
            this.facilityPartys = new ArrayList<FacilityParty>();
        }
        this.facilityPartys.add(facilityParty);
    }
    /**
     * Auto generated method that remove item from collection.
     */
    public void removeFacilityParty(FacilityParty facilityParty) {
        if (this.facilityPartys == null) {
            return;
        }
        this.facilityPartys.remove(facilityParty);
    }
    /**
     * Auto generated method that clear items from collection.
     */
    public void clearFacilityParty() {
        if (this.facilityPartys == null) {
            return;
        }
        this.facilityPartys.clear();
    }
    /**
     * Auto generated method that add item to collection.
     */
    public void addFacilityPartyPermission(FacilityPartyPermission facilityPartyPermission) {
        if (this.facilityPartyPermissions == null) {
            this.facilityPartyPermissions = new ArrayList<FacilityPartyPermission>();
        }
        this.facilityPartyPermissions.add(facilityPartyPermission);
    }
    /**
     * Auto generated method that remove item from collection.
     */
    public void removeFacilityPartyPermission(FacilityPartyPermission facilityPartyPermission) {
        if (this.facilityPartyPermissions == null) {
            return;
        }
        this.facilityPartyPermissions.remove(facilityPartyPermission);
    }
    /**
     * Auto generated method that clear items from collection.
     */
    public void clearFacilityPartyPermission() {
        if (this.facilityPartyPermissions == null) {
            return;
        }
        this.facilityPartyPermissions.clear();
    }
    /**
     * Auto generated method that add item to collection.
     */
    public void addFacilityRole(FacilityRole facilityRole) {
        if (this.facilityRoles == null) {
            this.facilityRoles = new ArrayList<FacilityRole>();
        }
        this.facilityRoles.add(facilityRole);
    }
    /**
     * Auto generated method that remove item from collection.
     */
    public void removeFacilityRole(FacilityRole facilityRole) {
        if (this.facilityRoles == null) {
            return;
        }
        this.facilityRoles.remove(facilityRole);
    }
    /**
     * Auto generated method that clear items from collection.
     */
    public void clearFacilityRole() {
        if (this.facilityRoles == null) {
            return;
        }
        this.facilityRoles.clear();
    }
    /**
     * Auto generated method that add item to collection.
     */
    public void addFinAccountRole(FinAccountRole finAccountRole) {
        if (this.finAccountRoles == null) {
            this.finAccountRoles = new ArrayList<FinAccountRole>();
        }
        this.finAccountRoles.add(finAccountRole);
    }
    /**
     * Auto generated method that remove item from collection.
     */
    public void removeFinAccountRole(FinAccountRole finAccountRole) {
        if (this.finAccountRoles == null) {
            return;
        }
        this.finAccountRoles.remove(finAccountRole);
    }
    /**
     * Auto generated method that clear items from collection.
     */
    public void clearFinAccountRole() {
        if (this.finAccountRoles == null) {
            return;
        }
        this.finAccountRoles.clear();
    }
    /**
     * Auto generated method that add item to collection.
     */
    public void addOrganizationFinAccountTypeGlAccount(FinAccountTypeGlAccount organizationFinAccountTypeGlAccount) {
        if (this.organizationFinAccountTypeGlAccounts == null) {
            this.organizationFinAccountTypeGlAccounts = new ArrayList<FinAccountTypeGlAccount>();
        }
        this.organizationFinAccountTypeGlAccounts.add(organizationFinAccountTypeGlAccount);
    }
    /**
     * Auto generated method that remove item from collection.
     */
    public void removeOrganizationFinAccountTypeGlAccount(FinAccountTypeGlAccount organizationFinAccountTypeGlAccount) {
        if (this.organizationFinAccountTypeGlAccounts == null) {
            return;
        }
        this.organizationFinAccountTypeGlAccounts.remove(organizationFinAccountTypeGlAccount);
    }
    /**
     * Auto generated method that clear items from collection.
     */
    public void clearOrganizationFinAccountTypeGlAccount() {
        if (this.organizationFinAccountTypeGlAccounts == null) {
            return;
        }
        this.organizationFinAccountTypeGlAccounts.clear();
    }
    /**
     * Auto generated method that add item to collection.
     */
    public void addGlAccountRole(GlAccountRole glAccountRole) {
        if (this.glAccountRoles == null) {
            this.glAccountRoles = new ArrayList<GlAccountRole>();
        }
        this.glAccountRoles.add(glAccountRole);
    }
    /**
     * Auto generated method that remove item from collection.
     */
    public void removeGlAccountRole(GlAccountRole glAccountRole) {
        if (this.glAccountRoles == null) {
            return;
        }
        this.glAccountRoles.remove(glAccountRole);
    }
    /**
     * Auto generated method that clear items from collection.
     */
    public void clearGlAccountRole() {
        if (this.glAccountRoles == null) {
            return;
        }
        this.glAccountRoles.clear();
    }
    /**
     * Auto generated method that add item to collection.
     */
    public void addOrganizationGlAccountTypeDefault(GlAccountTypeDefault organizationGlAccountTypeDefault) {
        if (this.organizationGlAccountTypeDefaults == null) {
            this.organizationGlAccountTypeDefaults = new ArrayList<GlAccountTypeDefault>();
        }
        this.organizationGlAccountTypeDefaults.add(organizationGlAccountTypeDefault);
    }
    /**
     * Auto generated method that remove item from collection.
     */
    public void removeOrganizationGlAccountTypeDefault(GlAccountTypeDefault organizationGlAccountTypeDefault) {
        if (this.organizationGlAccountTypeDefaults == null) {
            return;
        }
        this.organizationGlAccountTypeDefaults.remove(organizationGlAccountTypeDefault);
    }
    /**
     * Auto generated method that clear items from collection.
     */
    public void clearOrganizationGlAccountTypeDefault() {
        if (this.organizationGlAccountTypeDefaults == null) {
            return;
        }
        this.organizationGlAccountTypeDefaults.clear();
    }
    /**
     * Auto generated method that add item to collection.
     */
    public void addOrganizationInvoiceItemTypeGlAccount(InvoiceItemTypeGlAccount organizationInvoiceItemTypeGlAccount) {
        if (this.organizationInvoiceItemTypeGlAccounts == null) {
            this.organizationInvoiceItemTypeGlAccounts = new ArrayList<InvoiceItemTypeGlAccount>();
        }
        this.organizationInvoiceItemTypeGlAccounts.add(organizationInvoiceItemTypeGlAccount);
    }
    /**
     * Auto generated method that remove item from collection.
     */
    public void removeOrganizationInvoiceItemTypeGlAccount(InvoiceItemTypeGlAccount organizationInvoiceItemTypeGlAccount) {
        if (this.organizationInvoiceItemTypeGlAccounts == null) {
            return;
        }
        this.organizationInvoiceItemTypeGlAccounts.remove(organizationInvoiceItemTypeGlAccount);
    }
    /**
     * Auto generated method that clear items from collection.
     */
    public void clearOrganizationInvoiceItemTypeGlAccount() {
        if (this.organizationInvoiceItemTypeGlAccounts == null) {
            return;
        }
        this.organizationInvoiceItemTypeGlAccounts.clear();
    }
    /**
     * Auto generated method that add item to collection.
     */
    public void addInvoiceRole(InvoiceRole invoiceRole) {
        if (this.invoiceRoles == null) {
            this.invoiceRoles = new ArrayList<InvoiceRole>();
        }
        this.invoiceRoles.add(invoiceRole);
    }
    /**
     * Auto generated method that remove item from collection.
     */
    public void removeInvoiceRole(InvoiceRole invoiceRole) {
        if (this.invoiceRoles == null) {
            return;
        }
        this.invoiceRoles.remove(invoiceRole);
    }
    /**
     * Auto generated method that clear items from collection.
     */
    public void clearInvoiceRole() {
        if (this.invoiceRoles == null) {
            return;
        }
        this.invoiceRoles.clear();
    }
    /**
     * Auto generated method that add item to collection.
     */
    public void addItemIssuanceRole(ItemIssuanceRole itemIssuanceRole) {
        if (this.itemIssuanceRoles == null) {
            this.itemIssuanceRoles = new ArrayList<ItemIssuanceRole>();
        }
        this.itemIssuanceRoles.add(itemIssuanceRole);
    }
    /**
     * Auto generated method that remove item from collection.
     */
    public void removeItemIssuanceRole(ItemIssuanceRole itemIssuanceRole) {
        if (this.itemIssuanceRoles == null) {
            return;
        }
        this.itemIssuanceRoles.remove(itemIssuanceRole);
    }
    /**
     * Auto generated method that clear items from collection.
     */
    public void clearItemIssuanceRole() {
        if (this.itemIssuanceRoles == null) {
            return;
        }
        this.itemIssuanceRoles.clear();
    }
    /**
     * Auto generated method that add item to collection.
     */
    public void addMarketingCampaignRole(MarketingCampaignRole marketingCampaignRole) {
        if (this.marketingCampaignRoles == null) {
            this.marketingCampaignRoles = new ArrayList<MarketingCampaignRole>();
        }
        this.marketingCampaignRoles.add(marketingCampaignRole);
    }
    /**
     * Auto generated method that remove item from collection.
     */
    public void removeMarketingCampaignRole(MarketingCampaignRole marketingCampaignRole) {
        if (this.marketingCampaignRoles == null) {
            return;
        }
        this.marketingCampaignRoles.remove(marketingCampaignRole);
    }
    /**
     * Auto generated method that clear items from collection.
     */
    public void clearMarketingCampaignRole() {
        if (this.marketingCampaignRoles == null) {
            return;
        }
        this.marketingCampaignRoles.clear();
    }
    /**
     * Auto generated method that add item to collection.
     */
    public void addOldPartyRate(OldPartyRate oldPartyRate) {
        if (this.oldPartyRates == null) {
            this.oldPartyRates = new ArrayList<OldPartyRate>();
        }
        this.oldPartyRates.add(oldPartyRate);
    }
    /**
     * Auto generated method that remove item from collection.
     */
    public void removeOldPartyRate(OldPartyRate oldPartyRate) {
        if (this.oldPartyRates == null) {
            return;
        }
        this.oldPartyRates.remove(oldPartyRate);
    }
    /**
     * Auto generated method that clear items from collection.
     */
    public void clearOldPartyRate() {
        if (this.oldPartyRates == null) {
            return;
        }
        this.oldPartyRates.clear();
    }
    /**
     * Auto generated method that add item to collection.
     */
    public void addOldPartyTaxInfoe(OldPartyTaxInfo oldPartyTaxInfoe) {
        if (this.oldPartyTaxInfoes == null) {
            this.oldPartyTaxInfoes = new ArrayList<OldPartyTaxInfo>();
        }
        this.oldPartyTaxInfoes.add(oldPartyTaxInfoe);
    }
    /**
     * Auto generated method that remove item from collection.
     */
    public void removeOldPartyTaxInfoe(OldPartyTaxInfo oldPartyTaxInfoe) {
        if (this.oldPartyTaxInfoes == null) {
            return;
        }
        this.oldPartyTaxInfoes.remove(oldPartyTaxInfoe);
    }
    /**
     * Auto generated method that clear items from collection.
     */
    public void clearOldPartyTaxInfoe() {
        if (this.oldPartyTaxInfoes == null) {
            return;
        }
        this.oldPartyTaxInfoes.clear();
    }
    /**
     * Auto generated method that add item to collection.
     */
    public void addOldWorkEffortAssignmentRate(OldWorkEffortAssignmentRate oldWorkEffortAssignmentRate) {
        if (this.oldWorkEffortAssignmentRates == null) {
            this.oldWorkEffortAssignmentRates = new ArrayList<OldWorkEffortAssignmentRate>();
        }
        this.oldWorkEffortAssignmentRates.add(oldWorkEffortAssignmentRate);
    }
    /**
     * Auto generated method that remove item from collection.
     */
    public void removeOldWorkEffortAssignmentRate(OldWorkEffortAssignmentRate oldWorkEffortAssignmentRate) {
        if (this.oldWorkEffortAssignmentRates == null) {
            return;
        }
        this.oldWorkEffortAssignmentRates.remove(oldWorkEffortAssignmentRate);
    }
    /**
     * Auto generated method that clear items from collection.
     */
    public void clearOldWorkEffortAssignmentRate() {
        if (this.oldWorkEffortAssignmentRates == null) {
            return;
        }
        this.oldWorkEffortAssignmentRates.clear();
    }
    /**
     * Auto generated method that add item to collection.
     */
    public void addOrderItemRole(OrderItemRole orderItemRole) {
        if (this.orderItemRoles == null) {
            this.orderItemRoles = new ArrayList<OrderItemRole>();
        }
        this.orderItemRoles.add(orderItemRole);
    }
    /**
     * Auto generated method that remove item from collection.
     */
    public void removeOrderItemRole(OrderItemRole orderItemRole) {
        if (this.orderItemRoles == null) {
            return;
        }
        this.orderItemRoles.remove(orderItemRole);
    }
    /**
     * Auto generated method that clear items from collection.
     */
    public void clearOrderItemRole() {
        if (this.orderItemRoles == null) {
            return;
        }
        this.orderItemRoles.clear();
    }
    /**
     * Auto generated method that add item to collection.
     */
    public void addOrderRole(OrderRole orderRole) {
        if (this.orderRoles == null) {
            this.orderRoles = new ArrayList<OrderRole>();
        }
        this.orderRoles.add(orderRole);
    }
    /**
     * Auto generated method that remove item from collection.
     */
    public void removeOrderRole(OrderRole orderRole) {
        if (this.orderRoles == null) {
            return;
        }
        this.orderRoles.remove(orderRole);
    }
    /**
     * Auto generated method that clear items from collection.
     */
    public void clearOrderRole() {
        if (this.orderRoles == null) {
            return;
        }
        this.orderRoles.clear();
    }
    /**
     * Auto generated method that add item to collection.
     */
    public void addPartyAttribute(PartyAttribute partyAttribute) {
        if (this.partyAttributes == null) {
            this.partyAttributes = new ArrayList<PartyAttribute>();
        }
        this.partyAttributes.add(partyAttribute);
    }
    /**
     * Auto generated method that remove item from collection.
     */
    public void removePartyAttribute(PartyAttribute partyAttribute) {
        if (this.partyAttributes == null) {
            return;
        }
        this.partyAttributes.remove(partyAttribute);
    }
    /**
     * Auto generated method that clear items from collection.
     */
    public void clearPartyAttribute() {
        if (this.partyAttributes == null) {
            return;
        }
        this.partyAttributes.clear();
    }
    /**
     * Auto generated method that add item to collection.
     */
    public void addPartyCarrierAccount(PartyCarrierAccount partyCarrierAccount) {
        if (this.partyCarrierAccounts == null) {
            this.partyCarrierAccounts = new ArrayList<PartyCarrierAccount>();
        }
        this.partyCarrierAccounts.add(partyCarrierAccount);
    }
    /**
     * Auto generated method that remove item from collection.
     */
    public void removePartyCarrierAccount(PartyCarrierAccount partyCarrierAccount) {
        if (this.partyCarrierAccounts == null) {
            return;
        }
        this.partyCarrierAccounts.remove(partyCarrierAccount);
    }
    /**
     * Auto generated method that clear items from collection.
     */
    public void clearPartyCarrierAccount() {
        if (this.partyCarrierAccounts == null) {
            return;
        }
        this.partyCarrierAccounts.clear();
    }
    /**
     * Auto generated method that add item to collection.
     */
    public void addCarrierPartyCarrierAccount(PartyCarrierAccount carrierPartyCarrierAccount) {
        if (this.carrierPartyCarrierAccounts == null) {
            this.carrierPartyCarrierAccounts = new ArrayList<PartyCarrierAccount>();
        }
        this.carrierPartyCarrierAccounts.add(carrierPartyCarrierAccount);
    }
    /**
     * Auto generated method that remove item from collection.
     */
    public void removeCarrierPartyCarrierAccount(PartyCarrierAccount carrierPartyCarrierAccount) {
        if (this.carrierPartyCarrierAccounts == null) {
            return;
        }
        this.carrierPartyCarrierAccounts.remove(carrierPartyCarrierAccount);
    }
    /**
     * Auto generated method that clear items from collection.
     */
    public void clearCarrierPartyCarrierAccount() {
        if (this.carrierPartyCarrierAccounts == null) {
            return;
        }
        this.carrierPartyCarrierAccounts.clear();
    }
    /**
     * Auto generated method that add item to collection.
     */
    public void addPartyClassification(PartyClassification partyClassification) {
        if (this.partyClassifications == null) {
            this.partyClassifications = new ArrayList<PartyClassification>();
        }
        this.partyClassifications.add(partyClassification);
    }
    /**
     * Auto generated method that remove item from collection.
     */
    public void removePartyClassification(PartyClassification partyClassification) {
        if (this.partyClassifications == null) {
            return;
        }
        this.partyClassifications.remove(partyClassification);
    }
    /**
     * Auto generated method that clear items from collection.
     */
    public void clearPartyClassification() {
        if (this.partyClassifications == null) {
            return;
        }
        this.partyClassifications.clear();
    }
    /**
     * Auto generated method that add item to collection.
     */
    public void addPartyContactMeche(PartyContactMech partyContactMeche) {
        if (this.partyContactMeches == null) {
            this.partyContactMeches = new ArrayList<PartyContactMech>();
        }
        this.partyContactMeches.add(partyContactMeche);
    }
    /**
     * Auto generated method that remove item from collection.
     */
    public void removePartyContactMeche(PartyContactMech partyContactMeche) {
        if (this.partyContactMeches == null) {
            return;
        }
        this.partyContactMeches.remove(partyContactMeche);
    }
    /**
     * Auto generated method that clear items from collection.
     */
    public void clearPartyContactMeche() {
        if (this.partyContactMeches == null) {
            return;
        }
        this.partyContactMeches.clear();
    }
    /**
     * Auto generated method that add item to collection.
     */
    public void addPartyContactMechPurpose(PartyContactMechPurpose partyContactMechPurpose) {
        if (this.partyContactMechPurposes == null) {
            this.partyContactMechPurposes = new ArrayList<PartyContactMechPurpose>();
        }
        this.partyContactMechPurposes.add(partyContactMechPurpose);
    }
    /**
     * Auto generated method that remove item from collection.
     */
    public void removePartyContactMechPurpose(PartyContactMechPurpose partyContactMechPurpose) {
        if (this.partyContactMechPurposes == null) {
            return;
        }
        this.partyContactMechPurposes.remove(partyContactMechPurpose);
    }
    /**
     * Auto generated method that clear items from collection.
     */
    public void clearPartyContactMechPurpose() {
        if (this.partyContactMechPurposes == null) {
            return;
        }
        this.partyContactMechPurposes.clear();
    }
    /**
     * Auto generated method that add item to collection.
     */
    public void addPartyContent(PartyContent partyContent) {
        if (this.partyContents == null) {
            this.partyContents = new ArrayList<PartyContent>();
        }
        this.partyContents.add(partyContent);
    }
    /**
     * Auto generated method that remove item from collection.
     */
    public void removePartyContent(PartyContent partyContent) {
        if (this.partyContents == null) {
            return;
        }
        this.partyContents.remove(partyContent);
    }
    /**
     * Auto generated method that clear items from collection.
     */
    public void clearPartyContent() {
        if (this.partyContents == null) {
            return;
        }
        this.partyContents.clear();
    }
    /**
     * Auto generated method that add item to collection.
     */
    public void addPartyDataSource(PartyDataSource partyDataSource) {
        if (this.partyDataSources == null) {
            this.partyDataSources = new ArrayList<PartyDataSource>();
        }
        this.partyDataSources.add(partyDataSource);
    }
    /**
     * Auto generated method that remove item from collection.
     */
    public void removePartyDataSource(PartyDataSource partyDataSource) {
        if (this.partyDataSources == null) {
            return;
        }
        this.partyDataSources.remove(partyDataSource);
    }
    /**
     * Auto generated method that clear items from collection.
     */
    public void clearPartyDataSource() {
        if (this.partyDataSources == null) {
            return;
        }
        this.partyDataSources.clear();
    }
    /**
     * Auto generated method that add item to collection.
     */
    public void addPartyFixedAssetAssignment(PartyFixedAssetAssignment partyFixedAssetAssignment) {
        if (this.partyFixedAssetAssignments == null) {
            this.partyFixedAssetAssignments = new ArrayList<PartyFixedAssetAssignment>();
        }
        this.partyFixedAssetAssignments.add(partyFixedAssetAssignment);
    }
    /**
     * Auto generated method that remove item from collection.
     */
    public void removePartyFixedAssetAssignment(PartyFixedAssetAssignment partyFixedAssetAssignment) {
        if (this.partyFixedAssetAssignments == null) {
            return;
        }
        this.partyFixedAssetAssignments.remove(partyFixedAssetAssignment);
    }
    /**
     * Auto generated method that clear items from collection.
     */
    public void clearPartyFixedAssetAssignment() {
        if (this.partyFixedAssetAssignments == null) {
            return;
        }
        this.partyFixedAssetAssignments.clear();
    }
    /**
     * Auto generated method that add item to collection.
     */
    public void addPartyGeoPoint(PartyGeoPoint partyGeoPoint) {
        if (this.partyGeoPoints == null) {
            this.partyGeoPoints = new ArrayList<PartyGeoPoint>();
        }
        this.partyGeoPoints.add(partyGeoPoint);
    }
    /**
     * Auto generated method that remove item from collection.
     */
    public void removePartyGeoPoint(PartyGeoPoint partyGeoPoint) {
        if (this.partyGeoPoints == null) {
            return;
        }
        this.partyGeoPoints.remove(partyGeoPoint);
    }
    /**
     * Auto generated method that clear items from collection.
     */
    public void clearPartyGeoPoint() {
        if (this.partyGeoPoints == null) {
            return;
        }
        this.partyGeoPoints.clear();
    }
    /**
     * Auto generated method that add item to collection.
     */
    public void addOrganizationPartyGlAccount(PartyGlAccount organizationPartyGlAccount) {
        if (this.organizationPartyGlAccounts == null) {
            this.organizationPartyGlAccounts = new ArrayList<PartyGlAccount>();
        }
        this.organizationPartyGlAccounts.add(organizationPartyGlAccount);
    }
    /**
     * Auto generated method that remove item from collection.
     */
    public void removeOrganizationPartyGlAccount(PartyGlAccount organizationPartyGlAccount) {
        if (this.organizationPartyGlAccounts == null) {
            return;
        }
        this.organizationPartyGlAccounts.remove(organizationPartyGlAccount);
    }
    /**
     * Auto generated method that clear items from collection.
     */
    public void clearOrganizationPartyGlAccount() {
        if (this.organizationPartyGlAccounts == null) {
            return;
        }
        this.organizationPartyGlAccounts.clear();
    }
    /**
     * Auto generated method that add item to collection.
     */
    public void addPartyGlAccount(PartyGlAccount partyGlAccount) {
        if (this.partyGlAccounts == null) {
            this.partyGlAccounts = new ArrayList<PartyGlAccount>();
        }
        this.partyGlAccounts.add(partyGlAccount);
    }
    /**
     * Auto generated method that remove item from collection.
     */
    public void removePartyGlAccount(PartyGlAccount partyGlAccount) {
        if (this.partyGlAccounts == null) {
            return;
        }
        this.partyGlAccounts.remove(partyGlAccount);
    }
    /**
     * Auto generated method that clear items from collection.
     */
    public void clearPartyGlAccount() {
        if (this.partyGlAccounts == null) {
            return;
        }
        this.partyGlAccounts.clear();
    }
    /**
     * Auto generated method that add item to collection.
     */
    public void addPartyNameHistory(PartyNameHistory partyNameHistory) {
        if (this.partyNameHistorys == null) {
            this.partyNameHistorys = new ArrayList<PartyNameHistory>();
        }
        this.partyNameHistorys.add(partyNameHistory);
    }
    /**
     * Auto generated method that remove item from collection.
     */
    public void removePartyNameHistory(PartyNameHistory partyNameHistory) {
        if (this.partyNameHistorys == null) {
            return;
        }
        this.partyNameHistorys.remove(partyNameHistory);
    }
    /**
     * Auto generated method that clear items from collection.
     */
    public void clearPartyNameHistory() {
        if (this.partyNameHistorys == null) {
            return;
        }
        this.partyNameHistorys.clear();
    }
    /**
     * Auto generated method that add item to collection.
     */
    public void addPartyNeed(PartyNeed partyNeed) {
        if (this.partyNeeds == null) {
            this.partyNeeds = new ArrayList<PartyNeed>();
        }
        this.partyNeeds.add(partyNeed);
    }
    /**
     * Auto generated method that remove item from collection.
     */
    public void removePartyNeed(PartyNeed partyNeed) {
        if (this.partyNeeds == null) {
            return;
        }
        this.partyNeeds.remove(partyNeed);
    }
    /**
     * Auto generated method that clear items from collection.
     */
    public void clearPartyNeed() {
        if (this.partyNeeds == null) {
            return;
        }
        this.partyNeeds.clear();
    }
    /**
     * Auto generated method that add item to collection.
     */
    public void addPartyNote(PartyNote partyNote) {
        if (this.partyNotes == null) {
            this.partyNotes = new ArrayList<PartyNote>();
        }
        this.partyNotes.add(partyNote);
    }
    /**
     * Auto generated method that remove item from collection.
     */
    public void removePartyNote(PartyNote partyNote) {
        if (this.partyNotes == null) {
            return;
        }
        this.partyNotes.remove(partyNote);
    }
    /**
     * Auto generated method that clear items from collection.
     */
    public void clearPartyNote() {
        if (this.partyNotes == null) {
            return;
        }
        this.partyNotes.clear();
    }
    /**
     * Auto generated method that add item to collection.
     */
    public void addPartyProfileDefault(PartyProfileDefault partyProfileDefault) {
        if (this.partyProfileDefaults == null) {
            this.partyProfileDefaults = new ArrayList<PartyProfileDefault>();
        }
        this.partyProfileDefaults.add(partyProfileDefault);
    }
    /**
     * Auto generated method that remove item from collection.
     */
    public void removePartyProfileDefault(PartyProfileDefault partyProfileDefault) {
        if (this.partyProfileDefaults == null) {
            return;
        }
        this.partyProfileDefaults.remove(partyProfileDefault);
    }
    /**
     * Auto generated method that clear items from collection.
     */
    public void clearPartyProfileDefault() {
        if (this.partyProfileDefaults == null) {
            return;
        }
        this.partyProfileDefaults.clear();
    }
    /**
     * Auto generated method that add item to collection.
     */
    public void addPartyQual(PartyQual partyQual) {
        if (this.partyQuals == null) {
            this.partyQuals = new ArrayList<PartyQual>();
        }
        this.partyQuals.add(partyQual);
    }
    /**
     * Auto generated method that remove item from collection.
     */
    public void removePartyQual(PartyQual partyQual) {
        if (this.partyQuals == null) {
            return;
        }
        this.partyQuals.remove(partyQual);
    }
    /**
     * Auto generated method that clear items from collection.
     */
    public void clearPartyQual() {
        if (this.partyQuals == null) {
            return;
        }
        this.partyQuals.clear();
    }
    /**
     * Auto generated method that add item to collection.
     */
    public void addPartyRate(PartyRate partyRate) {
        if (this.partyRates == null) {
            this.partyRates = new ArrayList<PartyRate>();
        }
        this.partyRates.add(partyRate);
    }
    /**
     * Auto generated method that remove item from collection.
     */
    public void removePartyRate(PartyRate partyRate) {
        if (this.partyRates == null) {
            return;
        }
        this.partyRates.remove(partyRate);
    }
    /**
     * Auto generated method that clear items from collection.
     */
    public void clearPartyRate() {
        if (this.partyRates == null) {
            return;
        }
        this.partyRates.clear();
    }
    /**
     * Auto generated method that add item to collection.
     */
    public void addPartyRole(PartyRole partyRole) {
        if (this.partyRoles == null) {
            this.partyRoles = new ArrayList<PartyRole>();
        }
        this.partyRoles.add(partyRole);
    }
    /**
     * Auto generated method that remove item from collection.
     */
    public void removePartyRole(PartyRole partyRole) {
        if (this.partyRoles == null) {
            return;
        }
        this.partyRoles.remove(partyRole);
    }
    /**
     * Auto generated method that clear items from collection.
     */
    public void clearPartyRole() {
        if (this.partyRoles == null) {
            return;
        }
        this.partyRoles.clear();
    }
    /**
     * Auto generated method that add item to collection.
     */
    public void addPartySkill(PartySkill partySkill) {
        if (this.partySkills == null) {
            this.partySkills = new ArrayList<PartySkill>();
        }
        this.partySkills.add(partySkill);
    }
    /**
     * Auto generated method that remove item from collection.
     */
    public void removePartySkill(PartySkill partySkill) {
        if (this.partySkills == null) {
            return;
        }
        this.partySkills.remove(partySkill);
    }
    /**
     * Auto generated method that clear items from collection.
     */
    public void clearPartySkill() {
        if (this.partySkills == null) {
            return;
        }
        this.partySkills.clear();
    }
    /**
     * Auto generated method that add item to collection.
     */
    public void addPartyStatuse(PartyStatus partyStatuse) {
        if (this.partyStatuses == null) {
            this.partyStatuses = new ArrayList<PartyStatus>();
        }
        this.partyStatuses.add(partyStatuse);
    }
    /**
     * Auto generated method that remove item from collection.
     */
    public void removePartyStatuse(PartyStatus partyStatuse) {
        if (this.partyStatuses == null) {
            return;
        }
        this.partyStatuses.remove(partyStatuse);
    }
    /**
     * Auto generated method that clear items from collection.
     */
    public void clearPartyStatuse() {
        if (this.partyStatuses == null) {
            return;
        }
        this.partyStatuses.clear();
    }
    /**
     * Auto generated method that add item to collection.
     */
    public void addPartyTaxAuthInfoe(PartyTaxAuthInfo partyTaxAuthInfoe) {
        if (this.partyTaxAuthInfoes == null) {
            this.partyTaxAuthInfoes = new ArrayList<PartyTaxAuthInfo>();
        }
        this.partyTaxAuthInfoes.add(partyTaxAuthInfoe);
    }
    /**
     * Auto generated method that remove item from collection.
     */
    public void removePartyTaxAuthInfoe(PartyTaxAuthInfo partyTaxAuthInfoe) {
        if (this.partyTaxAuthInfoes == null) {
            return;
        }
        this.partyTaxAuthInfoes.remove(partyTaxAuthInfoe);
    }
    /**
     * Auto generated method that clear items from collection.
     */
    public void clearPartyTaxAuthInfoe() {
        if (this.partyTaxAuthInfoes == null) {
            return;
        }
        this.partyTaxAuthInfoes.clear();
    }
    /**
     * Auto generated method that add item to collection.
     */
    public void addOrganizationPaycheckItemTypeGlAccount(PaycheckItemTypeGlAccount organizationPaycheckItemTypeGlAccount) {
        if (this.organizationPaycheckItemTypeGlAccounts == null) {
            this.organizationPaycheckItemTypeGlAccounts = new ArrayList<PaycheckItemTypeGlAccount>();
        }
        this.organizationPaycheckItemTypeGlAccounts.add(organizationPaycheckItemTypeGlAccount);
    }
    /**
     * Auto generated method that remove item from collection.
     */
    public void removeOrganizationPaycheckItemTypeGlAccount(PaycheckItemTypeGlAccount organizationPaycheckItemTypeGlAccount) {
        if (this.organizationPaycheckItemTypeGlAccounts == null) {
            return;
        }
        this.organizationPaycheckItemTypeGlAccounts.remove(organizationPaycheckItemTypeGlAccount);
    }
    /**
     * Auto generated method that clear items from collection.
     */
    public void clearOrganizationPaycheckItemTypeGlAccount() {
        if (this.organizationPaycheckItemTypeGlAccounts == null) {
            return;
        }
        this.organizationPaycheckItemTypeGlAccounts.clear();
    }
    /**
     * Auto generated method that add item to collection.
     */
    public void addOrganizationPaymentMethodTypeGlAccount(PaymentMethodTypeGlAccount organizationPaymentMethodTypeGlAccount) {
        if (this.organizationPaymentMethodTypeGlAccounts == null) {
            this.organizationPaymentMethodTypeGlAccounts = new ArrayList<PaymentMethodTypeGlAccount>();
        }
        this.organizationPaymentMethodTypeGlAccounts.add(organizationPaymentMethodTypeGlAccount);
    }
    /**
     * Auto generated method that remove item from collection.
     */
    public void removeOrganizationPaymentMethodTypeGlAccount(PaymentMethodTypeGlAccount organizationPaymentMethodTypeGlAccount) {
        if (this.organizationPaymentMethodTypeGlAccounts == null) {
            return;
        }
        this.organizationPaymentMethodTypeGlAccounts.remove(organizationPaymentMethodTypeGlAccount);
    }
    /**
     * Auto generated method that clear items from collection.
     */
    public void clearOrganizationPaymentMethodTypeGlAccount() {
        if (this.organizationPaymentMethodTypeGlAccounts == null) {
            return;
        }
        this.organizationPaymentMethodTypeGlAccounts.clear();
    }
    /**
     * Auto generated method that add item to collection.
     */
    public void addPayrollPreference(PayrollPreference payrollPreference) {
        if (this.payrollPreferences == null) {
            this.payrollPreferences = new ArrayList<PayrollPreference>();
        }
        this.payrollPreferences.add(payrollPreference);
    }
    /**
     * Auto generated method that remove item from collection.
     */
    public void removePayrollPreference(PayrollPreference payrollPreference) {
        if (this.payrollPreferences == null) {
            return;
        }
        this.payrollPreferences.remove(payrollPreference);
    }
    /**
     * Auto generated method that clear items from collection.
     */
    public void clearPayrollPreference() {
        if (this.payrollPreferences == null) {
            return;
        }
        this.payrollPreferences.clear();
    }
    /**
     * Auto generated method that add item to collection.
     */
    public void addEmployeePerfReview(PerfReview employeePerfReview) {
        if (this.employeePerfReviews == null) {
            this.employeePerfReviews = new ArrayList<PerfReview>();
        }
        this.employeePerfReviews.add(employeePerfReview);
    }
    /**
     * Auto generated method that remove item from collection.
     */
    public void removeEmployeePerfReview(PerfReview employeePerfReview) {
        if (this.employeePerfReviews == null) {
            return;
        }
        this.employeePerfReviews.remove(employeePerfReview);
    }
    /**
     * Auto generated method that clear items from collection.
     */
    public void clearEmployeePerfReview() {
        if (this.employeePerfReviews == null) {
            return;
        }
        this.employeePerfReviews.clear();
    }
    /**
     * Auto generated method that add item to collection.
     */
    public void addEmployeePerfReviewItem(PerfReviewItem employeePerfReviewItem) {
        if (this.employeePerfReviewItems == null) {
            this.employeePerfReviewItems = new ArrayList<PerfReviewItem>();
        }
        this.employeePerfReviewItems.add(employeePerfReviewItem);
    }
    /**
     * Auto generated method that remove item from collection.
     */
    public void removeEmployeePerfReviewItem(PerfReviewItem employeePerfReviewItem) {
        if (this.employeePerfReviewItems == null) {
            return;
        }
        this.employeePerfReviewItems.remove(employeePerfReviewItem);
    }
    /**
     * Auto generated method that clear items from collection.
     */
    public void clearEmployeePerfReviewItem() {
        if (this.employeePerfReviewItems == null) {
            return;
        }
        this.employeePerfReviewItems.clear();
    }
    /**
     * Auto generated method that add item to collection.
     */
    public void addPerformanceNote(PerformanceNote performanceNote) {
        if (this.performanceNotes == null) {
            this.performanceNotes = new ArrayList<PerformanceNote>();
        }
        this.performanceNotes.add(performanceNote);
    }
    /**
     * Auto generated method that remove item from collection.
     */
    public void removePerformanceNote(PerformanceNote performanceNote) {
        if (this.performanceNotes == null) {
            return;
        }
        this.performanceNotes.remove(performanceNote);
    }
    /**
     * Auto generated method that clear items from collection.
     */
    public void clearPerformanceNote() {
        if (this.performanceNotes == null) {
            return;
        }
        this.performanceNotes.clear();
    }
    /**
     * Auto generated method that add item to collection.
     */
    public void addPersonTraining(PersonTraining personTraining) {
        if (this.personTrainings == null) {
            this.personTrainings = new ArrayList<PersonTraining>();
        }
        this.personTrainings.add(personTraining);
    }
    /**
     * Auto generated method that remove item from collection.
     */
    public void removePersonTraining(PersonTraining personTraining) {
        if (this.personTrainings == null) {
            return;
        }
        this.personTrainings.remove(personTraining);
    }
    /**
     * Auto generated method that clear items from collection.
     */
    public void clearPersonTraining() {
        if (this.personTrainings == null) {
            return;
        }
        this.personTrainings.clear();
    }
    /**
     * Auto generated method that add item to collection.
     */
    public void addProdCatalogRole(ProdCatalogRole prodCatalogRole) {
        if (this.prodCatalogRoles == null) {
            this.prodCatalogRoles = new ArrayList<ProdCatalogRole>();
        }
        this.prodCatalogRoles.add(prodCatalogRole);
    }
    /**
     * Auto generated method that remove item from collection.
     */
    public void removeProdCatalogRole(ProdCatalogRole prodCatalogRole) {
        if (this.prodCatalogRoles == null) {
            return;
        }
        this.prodCatalogRoles.remove(prodCatalogRole);
    }
    /**
     * Auto generated method that clear items from collection.
     */
    public void clearProdCatalogRole() {
        if (this.prodCatalogRoles == null) {
            return;
        }
        this.prodCatalogRoles.clear();
    }
    /**
     * Auto generated method that add item to collection.
     */
    public void addProductCategoryRole(ProductCategoryRole productCategoryRole) {
        if (this.productCategoryRoles == null) {
            this.productCategoryRoles = new ArrayList<ProductCategoryRole>();
        }
        this.productCategoryRoles.add(productCategoryRole);
    }
    /**
     * Auto generated method that remove item from collection.
     */
    public void removeProductCategoryRole(ProductCategoryRole productCategoryRole) {
        if (this.productCategoryRoles == null) {
            return;
        }
        this.productCategoryRoles.remove(productCategoryRole);
    }
    /**
     * Auto generated method that clear items from collection.
     */
    public void clearProductCategoryRole() {
        if (this.productCategoryRoles == null) {
            return;
        }
        this.productCategoryRoles.clear();
    }
    /**
     * Auto generated method that add item to collection.
     */
    public void addProductPromoCodeParty(ProductPromoCodeParty productPromoCodeParty) {
        if (this.productPromoCodePartys == null) {
            this.productPromoCodePartys = new ArrayList<ProductPromoCodeParty>();
        }
        this.productPromoCodePartys.add(productPromoCodeParty);
    }
    /**
     * Auto generated method that remove item from collection.
     */
    public void removeProductPromoCodeParty(ProductPromoCodeParty productPromoCodeParty) {
        if (this.productPromoCodePartys == null) {
            return;
        }
        this.productPromoCodePartys.remove(productPromoCodeParty);
    }
    /**
     * Auto generated method that clear items from collection.
     */
    public void clearProductPromoCodeParty() {
        if (this.productPromoCodePartys == null) {
            return;
        }
        this.productPromoCodePartys.clear();
    }
    /**
     * Auto generated method that add item to collection.
     */
    public void addProductRole(ProductRole productRole) {
        if (this.productRoles == null) {
            this.productRoles = new ArrayList<ProductRole>();
        }
        this.productRoles.add(productRole);
    }
    /**
     * Auto generated method that remove item from collection.
     */
    public void removeProductRole(ProductRole productRole) {
        if (this.productRoles == null) {
            return;
        }
        this.productRoles.remove(productRole);
    }
    /**
     * Auto generated method that clear items from collection.
     */
    public void clearProductRole() {
        if (this.productRoles == null) {
            return;
        }
        this.productRoles.clear();
    }
    /**
     * Auto generated method that add item to collection.
     */
    public void addProductStoreGroupRole(ProductStoreGroupRole productStoreGroupRole) {
        if (this.productStoreGroupRoles == null) {
            this.productStoreGroupRoles = new ArrayList<ProductStoreGroupRole>();
        }
        this.productStoreGroupRoles.add(productStoreGroupRole);
    }
    /**
     * Auto generated method that remove item from collection.
     */
    public void removeProductStoreGroupRole(ProductStoreGroupRole productStoreGroupRole) {
        if (this.productStoreGroupRoles == null) {
            return;
        }
        this.productStoreGroupRoles.remove(productStoreGroupRole);
    }
    /**
     * Auto generated method that clear items from collection.
     */
    public void clearProductStoreGroupRole() {
        if (this.productStoreGroupRoles == null) {
            return;
        }
        this.productStoreGroupRoles.clear();
    }
    /**
     * Auto generated method that add item to collection.
     */
    public void addProductStoreRole(ProductStoreRole productStoreRole) {
        if (this.productStoreRoles == null) {
            this.productStoreRoles = new ArrayList<ProductStoreRole>();
        }
        this.productStoreRoles.add(productStoreRole);
    }
    /**
     * Auto generated method that remove item from collection.
     */
    public void removeProductStoreRole(ProductStoreRole productStoreRole) {
        if (this.productStoreRoles == null) {
            return;
        }
        this.productStoreRoles.remove(productStoreRole);
    }
    /**
     * Auto generated method that clear items from collection.
     */
    public void clearProductStoreRole() {
        if (this.productStoreRoles == null) {
            return;
        }
        this.productStoreRoles.clear();
    }
    /**
     * Auto generated method that add item to collection.
     */
    public void addVendorProductStoreVendorPayment(ProductStoreVendorPayment vendorProductStoreVendorPayment) {
        if (this.vendorProductStoreVendorPayments == null) {
            this.vendorProductStoreVendorPayments = new ArrayList<ProductStoreVendorPayment>();
        }
        this.vendorProductStoreVendorPayments.add(vendorProductStoreVendorPayment);
    }
    /**
     * Auto generated method that remove item from collection.
     */
    public void removeVendorProductStoreVendorPayment(ProductStoreVendorPayment vendorProductStoreVendorPayment) {
        if (this.vendorProductStoreVendorPayments == null) {
            return;
        }
        this.vendorProductStoreVendorPayments.remove(vendorProductStoreVendorPayment);
    }
    /**
     * Auto generated method that clear items from collection.
     */
    public void clearVendorProductStoreVendorPayment() {
        if (this.vendorProductStoreVendorPayments == null) {
            return;
        }
        this.vendorProductStoreVendorPayments.clear();
    }
    /**
     * Auto generated method that add item to collection.
     */
    public void addVendorProductStoreVendorShipment(ProductStoreVendorShipment vendorProductStoreVendorShipment) {
        if (this.vendorProductStoreVendorShipments == null) {
            this.vendorProductStoreVendorShipments = new ArrayList<ProductStoreVendorShipment>();
        }
        this.vendorProductStoreVendorShipments.add(vendorProductStoreVendorShipment);
    }
    /**
     * Auto generated method that remove item from collection.
     */
    public void removeVendorProductStoreVendorShipment(ProductStoreVendorShipment vendorProductStoreVendorShipment) {
        if (this.vendorProductStoreVendorShipments == null) {
            return;
        }
        this.vendorProductStoreVendorShipments.remove(vendorProductStoreVendorShipment);
    }
    /**
     * Auto generated method that clear items from collection.
     */
    public void clearVendorProductStoreVendorShipment() {
        if (this.vendorProductStoreVendorShipments == null) {
            return;
        }
        this.vendorProductStoreVendorShipments.clear();
    }
    /**
     * Auto generated method that add item to collection.
     */
    public void addCarrierProductStoreVendorShipment(ProductStoreVendorShipment carrierProductStoreVendorShipment) {
        if (this.carrierProductStoreVendorShipments == null) {
            this.carrierProductStoreVendorShipments = new ArrayList<ProductStoreVendorShipment>();
        }
        this.carrierProductStoreVendorShipments.add(carrierProductStoreVendorShipment);
    }
    /**
     * Auto generated method that remove item from collection.
     */
    public void removeCarrierProductStoreVendorShipment(ProductStoreVendorShipment carrierProductStoreVendorShipment) {
        if (this.carrierProductStoreVendorShipments == null) {
            return;
        }
        this.carrierProductStoreVendorShipments.remove(carrierProductStoreVendorShipment);
    }
    /**
     * Auto generated method that clear items from collection.
     */
    public void clearCarrierProductStoreVendorShipment() {
        if (this.carrierProductStoreVendorShipments == null) {
            return;
        }
        this.carrierProductStoreVendorShipments.clear();
    }
    /**
     * Auto generated method that add item to collection.
     */
    public void addQuoteRole(QuoteRole quoteRole) {
        if (this.quoteRoles == null) {
            this.quoteRoles = new ArrayList<QuoteRole>();
        }
        this.quoteRoles.add(quoteRole);
    }
    /**
     * Auto generated method that remove item from collection.
     */
    public void removeQuoteRole(QuoteRole quoteRole) {
        if (this.quoteRoles == null) {
            return;
        }
        this.quoteRoles.remove(quoteRole);
    }
    /**
     * Auto generated method that clear items from collection.
     */
    public void clearQuoteRole() {
        if (this.quoteRoles == null) {
            return;
        }
        this.quoteRoles.clear();
    }
    /**
     * Auto generated method that add item to collection.
     */
    public void addRateAmount(RateAmount rateAmount) {
        if (this.rateAmounts == null) {
            this.rateAmounts = new ArrayList<RateAmount>();
        }
        this.rateAmounts.add(rateAmount);
    }
    /**
     * Auto generated method that remove item from collection.
     */
    public void removeRateAmount(RateAmount rateAmount) {
        if (this.rateAmounts == null) {
            return;
        }
        this.rateAmounts.remove(rateAmount);
    }
    /**
     * Auto generated method that clear items from collection.
     */
    public void clearRateAmount() {
        if (this.rateAmounts == null) {
            return;
        }
        this.rateAmounts.clear();
    }
    /**
     * Auto generated method that add item to collection.
     */
    public void addRequirementRole(RequirementRole requirementRole) {
        if (this.requirementRoles == null) {
            this.requirementRoles = new ArrayList<RequirementRole>();
        }
        this.requirementRoles.add(requirementRole);
    }
    /**
     * Auto generated method that remove item from collection.
     */
    public void removeRequirementRole(RequirementRole requirementRole) {
        if (this.requirementRoles == null) {
            return;
        }
        this.requirementRoles.remove(requirementRole);
    }
    /**
     * Auto generated method that clear items from collection.
     */
    public void clearRequirementRole() {
        if (this.requirementRoles == null) {
            return;
        }
        this.requirementRoles.clear();
    }
    /**
     * Auto generated method that add item to collection.
     */
    public void addRespondingParty(RespondingParty respondingParty) {
        if (this.respondingPartys == null) {
            this.respondingPartys = new ArrayList<RespondingParty>();
        }
        this.respondingPartys.add(respondingParty);
    }
    /**
     * Auto generated method that remove item from collection.
     */
    public void removeRespondingParty(RespondingParty respondingParty) {
        if (this.respondingPartys == null) {
            return;
        }
        this.respondingPartys.remove(respondingParty);
    }
    /**
     * Auto generated method that clear items from collection.
     */
    public void clearRespondingParty() {
        if (this.respondingPartys == null) {
            return;
        }
        this.respondingPartys.clear();
    }
    /**
     * Auto generated method that add item to collection.
     */
    public void addSalesOpportunityRole(SalesOpportunityRole salesOpportunityRole) {
        if (this.salesOpportunityRoles == null) {
            this.salesOpportunityRoles = new ArrayList<SalesOpportunityRole>();
        }
        this.salesOpportunityRoles.add(salesOpportunityRole);
    }
    /**
     * Auto generated method that remove item from collection.
     */
    public void removeSalesOpportunityRole(SalesOpportunityRole salesOpportunityRole) {
        if (this.salesOpportunityRoles == null) {
            return;
        }
        this.salesOpportunityRoles.remove(salesOpportunityRole);
    }
    /**
     * Auto generated method that clear items from collection.
     */
    public void clearSalesOpportunityRole() {
        if (this.salesOpportunityRoles == null) {
            return;
        }
        this.salesOpportunityRoles.clear();
    }
    /**
     * Auto generated method that add item to collection.
     */
    public void addSegmentGroupRole(SegmentGroupRole segmentGroupRole) {
        if (this.segmentGroupRoles == null) {
            this.segmentGroupRoles = new ArrayList<SegmentGroupRole>();
        }
        this.segmentGroupRoles.add(segmentGroupRole);
    }
    /**
     * Auto generated method that remove item from collection.
     */
    public void removeSegmentGroupRole(SegmentGroupRole segmentGroupRole) {
        if (this.segmentGroupRoles == null) {
            return;
        }
        this.segmentGroupRoles.remove(segmentGroupRole);
    }
    /**
     * Auto generated method that clear items from collection.
     */
    public void clearSegmentGroupRole() {
        if (this.segmentGroupRoles == null) {
            return;
        }
        this.segmentGroupRoles.clear();
    }
    /**
     * Auto generated method that add item to collection.
     */
    public void addShipmentReceiptRole(ShipmentReceiptRole shipmentReceiptRole) {
        if (this.shipmentReceiptRoles == null) {
            this.shipmentReceiptRoles = new ArrayList<ShipmentReceiptRole>();
        }
        this.shipmentReceiptRoles.add(shipmentReceiptRole);
    }
    /**
     * Auto generated method that remove item from collection.
     */
    public void removeShipmentReceiptRole(ShipmentReceiptRole shipmentReceiptRole) {
        if (this.shipmentReceiptRoles == null) {
            return;
        }
        this.shipmentReceiptRoles.remove(shipmentReceiptRole);
    }
    /**
     * Auto generated method that clear items from collection.
     */
    public void clearShipmentReceiptRole() {
        if (this.shipmentReceiptRoles == null) {
            return;
        }
        this.shipmentReceiptRoles.clear();
    }
    /**
     * Auto generated method that add item to collection.
     */
    public void addSupplierProduct(SupplierProduct supplierProduct) {
        if (this.supplierProducts == null) {
            this.supplierProducts = new ArrayList<SupplierProduct>();
        }
        this.supplierProducts.add(supplierProduct);
    }
    /**
     * Auto generated method that remove item from collection.
     */
    public void removeSupplierProduct(SupplierProduct supplierProduct) {
        if (this.supplierProducts == null) {
            return;
        }
        this.supplierProducts.remove(supplierProduct);
    }
    /**
     * Auto generated method that clear items from collection.
     */
    public void clearSupplierProduct() {
        if (this.supplierProducts == null) {
            return;
        }
        this.supplierProducts.clear();
    }
    /**
     * Auto generated method that add item to collection.
     */
    public void addSupplierProductFeature(SupplierProductFeature supplierProductFeature) {
        if (this.supplierProductFeatures == null) {
            this.supplierProductFeatures = new ArrayList<SupplierProductFeature>();
        }
        this.supplierProductFeatures.add(supplierProductFeature);
    }
    /**
     * Auto generated method that remove item from collection.
     */
    public void removeSupplierProductFeature(SupplierProductFeature supplierProductFeature) {
        if (this.supplierProductFeatures == null) {
            return;
        }
        this.supplierProductFeatures.remove(supplierProductFeature);
    }
    /**
     * Auto generated method that clear items from collection.
     */
    public void clearSupplierProductFeature() {
        if (this.supplierProductFeatures == null) {
            return;
        }
        this.supplierProductFeatures.clear();
    }
    /**
     * Auto generated method that add item to collection.
     */
    public void addTaxAuthTaxAuthority(TaxAuthority taxAuthTaxAuthority) {
        if (this.taxAuthTaxAuthoritys == null) {
            this.taxAuthTaxAuthoritys = new ArrayList<TaxAuthority>();
        }
        this.taxAuthTaxAuthoritys.add(taxAuthTaxAuthority);
    }
    /**
     * Auto generated method that remove item from collection.
     */
    public void removeTaxAuthTaxAuthority(TaxAuthority taxAuthTaxAuthority) {
        if (this.taxAuthTaxAuthoritys == null) {
            return;
        }
        this.taxAuthTaxAuthoritys.remove(taxAuthTaxAuthority);
    }
    /**
     * Auto generated method that clear items from collection.
     */
    public void clearTaxAuthTaxAuthority() {
        if (this.taxAuthTaxAuthoritys == null) {
            return;
        }
        this.taxAuthTaxAuthoritys.clear();
    }
    /**
     * Auto generated method that add item to collection.
     */
    public void addOrganizationTaxAuthorityGlAccount(TaxAuthorityGlAccount organizationTaxAuthorityGlAccount) {
        if (this.organizationTaxAuthorityGlAccounts == null) {
            this.organizationTaxAuthorityGlAccounts = new ArrayList<TaxAuthorityGlAccount>();
        }
        this.organizationTaxAuthorityGlAccounts.add(organizationTaxAuthorityGlAccount);
    }
    /**
     * Auto generated method that remove item from collection.
     */
    public void removeOrganizationTaxAuthorityGlAccount(TaxAuthorityGlAccount organizationTaxAuthorityGlAccount) {
        if (this.organizationTaxAuthorityGlAccounts == null) {
            return;
        }
        this.organizationTaxAuthorityGlAccounts.remove(organizationTaxAuthorityGlAccount);
    }
    /**
     * Auto generated method that clear items from collection.
     */
    public void clearOrganizationTaxAuthorityGlAccount() {
        if (this.organizationTaxAuthorityGlAccounts == null) {
            return;
        }
        this.organizationTaxAuthorityGlAccounts.clear();
    }
    /**
     * Auto generated method that add item to collection.
     */
    public void addTimesheetRole(TimesheetRole timesheetRole) {
        if (this.timesheetRoles == null) {
            this.timesheetRoles = new ArrayList<TimesheetRole>();
        }
        this.timesheetRoles.add(timesheetRole);
    }
    /**
     * Auto generated method that remove item from collection.
     */
    public void removeTimesheetRole(TimesheetRole timesheetRole) {
        if (this.timesheetRoles == null) {
            return;
        }
        this.timesheetRoles.remove(timesheetRole);
    }
    /**
     * Auto generated method that clear items from collection.
     */
    public void clearTimesheetRole() {
        if (this.timesheetRoles == null) {
            return;
        }
        this.timesheetRoles.clear();
    }
    /**
     * Auto generated method that add item to collection.
     */
    public void addOrganizationVarianceReasonGlAccount(VarianceReasonGlAccount organizationVarianceReasonGlAccount) {
        if (this.organizationVarianceReasonGlAccounts == null) {
            this.organizationVarianceReasonGlAccounts = new ArrayList<VarianceReasonGlAccount>();
        }
        this.organizationVarianceReasonGlAccounts.add(organizationVarianceReasonGlAccount);
    }
    /**
     * Auto generated method that remove item from collection.
     */
    public void removeOrganizationVarianceReasonGlAccount(VarianceReasonGlAccount organizationVarianceReasonGlAccount) {
        if (this.organizationVarianceReasonGlAccounts == null) {
            return;
        }
        this.organizationVarianceReasonGlAccounts.remove(organizationVarianceReasonGlAccount);
    }
    /**
     * Auto generated method that clear items from collection.
     */
    public void clearOrganizationVarianceReasonGlAccount() {
        if (this.organizationVarianceReasonGlAccounts == null) {
            return;
        }
        this.organizationVarianceReasonGlAccounts.clear();
    }
    /**
     * Auto generated method that add item to collection.
     */
    public void addVendorVendorProduct(VendorProduct vendorVendorProduct) {
        if (this.vendorVendorProducts == null) {
            this.vendorVendorProducts = new ArrayList<VendorProduct>();
        }
        this.vendorVendorProducts.add(vendorVendorProduct);
    }
    /**
     * Auto generated method that remove item from collection.
     */
    public void removeVendorVendorProduct(VendorProduct vendorVendorProduct) {
        if (this.vendorVendorProducts == null) {
            return;
        }
        this.vendorVendorProducts.remove(vendorVendorProduct);
    }
    /**
     * Auto generated method that clear items from collection.
     */
    public void clearVendorVendorProduct() {
        if (this.vendorVendorProducts == null) {
            return;
        }
        this.vendorVendorProducts.clear();
    }
    /**
     * Auto generated method that add item to collection.
     */
    public void addWebSiteRole(WebSiteRole webSiteRole) {
        if (this.webSiteRoles == null) {
            this.webSiteRoles = new ArrayList<WebSiteRole>();
        }
        this.webSiteRoles.add(webSiteRole);
    }
    /**
     * Auto generated method that remove item from collection.
     */
    public void removeWebSiteRole(WebSiteRole webSiteRole) {
        if (this.webSiteRoles == null) {
            return;
        }
        this.webSiteRoles.remove(webSiteRole);
    }
    /**
     * Auto generated method that clear items from collection.
     */
    public void clearWebSiteRole() {
        if (this.webSiteRoles == null) {
            return;
        }
        this.webSiteRoles.clear();
    }
    /**
     * Auto generated method that add item to collection.
     */
    public void addWebUserPreference(WebUserPreference webUserPreference) {
        if (this.webUserPreferences == null) {
            this.webUserPreferences = new ArrayList<WebUserPreference>();
        }
        this.webUserPreferences.add(webUserPreference);
    }
    /**
     * Auto generated method that remove item from collection.
     */
    public void removeWebUserPreference(WebUserPreference webUserPreference) {
        if (this.webUserPreferences == null) {
            return;
        }
        this.webUserPreferences.remove(webUserPreference);
    }
    /**
     * Auto generated method that clear items from collection.
     */
    public void clearWebUserPreference() {
        if (this.webUserPreferences == null) {
            return;
        }
        this.webUserPreferences.clear();
    }
    /**
     * Auto generated method that add item to collection.
     */
    public void addWorkEffortPartyAssignment(WorkEffortPartyAssignment workEffortPartyAssignment) {
        if (this.workEffortPartyAssignments == null) {
            this.workEffortPartyAssignments = new ArrayList<WorkEffortPartyAssignment>();
        }
        this.workEffortPartyAssignments.add(workEffortPartyAssignment);
    }
    /**
     * Auto generated method that remove item from collection.
     */
    public void removeWorkEffortPartyAssignment(WorkEffortPartyAssignment workEffortPartyAssignment) {
        if (this.workEffortPartyAssignments == null) {
            return;
        }
        this.workEffortPartyAssignments.remove(workEffortPartyAssignment);
    }
    /**
     * Auto generated method that clear items from collection.
     */
    public void clearWorkEffortPartyAssignment() {
        if (this.workEffortPartyAssignments == null) {
            return;
        }
        this.workEffortPartyAssignments.clear();
    }

    /** {@inheritDoc} */
    @Override
    public void fromMap(Map<String, Object> mapValue) {
        preInit();
        setPartyId((String) mapValue.get("partyId"));
        setPartyTypeId((String) mapValue.get("partyTypeId"));
        setExternalId((String) mapValue.get("externalId"));
        setPreferredCurrencyUomId((String) mapValue.get("preferredCurrencyUomId"));
        setDescription((String) mapValue.get("description"));
        setStatusId((String) mapValue.get("statusId"));
        setCreatedDate((Timestamp) mapValue.get("createdDate"));
        setCreatedByUserLogin((String) mapValue.get("createdByUserLogin"));
        setLastModifiedDate((Timestamp) mapValue.get("lastModifiedDate"));
        setLastModifiedByUserLogin((String) mapValue.get("lastModifiedByUserLogin"));
        setDataSourceId((String) mapValue.get("dataSourceId"));
        setIsUnread((String) mapValue.get("isUnread"));
        setLastUpdatedStamp((Timestamp) mapValue.get("lastUpdatedStamp"));
        setLastUpdatedTxStamp((Timestamp) mapValue.get("lastUpdatedTxStamp"));
        setCreatedStamp((Timestamp) mapValue.get("createdStamp"));
        setCreatedTxStamp((Timestamp) mapValue.get("createdTxStamp"));
        postInit();
    }

    /** {@inheritDoc} */
    @Override
    public Map<String, Object> toMap() {
        Map<String, Object> mapValue = new FastMap<String, Object>();
        mapValue.put("partyId", getPartyId());
        mapValue.put("partyTypeId", getPartyTypeId());
        mapValue.put("externalId", getExternalId());
        mapValue.put("preferredCurrencyUomId", getPreferredCurrencyUomId());
        mapValue.put("description", getDescription());
        mapValue.put("statusId", getStatusId());
        mapValue.put("createdDate", getCreatedDate());
        mapValue.put("createdByUserLogin", getCreatedByUserLogin());
        mapValue.put("lastModifiedDate", getLastModifiedDate());
        mapValue.put("lastModifiedByUserLogin", getLastModifiedByUserLogin());
        mapValue.put("dataSourceId", getDataSourceId());
        mapValue.put("isUnread", getIsUnread());
        mapValue.put("lastUpdatedStamp", getLastUpdatedStamp());
        mapValue.put("lastUpdatedTxStamp", getLastUpdatedTxStamp());
        mapValue.put("createdStamp", getCreatedStamp());
        mapValue.put("createdTxStamp", getCreatedTxStamp());
        return mapValue;
    }


}
