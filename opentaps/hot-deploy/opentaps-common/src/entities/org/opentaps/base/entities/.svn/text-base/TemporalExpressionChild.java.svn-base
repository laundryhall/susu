package org.opentaps.base.entities;

/*
 * Copyright (c) Open Source Strategies, Inc.
 *
 * Opentaps is free software: you can redistribute it and/or modify it
 * under the terms of the GNU Affero General Public License as published
 * by the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Opentaps is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with Opentaps.  If not, see <http://www.gnu.org/licenses/>.
 */

// DO NOT EDIT THIS FILE!  THIS IS AUTO GENERATED AND WILL GET WRITTEN OVER PERIODICALLY WHEN THE DATA MODEL CHANGES
// EXTEND THIS CLASS INSTEAD.

import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;

import javolution.util.FastMap;

import org.opentaps.foundation.entity.Entity;
import org.opentaps.foundation.entity.EntityFieldInterface;
import org.opentaps.foundation.repository.RepositoryException;
import org.opentaps.foundation.repository.RepositoryInterface;
import javax.persistence.*;
import org.hibernate.search.annotations.*;
import java.lang.Long;
import java.lang.String;
import java.sql.Timestamp;

/**
 * Auto generated base entity TemporalExpressionChild.
 */
@javax.persistence.Entity
@NamedNativeQuery(name="selectTemporalExpressionChilds", query="SELECT TEA.FROM_TEMP_EXPR_ID AS \"fromTempExprId\",TEA.EXPR_ASSOC_TYPE AS \"exprAssocType\",TE.TEMP_EXPR_ID AS \"tempExprId\",TE.TEMP_EXPR_TYPE_ID AS \"tempExprTypeId\",TE.DATE1 AS \"date1\",TE.DATE2 AS \"date2\",TE.INTEGER1 AS \"integer1\",TE.INTEGER2 AS \"integer2\",TE.STRING1 AS \"string1\",TE.STRING2 AS \"string2\" FROM TEMPORAL_EXPRESSION_ASSOC TEA INNER JOIN TEMPORAL_EXPRESSION TE ON TEA.TO_TEMP_EXPR_ID = TE.TEMP_EXPR_ID", resultSetMapping="TemporalExpressionChildMapping")
@SqlResultSetMapping(name="TemporalExpressionChildMapping", entities={
@EntityResult(entityClass=TemporalExpressionChild.class, fields = {
@FieldResult(name="fromTempExprId", column="fromTempExprId")
,@FieldResult(name="exprAssocType", column="exprAssocType")
,@FieldResult(name="tempExprId", column="tempExprId")
,@FieldResult(name="tempExprTypeId", column="tempExprTypeId")
,@FieldResult(name="date1", column="date1")
,@FieldResult(name="date2", column="date2")
,@FieldResult(name="integer1", column="integer1")
,@FieldResult(name="integer2", column="integer2")
,@FieldResult(name="string1", column="string1")
,@FieldResult(name="string2", column="string2")
})})
@org.hibernate.annotations.Entity(mutable = false)
@org.hibernate.annotations.AccessType("field")
public class TemporalExpressionChild extends Entity {
static {
java.util.Map<String, String> fields = new java.util.HashMap<String, String>();
        fields.put("fromTempExprId", "TEA.FROM_TEMP_EXPR_ID");
        fields.put("exprAssocType", "TEA.EXPR_ASSOC_TYPE");
        fields.put("tempExprId", "TE.TEMP_EXPR_ID");
        fields.put("tempExprTypeId", "TE.TEMP_EXPR_TYPE_ID");
        fields.put("date1", "TE.DATE1");
        fields.put("date2", "TE.DATE2");
        fields.put("integer1", "TE.INTEGER1");
        fields.put("integer2", "TE.INTEGER2");
        fields.put("string1", "TE.STRING1");
        fields.put("string2", "TE.STRING2");
fieldMapColumns.put("TemporalExpressionChild", fields);
}
  public static enum Fields implements EntityFieldInterface<TemporalExpressionChild> {
    fromTempExprId("fromTempExprId"),
    exprAssocType("exprAssocType"),
    tempExprId("tempExprId"),
    tempExprTypeId("tempExprTypeId"),
    date1("date1"),
    date2("date2"),
    integer1("integer1"),
    integer2("integer2"),
    string1("string1"),
    string2("string2");
    private final String fieldName;
    private Fields(String name) { fieldName = name; }
    /** {@inheritDoc} */
    public String getName() { return fieldName; }
    /** {@inheritDoc} */
    public String asc() { return fieldName + " ASC"; }
    /** {@inheritDoc} */
    public String desc() { return fieldName + " DESC"; }
  }

    @Id
   private String fromTempExprId;
    
   private String exprAssocType;
    
   private String tempExprId;
    
   private String tempExprTypeId;
    
   private Timestamp date1;
    
   private Timestamp date2;
    
   private Long integer1;
    
   private Long integer2;
    
   private String string1;
    
   private String string2;

  /**
   * Default constructor.
   */
  public TemporalExpressionChild() {
      super();
      this.baseEntityName = "TemporalExpressionChild";
      this.isView = true;
      
      this.primaryKeyNames = new ArrayList<String>();
      this.primaryKeyNames.add("fromTempExprId");this.primaryKeyNames.add("tempExprId");
      this.allFieldsNames = new ArrayList<String>();
      this.allFieldsNames.add("fromTempExprId");this.allFieldsNames.add("exprAssocType");this.allFieldsNames.add("tempExprId");this.allFieldsNames.add("tempExprTypeId");this.allFieldsNames.add("date1");this.allFieldsNames.add("date2");this.allFieldsNames.add("integer1");this.allFieldsNames.add("integer2");this.allFieldsNames.add("string1");this.allFieldsNames.add("string2");
      this.nonPrimaryKeyNames = new ArrayList<String>();
      this.nonPrimaryKeyNames.addAll(allFieldsNames);
      this.nonPrimaryKeyNames.removeAll(primaryKeyNames);
  }

  /**
   * Constructor with a repository.
   * @param repository a <code>RepositoryInterface</code> value
   */
  public TemporalExpressionChild(RepositoryInterface repository) {
      this();
      initRepository(repository);
  }

    /**
     * This is a view-entity, so the setter methods will be private to this class and for use in its fromMap constructor only
     */
    /**
     * Auto generated value setter.
     * @param fromTempExprId the fromTempExprId to set
     */
    public void setFromTempExprId(String fromTempExprId) {
        this.fromTempExprId = fromTempExprId;
    }
    /**
     * Auto generated value setter.
     * @param exprAssocType the exprAssocType to set
     */
    public void setExprAssocType(String exprAssocType) {
        this.exprAssocType = exprAssocType;
    }
    /**
     * Auto generated value setter.
     * @param tempExprId the tempExprId to set
     */
    public void setTempExprId(String tempExprId) {
        this.tempExprId = tempExprId;
    }
    /**
     * Auto generated value setter.
     * @param tempExprTypeId the tempExprTypeId to set
     */
    public void setTempExprTypeId(String tempExprTypeId) {
        this.tempExprTypeId = tempExprTypeId;
    }
    /**
     * Auto generated value setter.
     * @param date1 the date1 to set
     */
    public void setDate1(Timestamp date1) {
        this.date1 = date1;
    }
    /**
     * Auto generated value setter.
     * @param date2 the date2 to set
     */
    public void setDate2(Timestamp date2) {
        this.date2 = date2;
    }
    /**
     * Auto generated value setter.
     * @param integer1 the integer1 to set
     */
    public void setInteger1(Long integer1) {
        this.integer1 = integer1;
    }
    /**
     * Auto generated value setter.
     * @param integer2 the integer2 to set
     */
    public void setInteger2(Long integer2) {
        this.integer2 = integer2;
    }
    /**
     * Auto generated value setter.
     * @param string1 the string1 to set
     */
    public void setString1(String string1) {
        this.string1 = string1;
    }
    /**
     * Auto generated value setter.
     * @param string2 the string2 to set
     */
    public void setString2(String string2) {
        this.string2 = string2;
    }

    /**
     * Auto generated value accessor.
     * @return <code>String</code>
     */
    public String getFromTempExprId() {
        return this.fromTempExprId;
    }
    /**
     * Auto generated value accessor.
     * @return <code>String</code>
     */
    public String getExprAssocType() {
        return this.exprAssocType;
    }
    /**
     * Auto generated value accessor.
     * @return <code>String</code>
     */
    public String getTempExprId() {
        return this.tempExprId;
    }
    /**
     * Auto generated value accessor.
     * @return <code>String</code>
     */
    public String getTempExprTypeId() {
        return this.tempExprTypeId;
    }
    /**
     * Auto generated value accessor.
     * @return <code>Timestamp</code>
     */
    public Timestamp getDate1() {
        return this.date1;
    }
    /**
     * Auto generated value accessor.
     * @return <code>Timestamp</code>
     */
    public Timestamp getDate2() {
        return this.date2;
    }
    /**
     * Auto generated value accessor.
     * @return <code>Long</code>
     */
    public Long getInteger1() {
        return this.integer1;
    }
    /**
     * Auto generated value accessor.
     * @return <code>Long</code>
     */
    public Long getInteger2() {
        return this.integer2;
    }
    /**
     * Auto generated value accessor.
     * @return <code>String</code>
     */
    public String getString1() {
        return this.string1;
    }
    /**
     * Auto generated value accessor.
     * @return <code>String</code>
     */
    public String getString2() {
        return this.string2;
    }




    /** {@inheritDoc} */
    @Override
    public void fromMap(Map<String, Object> mapValue) {
        preInit();
        setFromTempExprId((String) mapValue.get("fromTempExprId"));
        setExprAssocType((String) mapValue.get("exprAssocType"));
        setTempExprId((String) mapValue.get("tempExprId"));
        setTempExprTypeId((String) mapValue.get("tempExprTypeId"));
        setDate1((Timestamp) mapValue.get("date1"));
        setDate2((Timestamp) mapValue.get("date2"));
        setInteger1((Long) mapValue.get("integer1"));
        setInteger2((Long) mapValue.get("integer2"));
        setString1((String) mapValue.get("string1"));
        setString2((String) mapValue.get("string2"));
        postInit();
    }

    /** {@inheritDoc} */
    @Override
    public Map<String, Object> toMap() {
        Map<String, Object> mapValue = new FastMap<String, Object>();
        mapValue.put("fromTempExprId", getFromTempExprId());
        mapValue.put("exprAssocType", getExprAssocType());
        mapValue.put("tempExprId", getTempExprId());
        mapValue.put("tempExprTypeId", getTempExprTypeId());
        mapValue.put("date1", getDate1());
        mapValue.put("date2", getDate2());
        mapValue.put("integer1", getInteger1());
        mapValue.put("integer2", getInteger2());
        mapValue.put("string1", getString1());
        mapValue.put("string2", getString2());
        return mapValue;
    }


}
