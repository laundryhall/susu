package org.opentaps.base.entities;

/*
 * Copyright (c) Open Source Strategies, Inc.
 *
 * Opentaps is free software: you can redistribute it and/or modify it
 * under the terms of the GNU Affero General Public License as published
 * by the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Opentaps is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with Opentaps.  If not, see <http://www.gnu.org/licenses/>.
 */

// DO NOT EDIT THIS FILE!  THIS IS AUTO GENERATED AND WILL GET WRITTEN OVER PERIODICALLY WHEN THE DATA MODEL CHANGES
// EXTEND THIS CLASS INSTEAD.

import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;

import javolution.util.FastMap;

import org.opentaps.foundation.entity.Entity;
import org.opentaps.foundation.entity.EntityFieldInterface;
import org.opentaps.foundation.repository.RepositoryException;
import org.opentaps.foundation.repository.RepositoryInterface;
import javax.persistence.*;
import org.hibernate.search.annotations.*;
import java.lang.String;
import java.math.BigDecimal;
import java.sql.Timestamp;

/**
 * Auto generated base entity InventoryItemVariance.
 */
@javax.persistence.Entity
@Table(name="INVENTORY_ITEM_VARIANCE")
public class InventoryItemVariance extends Entity {
static {
java.util.Map<String, String> fields = new java.util.HashMap<String, String>();
        fields.put("inventoryItemId", "INVENTORY_ITEM_ID");
        fields.put("physicalInventoryId", "PHYSICAL_INVENTORY_ID");
        fields.put("varianceReasonId", "VARIANCE_REASON_ID");
        fields.put("availableToPromiseVar", "AVAILABLE_TO_PROMISE_VAR");
        fields.put("quantityOnHandVar", "QUANTITY_ON_HAND_VAR");
        fields.put("comments", "COMMENTS");
        fields.put("lastUpdatedStamp", "LAST_UPDATED_STAMP");
        fields.put("lastUpdatedTxStamp", "LAST_UPDATED_TX_STAMP");
        fields.put("createdStamp", "CREATED_STAMP");
        fields.put("createdTxStamp", "CREATED_TX_STAMP");
fieldMapColumns.put("InventoryItemVariance", fields);
}
  public static enum Fields implements EntityFieldInterface<InventoryItemVariance> {
    inventoryItemId("inventoryItemId"),
    physicalInventoryId("physicalInventoryId"),
    varianceReasonId("varianceReasonId"),
    availableToPromiseVar("availableToPromiseVar"),
    quantityOnHandVar("quantityOnHandVar"),
    comments("comments"),
    lastUpdatedStamp("lastUpdatedStamp"),
    lastUpdatedTxStamp("lastUpdatedTxStamp"),
    createdStamp("createdStamp"),
    createdTxStamp("createdTxStamp");
    private final String fieldName;
    private Fields(String name) { fieldName = name; }
    /** {@inheritDoc} */
    public String getName() { return fieldName; }
    /** {@inheritDoc} */
    public String asc() { return fieldName + " ASC"; }
    /** {@inheritDoc} */
    public String desc() { return fieldName + " DESC"; }
  }

   @EmbeddedId

   @FieldBridge(impl = org.opentaps.base.entities.bridge.InventoryItemVariancePkBridge.class)
     private InventoryItemVariancePk id = new InventoryItemVariancePk();
   
    /**
     * Auto generated Id accessor.
     * @return <code>InventoryItemVariancePk</code>
     */
      public InventoryItemVariancePk getId() {
         return id;
      }
    /**
     * Auto generated Id setter.
     * @param id a <code>InventoryItemVariancePk</code> value to set
    */   
      public void setId(InventoryItemVariancePk id) {
         this.id = id;
      }
   @Column(name="VARIANCE_REASON_ID")
   private String varianceReasonId;
   @Column(name="AVAILABLE_TO_PROMISE_VAR")
   private BigDecimal availableToPromiseVar;
   @Column(name="QUANTITY_ON_HAND_VAR")
   private BigDecimal quantityOnHandVar;
   @Column(name="COMMENTS")
   private String comments;
   @Column(name="LAST_UPDATED_STAMP")
   private Timestamp lastUpdatedStamp;
   @Column(name="LAST_UPDATED_TX_STAMP")
   private Timestamp lastUpdatedTxStamp;
   @Column(name="CREATED_STAMP")
   private Timestamp createdStamp;
   @Column(name="CREATED_TX_STAMP")
   private Timestamp createdTxStamp;
   @ManyToOne(cascade = {CascadeType.PERSIST, CascadeType.MERGE}, fetch=FetchType.LAZY)
   @JoinColumn(name="PHYSICAL_INVENTORY_ID", insertable=false, updatable=false)
   @org.hibernate.annotations.Generated(
      org.hibernate.annotations.GenerationTime.ALWAYS
   )
   
   private PhysicalInventory physicalInventory = null;
   @ManyToOne(cascade = {CascadeType.PERSIST, CascadeType.MERGE}, fetch=FetchType.LAZY)
   @JoinColumn(name="VARIANCE_REASON_ID", insertable=false, updatable=false)
   @org.hibernate.annotations.Generated(
      org.hibernate.annotations.GenerationTime.ALWAYS
   )
   
   private VarianceReason varianceReason = null;
   @ManyToOne(cascade = {CascadeType.PERSIST, CascadeType.MERGE}, fetch=FetchType.LAZY)
   @JoinColumn(name="INVENTORY_ITEM_ID", insertable=false, updatable=false)
   @org.hibernate.annotations.Generated(
      org.hibernate.annotations.GenerationTime.ALWAYS
   )
   
   private InventoryItem inventoryItem = null;
   private transient List<AcctgTrans> acctgTranses = null;
   private transient List<InventoryItemDetail> inventoryItemDetails = null;
   private transient List<InventoryItemTraceDetail> inventoryItemTraceDetails = null;

  /**
   * Default constructor.
   */
  public InventoryItemVariance() {
      super();
      this.baseEntityName = "InventoryItemVariance";
      this.isView = false;
      
      this.primaryKeyNames = new ArrayList<String>();
      this.primaryKeyNames.add("inventoryItemId");this.primaryKeyNames.add("physicalInventoryId");
      this.allFieldsNames = new ArrayList<String>();
      this.allFieldsNames.add("inventoryItemId");this.allFieldsNames.add("physicalInventoryId");this.allFieldsNames.add("varianceReasonId");this.allFieldsNames.add("availableToPromiseVar");this.allFieldsNames.add("quantityOnHandVar");this.allFieldsNames.add("comments");this.allFieldsNames.add("lastUpdatedStamp");this.allFieldsNames.add("lastUpdatedTxStamp");this.allFieldsNames.add("createdStamp");this.allFieldsNames.add("createdTxStamp");
      this.nonPrimaryKeyNames = new ArrayList<String>();
      this.nonPrimaryKeyNames.addAll(allFieldsNames);
      this.nonPrimaryKeyNames.removeAll(primaryKeyNames);
  }

  /**
   * Constructor with a repository.
   * @param repository a <code>RepositoryInterface</code> value
   */
  public InventoryItemVariance(RepositoryInterface repository) {
      this();
      initRepository(repository);
  }

    /**
     * Auto generated value setter.
     * @param inventoryItemId the inventoryItemId to set
     */
    public void setInventoryItemId(String inventoryItemId) {
        id.setInventoryItemId(inventoryItemId);
    }
    /**
     * Auto generated value setter.
     * @param physicalInventoryId the physicalInventoryId to set
     */
    public void setPhysicalInventoryId(String physicalInventoryId) {
        id.setPhysicalInventoryId(physicalInventoryId);
    }
    /**
     * Auto generated value setter.
     * @param varianceReasonId the varianceReasonId to set
     */
    public void setVarianceReasonId(String varianceReasonId) {
        this.varianceReasonId = varianceReasonId;
    }
    /**
     * Auto generated value setter.
     * @param availableToPromiseVar the availableToPromiseVar to set
     */
    public void setAvailableToPromiseVar(BigDecimal availableToPromiseVar) {
        this.availableToPromiseVar = availableToPromiseVar;
    }
    /**
     * Auto generated value setter.
     * @param quantityOnHandVar the quantityOnHandVar to set
     */
    public void setQuantityOnHandVar(BigDecimal quantityOnHandVar) {
        this.quantityOnHandVar = quantityOnHandVar;
    }
    /**
     * Auto generated value setter.
     * @param comments the comments to set
     */
    public void setComments(String comments) {
        this.comments = comments;
    }
    /**
     * Auto generated value setter.
     * @param lastUpdatedStamp the lastUpdatedStamp to set
     */
    public void setLastUpdatedStamp(Timestamp lastUpdatedStamp) {
        this.lastUpdatedStamp = lastUpdatedStamp;
    }
    /**
     * Auto generated value setter.
     * @param lastUpdatedTxStamp the lastUpdatedTxStamp to set
     */
    public void setLastUpdatedTxStamp(Timestamp lastUpdatedTxStamp) {
        this.lastUpdatedTxStamp = lastUpdatedTxStamp;
    }
    /**
     * Auto generated value setter.
     * @param createdStamp the createdStamp to set
     */
    public void setCreatedStamp(Timestamp createdStamp) {
        this.createdStamp = createdStamp;
    }
    /**
     * Auto generated value setter.
     * @param createdTxStamp the createdTxStamp to set
     */
    public void setCreatedTxStamp(Timestamp createdTxStamp) {
        this.createdTxStamp = createdTxStamp;
    }

    /**
     * Auto generated value accessor.
     * @return <code>String</code>
     */
    public String getInventoryItemId() {
        return this.id.getInventoryItemId();
    }
    /**
     * Auto generated value accessor.
     * @return <code>String</code>
     */
    public String getPhysicalInventoryId() {
        return this.id.getPhysicalInventoryId();
    }
    /**
     * Auto generated value accessor.
     * @return <code>String</code>
     */
    public String getVarianceReasonId() {
        return this.varianceReasonId;
    }
    /**
     * Auto generated value accessor.
     * @return <code>BigDecimal</code>
     */
    public BigDecimal getAvailableToPromiseVar() {
        return this.availableToPromiseVar;
    }
    /**
     * Auto generated value accessor.
     * @return <code>BigDecimal</code>
     */
    public BigDecimal getQuantityOnHandVar() {
        return this.quantityOnHandVar;
    }
    /**
     * Auto generated value accessor.
     * @return <code>String</code>
     */
    public String getComments() {
        return this.comments;
    }
    /**
     * Auto generated value accessor.
     * @return <code>Timestamp</code>
     */
    public Timestamp getLastUpdatedStamp() {
        return this.lastUpdatedStamp;
    }
    /**
     * Auto generated value accessor.
     * @return <code>Timestamp</code>
     */
    public Timestamp getLastUpdatedTxStamp() {
        return this.lastUpdatedTxStamp;
    }
    /**
     * Auto generated value accessor.
     * @return <code>Timestamp</code>
     */
    public Timestamp getCreatedStamp() {
        return this.createdStamp;
    }
    /**
     * Auto generated value accessor.
     * @return <code>Timestamp</code>
     */
    public Timestamp getCreatedTxStamp() {
        return this.createdTxStamp;
    }

    /**
     * Auto generated method that gets the related <code>PhysicalInventory</code> by the relation named <code>PhysicalInventory</code>.
     * @return the <code>PhysicalInventory</code>
     * @throws RepositoryException if an error occurs
     */
    public PhysicalInventory getPhysicalInventory() throws RepositoryException {
        if (this.physicalInventory == null) {
            this.physicalInventory = getRelatedOne(PhysicalInventory.class, "PhysicalInventory");
        }
        return this.physicalInventory;
    }
    /**
     * Auto generated method that gets the related <code>VarianceReason</code> by the relation named <code>VarianceReason</code>.
     * @return the <code>VarianceReason</code>
     * @throws RepositoryException if an error occurs
     */
    public VarianceReason getVarianceReason() throws RepositoryException {
        if (this.varianceReason == null) {
            this.varianceReason = getRelatedOne(VarianceReason.class, "VarianceReason");
        }
        return this.varianceReason;
    }
    /**
     * Auto generated method that gets the related <code>InventoryItem</code> by the relation named <code>InventoryItem</code>.
     * @return the <code>InventoryItem</code>
     * @throws RepositoryException if an error occurs
     */
    public InventoryItem getInventoryItem() throws RepositoryException {
        if (this.inventoryItem == null) {
            this.inventoryItem = getRelatedOne(InventoryItem.class, "InventoryItem");
        }
        return this.inventoryItem;
    }
    /**
     * Auto generated method that gets the related <code>AcctgTrans</code> by the relation named <code>AcctgTrans</code>.
     * @return the list of <code>AcctgTrans</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends AcctgTrans> getAcctgTranses() throws RepositoryException {
        if (this.acctgTranses == null) {
            this.acctgTranses = getRelated(AcctgTrans.class, "AcctgTrans");
        }
        return this.acctgTranses;
    }
    /**
     * Auto generated method that gets the related <code>InventoryItemDetail</code> by the relation named <code>InventoryItemDetail</code>.
     * @return the list of <code>InventoryItemDetail</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends InventoryItemDetail> getInventoryItemDetails() throws RepositoryException {
        if (this.inventoryItemDetails == null) {
            this.inventoryItemDetails = getRelated(InventoryItemDetail.class, "InventoryItemDetail");
        }
        return this.inventoryItemDetails;
    }
    /**
     * Auto generated method that gets the related <code>InventoryItemTraceDetail</code> by the relation named <code>InventoryItemTraceDetail</code>.
     * @return the list of <code>InventoryItemTraceDetail</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends InventoryItemTraceDetail> getInventoryItemTraceDetails() throws RepositoryException {
        if (this.inventoryItemTraceDetails == null) {
            this.inventoryItemTraceDetails = getRelated(InventoryItemTraceDetail.class, "InventoryItemTraceDetail");
        }
        return this.inventoryItemTraceDetails;
    }

    /**
     * Auto generated value setter.
     * @param physicalInventory the physicalInventory to set
    */
    public void setPhysicalInventory(PhysicalInventory physicalInventory) {
        this.physicalInventory = physicalInventory;
    }
    /**
     * Auto generated value setter.
     * @param varianceReason the varianceReason to set
    */
    public void setVarianceReason(VarianceReason varianceReason) {
        this.varianceReason = varianceReason;
    }
    /**
     * Auto generated value setter.
     * @param inventoryItem the inventoryItem to set
    */
    public void setInventoryItem(InventoryItem inventoryItem) {
        this.inventoryItem = inventoryItem;
    }
    /**
     * Auto generated value setter.
     * @param acctgTranses the acctgTranses to set
    */
    public void setAcctgTranses(List<AcctgTrans> acctgTranses) {
        this.acctgTranses = acctgTranses;
    }
    /**
     * Auto generated value setter.
     * @param inventoryItemDetails the inventoryItemDetails to set
    */
    public void setInventoryItemDetails(List<InventoryItemDetail> inventoryItemDetails) {
        this.inventoryItemDetails = inventoryItemDetails;
    }
    /**
     * Auto generated value setter.
     * @param inventoryItemTraceDetails the inventoryItemTraceDetails to set
    */
    public void setInventoryItemTraceDetails(List<InventoryItemTraceDetail> inventoryItemTraceDetails) {
        this.inventoryItemTraceDetails = inventoryItemTraceDetails;
    }


    /** {@inheritDoc} */
    @Override
    public void fromMap(Map<String, Object> mapValue) {
        preInit();
        setInventoryItemId((String) mapValue.get("inventoryItemId"));
        setPhysicalInventoryId((String) mapValue.get("physicalInventoryId"));
        setVarianceReasonId((String) mapValue.get("varianceReasonId"));
        setAvailableToPromiseVar(convertToBigDecimal(mapValue.get("availableToPromiseVar")));
        setQuantityOnHandVar(convertToBigDecimal(mapValue.get("quantityOnHandVar")));
        setComments((String) mapValue.get("comments"));
        setLastUpdatedStamp((Timestamp) mapValue.get("lastUpdatedStamp"));
        setLastUpdatedTxStamp((Timestamp) mapValue.get("lastUpdatedTxStamp"));
        setCreatedStamp((Timestamp) mapValue.get("createdStamp"));
        setCreatedTxStamp((Timestamp) mapValue.get("createdTxStamp"));
        postInit();
    }

    /** {@inheritDoc} */
    @Override
    public Map<String, Object> toMap() {
        Map<String, Object> mapValue = new FastMap<String, Object>();
        mapValue.put("inventoryItemId", getInventoryItemId());
        mapValue.put("physicalInventoryId", getPhysicalInventoryId());
        mapValue.put("varianceReasonId", getVarianceReasonId());
        mapValue.put("availableToPromiseVar", getAvailableToPromiseVar());
        mapValue.put("quantityOnHandVar", getQuantityOnHandVar());
        mapValue.put("comments", getComments());
        mapValue.put("lastUpdatedStamp", getLastUpdatedStamp());
        mapValue.put("lastUpdatedTxStamp", getLastUpdatedTxStamp());
        mapValue.put("createdStamp", getCreatedStamp());
        mapValue.put("createdTxStamp", getCreatedTxStamp());
        return mapValue;
    }


}
