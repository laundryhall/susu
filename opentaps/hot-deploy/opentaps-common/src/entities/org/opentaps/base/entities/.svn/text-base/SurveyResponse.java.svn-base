package org.opentaps.base.entities;

/*
 * Copyright (c) Open Source Strategies, Inc.
 *
 * Opentaps is free software: you can redistribute it and/or modify it
 * under the terms of the GNU Affero General Public License as published
 * by the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Opentaps is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with Opentaps.  If not, see <http://www.gnu.org/licenses/>.
 */

// DO NOT EDIT THIS FILE!  THIS IS AUTO GENERATED AND WILL GET WRITTEN OVER PERIODICALLY WHEN THE DATA MODEL CHANGES
// EXTEND THIS CLASS INSTEAD.

import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;

import javolution.util.FastMap;

import org.opentaps.foundation.entity.Entity;
import org.opentaps.foundation.entity.EntityFieldInterface;
import org.opentaps.foundation.repository.RepositoryException;
import org.opentaps.foundation.repository.RepositoryInterface;
import javax.persistence.*;
import org.hibernate.search.annotations.*;
import java.lang.String;
import java.sql.Timestamp;

/**
 * Auto generated base entity SurveyResponse.
 */
@javax.persistence.Entity
@Table(name="SURVEY_RESPONSE")
public class SurveyResponse extends Entity {
static {
java.util.Map<String, String> fields = new java.util.HashMap<String, String>();
        fields.put("surveyResponseId", "SURVEY_RESPONSE_ID");
        fields.put("surveyId", "SURVEY_ID");
        fields.put("partyId", "PARTY_ID");
        fields.put("responseDate", "RESPONSE_DATE");
        fields.put("lastModifiedDate", "LAST_MODIFIED_DATE");
        fields.put("referenceId", "REFERENCE_ID");
        fields.put("generalFeedback", "GENERAL_FEEDBACK");
        fields.put("orderId", "ORDER_ID");
        fields.put("orderItemSeqId", "ORDER_ITEM_SEQ_ID");
        fields.put("statusId", "STATUS_ID");
        fields.put("lastUpdatedStamp", "LAST_UPDATED_STAMP");
        fields.put("lastUpdatedTxStamp", "LAST_UPDATED_TX_STAMP");
        fields.put("createdStamp", "CREATED_STAMP");
        fields.put("createdTxStamp", "CREATED_TX_STAMP");
fieldMapColumns.put("SurveyResponse", fields);
}
  public static enum Fields implements EntityFieldInterface<SurveyResponse> {
    surveyResponseId("surveyResponseId"),
    surveyId("surveyId"),
    partyId("partyId"),
    responseDate("responseDate"),
    lastModifiedDate("lastModifiedDate"),
    referenceId("referenceId"),
    generalFeedback("generalFeedback"),
    orderId("orderId"),
    orderItemSeqId("orderItemSeqId"),
    statusId("statusId"),
    lastUpdatedStamp("lastUpdatedStamp"),
    lastUpdatedTxStamp("lastUpdatedTxStamp"),
    createdStamp("createdStamp"),
    createdTxStamp("createdTxStamp");
    private final String fieldName;
    private Fields(String name) { fieldName = name; }
    /** {@inheritDoc} */
    public String getName() { return fieldName; }
    /** {@inheritDoc} */
    public String asc() { return fieldName + " ASC"; }
    /** {@inheritDoc} */
    public String desc() { return fieldName + " DESC"; }
  }

   @org.hibernate.annotations.GenericGenerator(name="SurveyResponse_GEN",  strategy="org.opentaps.foundation.entity.hibernate.OpentapsIdentifierGenerator")
   @GeneratedValue(generator="SurveyResponse_GEN")
   @Id
   @Column(name="SURVEY_RESPONSE_ID")
   private String surveyResponseId;
   @Column(name="SURVEY_ID")
   private String surveyId;
   @Column(name="PARTY_ID")
   private String partyId;
   @Column(name="RESPONSE_DATE")
   private Timestamp responseDate;
   @Column(name="LAST_MODIFIED_DATE")
   private Timestamp lastModifiedDate;
   @Column(name="REFERENCE_ID")
   private String referenceId;
   @Column(name="GENERAL_FEEDBACK")
   private String generalFeedback;
   @Column(name="ORDER_ID")
   private String orderId;
   @Column(name="ORDER_ITEM_SEQ_ID")
   private String orderItemSeqId;
   @Column(name="STATUS_ID")
   private String statusId;
   @Column(name="LAST_UPDATED_STAMP")
   private Timestamp lastUpdatedStamp;
   @Column(name="LAST_UPDATED_TX_STAMP")
   private Timestamp lastUpdatedTxStamp;
   @Column(name="CREATED_STAMP")
   private Timestamp createdStamp;
   @Column(name="CREATED_TX_STAMP")
   private Timestamp createdTxStamp;
   @ManyToOne(cascade = {CascadeType.PERSIST, CascadeType.MERGE}, fetch=FetchType.LAZY)
   @JoinColumn(name="PARTY_ID", insertable=false, updatable=false)
   @org.hibernate.annotations.Generated(
      org.hibernate.annotations.GenerationTime.ALWAYS
   )
   
   private Party party = null;
   private transient OrderItem orderItem = null;
   @ManyToOne(cascade = {CascadeType.PERSIST, CascadeType.MERGE}, fetch=FetchType.LAZY)
   @JoinColumn(name="ORDER_ID", insertable=false, updatable=false)
   @org.hibernate.annotations.Generated(
      org.hibernate.annotations.GenerationTime.ALWAYS
   )
   
   private OrderHeader orderHeader = null;
   @ManyToOne(cascade = {CascadeType.PERSIST, CascadeType.MERGE}, fetch=FetchType.LAZY)
   @JoinColumn(name="SURVEY_ID", insertable=false, updatable=false)
   @org.hibernate.annotations.Generated(
      org.hibernate.annotations.GenerationTime.ALWAYS
   )
   
   private Survey survey = null;
   @ManyToOne(cascade = {CascadeType.PERSIST, CascadeType.MERGE}, fetch=FetchType.LAZY)
   @JoinColumn(name="STATUS_ID", insertable=false, updatable=false)
   @org.hibernate.annotations.Generated(
      org.hibernate.annotations.GenerationTime.ALWAYS
   )
   
   private StatusItem statusItem = null;
   @OneToMany(fetch=FetchType.LAZY, mappedBy="surveyResponse", cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REMOVE})
   @JoinColumn(name="SURVEY_RESPONSE_ID")
   
   private List<DataResource> dataResources = null;
   @OneToMany(fetch=FetchType.LAZY, mappedBy="surveyResponse", cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REMOVE})
   @JoinColumn(name="SURVEY_RESPONSE_ID")
   
   private List<GiftCardFulfillment> giftCardFulfillments = null;
   @OneToMany(fetch=FetchType.LAZY, mappedBy="surveyResponse", cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REMOVE})
   @JoinColumn(name="SURVEY_RESPONSE_ID")
   
   private List<OldValueLinkFulfillment> oldValueLinkFulfillments = null;
   @OneToMany(fetch=FetchType.LAZY, mappedBy="surveyResponse", cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REMOVE})
   @JoinColumn(name="SURVEY_RESPONSE_ID")
   
   private List<ShoppingListItemSurvey> shoppingListItemSurveys = null;
   @OneToMany(fetch=FetchType.LAZY, mappedBy="surveyResponse", cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REMOVE})
   @JoinColumn(name="SURVEY_RESPONSE_ID")
   
   private List<SurveyResponseAnswer> surveyResponseAnswers = null;

  /**
   * Default constructor.
   */
  public SurveyResponse() {
      super();
      this.baseEntityName = "SurveyResponse";
      this.isView = false;
      
      this.primaryKeyNames = new ArrayList<String>();
      this.primaryKeyNames.add("surveyResponseId");
      this.allFieldsNames = new ArrayList<String>();
      this.allFieldsNames.add("surveyResponseId");this.allFieldsNames.add("surveyId");this.allFieldsNames.add("partyId");this.allFieldsNames.add("responseDate");this.allFieldsNames.add("lastModifiedDate");this.allFieldsNames.add("referenceId");this.allFieldsNames.add("generalFeedback");this.allFieldsNames.add("orderId");this.allFieldsNames.add("orderItemSeqId");this.allFieldsNames.add("statusId");this.allFieldsNames.add("lastUpdatedStamp");this.allFieldsNames.add("lastUpdatedTxStamp");this.allFieldsNames.add("createdStamp");this.allFieldsNames.add("createdTxStamp");
      this.nonPrimaryKeyNames = new ArrayList<String>();
      this.nonPrimaryKeyNames.addAll(allFieldsNames);
      this.nonPrimaryKeyNames.removeAll(primaryKeyNames);
  }

  /**
   * Constructor with a repository.
   * @param repository a <code>RepositoryInterface</code> value
   */
  public SurveyResponse(RepositoryInterface repository) {
      this();
      initRepository(repository);
  }

    /**
     * Auto generated value setter.
     * @param surveyResponseId the surveyResponseId to set
     */
    public void setSurveyResponseId(String surveyResponseId) {
        this.surveyResponseId = surveyResponseId;
    }
    /**
     * Auto generated value setter.
     * @param surveyId the surveyId to set
     */
    public void setSurveyId(String surveyId) {
        this.surveyId = surveyId;
    }
    /**
     * Auto generated value setter.
     * @param partyId the partyId to set
     */
    public void setPartyId(String partyId) {
        this.partyId = partyId;
    }
    /**
     * Auto generated value setter.
     * @param responseDate the responseDate to set
     */
    public void setResponseDate(Timestamp responseDate) {
        this.responseDate = responseDate;
    }
    /**
     * Auto generated value setter.
     * @param lastModifiedDate the lastModifiedDate to set
     */
    public void setLastModifiedDate(Timestamp lastModifiedDate) {
        this.lastModifiedDate = lastModifiedDate;
    }
    /**
     * Auto generated value setter.
     * @param referenceId the referenceId to set
     */
    public void setReferenceId(String referenceId) {
        this.referenceId = referenceId;
    }
    /**
     * Auto generated value setter.
     * @param generalFeedback the generalFeedback to set
     */
    public void setGeneralFeedback(String generalFeedback) {
        this.generalFeedback = generalFeedback;
    }
    /**
     * Auto generated value setter.
     * @param orderId the orderId to set
     */
    public void setOrderId(String orderId) {
        this.orderId = orderId;
    }
    /**
     * Auto generated value setter.
     * @param orderItemSeqId the orderItemSeqId to set
     */
    public void setOrderItemSeqId(String orderItemSeqId) {
        this.orderItemSeqId = orderItemSeqId;
    }
    /**
     * Auto generated value setter.
     * @param statusId the statusId to set
     */
    public void setStatusId(String statusId) {
        this.statusId = statusId;
    }
    /**
     * Auto generated value setter.
     * @param lastUpdatedStamp the lastUpdatedStamp to set
     */
    public void setLastUpdatedStamp(Timestamp lastUpdatedStamp) {
        this.lastUpdatedStamp = lastUpdatedStamp;
    }
    /**
     * Auto generated value setter.
     * @param lastUpdatedTxStamp the lastUpdatedTxStamp to set
     */
    public void setLastUpdatedTxStamp(Timestamp lastUpdatedTxStamp) {
        this.lastUpdatedTxStamp = lastUpdatedTxStamp;
    }
    /**
     * Auto generated value setter.
     * @param createdStamp the createdStamp to set
     */
    public void setCreatedStamp(Timestamp createdStamp) {
        this.createdStamp = createdStamp;
    }
    /**
     * Auto generated value setter.
     * @param createdTxStamp the createdTxStamp to set
     */
    public void setCreatedTxStamp(Timestamp createdTxStamp) {
        this.createdTxStamp = createdTxStamp;
    }

    /**
     * Auto generated value accessor.
     * @return <code>String</code>
     */
    public String getSurveyResponseId() {
        return this.surveyResponseId;
    }
    /**
     * Auto generated value accessor.
     * @return <code>String</code>
     */
    public String getSurveyId() {
        return this.surveyId;
    }
    /**
     * Auto generated value accessor.
     * @return <code>String</code>
     */
    public String getPartyId() {
        return this.partyId;
    }
    /**
     * Auto generated value accessor.
     * @return <code>Timestamp</code>
     */
    public Timestamp getResponseDate() {
        return this.responseDate;
    }
    /**
     * Auto generated value accessor.
     * @return <code>Timestamp</code>
     */
    public Timestamp getLastModifiedDate() {
        return this.lastModifiedDate;
    }
    /**
     * Auto generated value accessor.
     * @return <code>String</code>
     */
    public String getReferenceId() {
        return this.referenceId;
    }
    /**
     * Auto generated value accessor.
     * @return <code>String</code>
     */
    public String getGeneralFeedback() {
        return this.generalFeedback;
    }
    /**
     * Auto generated value accessor.
     * @return <code>String</code>
     */
    public String getOrderId() {
        return this.orderId;
    }
    /**
     * Auto generated value accessor.
     * @return <code>String</code>
     */
    public String getOrderItemSeqId() {
        return this.orderItemSeqId;
    }
    /**
     * Auto generated value accessor.
     * @return <code>String</code>
     */
    public String getStatusId() {
        return this.statusId;
    }
    /**
     * Auto generated value accessor.
     * @return <code>Timestamp</code>
     */
    public Timestamp getLastUpdatedStamp() {
        return this.lastUpdatedStamp;
    }
    /**
     * Auto generated value accessor.
     * @return <code>Timestamp</code>
     */
    public Timestamp getLastUpdatedTxStamp() {
        return this.lastUpdatedTxStamp;
    }
    /**
     * Auto generated value accessor.
     * @return <code>Timestamp</code>
     */
    public Timestamp getCreatedStamp() {
        return this.createdStamp;
    }
    /**
     * Auto generated value accessor.
     * @return <code>Timestamp</code>
     */
    public Timestamp getCreatedTxStamp() {
        return this.createdTxStamp;
    }

    /**
     * Auto generated method that gets the related <code>Party</code> by the relation named <code>Party</code>.
     * @return the <code>Party</code>
     * @throws RepositoryException if an error occurs
     */
    public Party getParty() throws RepositoryException {
        if (this.party == null) {
            this.party = getRelatedOne(Party.class, "Party");
        }
        return this.party;
    }
    /**
     * Auto generated method that gets the related <code>OrderItem</code> by the relation named <code>OrderItem</code>.
     * @return the <code>OrderItem</code>
     * @throws RepositoryException if an error occurs
     */
    public OrderItem getOrderItem() throws RepositoryException {
        if (this.orderItem == null) {
            this.orderItem = getRelatedOne(OrderItem.class, "OrderItem");
        }
        return this.orderItem;
    }
    /**
     * Auto generated method that gets the related <code>OrderHeader</code> by the relation named <code>OrderHeader</code>.
     * @return the <code>OrderHeader</code>
     * @throws RepositoryException if an error occurs
     */
    public OrderHeader getOrderHeader() throws RepositoryException {
        if (this.orderHeader == null) {
            this.orderHeader = getRelatedOne(OrderHeader.class, "OrderHeader");
        }
        return this.orderHeader;
    }
    /**
     * Auto generated method that gets the related <code>Survey</code> by the relation named <code>Survey</code>.
     * @return the <code>Survey</code>
     * @throws RepositoryException if an error occurs
     */
    public Survey getSurvey() throws RepositoryException {
        if (this.survey == null) {
            this.survey = getRelatedOne(Survey.class, "Survey");
        }
        return this.survey;
    }
    /**
     * Auto generated method that gets the related <code>StatusItem</code> by the relation named <code>StatusItem</code>.
     * @return the <code>StatusItem</code>
     * @throws RepositoryException if an error occurs
     */
    public StatusItem getStatusItem() throws RepositoryException {
        if (this.statusItem == null) {
            this.statusItem = getRelatedOne(StatusItem.class, "StatusItem");
        }
        return this.statusItem;
    }
    /**
     * Auto generated method that gets the related <code>DataResource</code> by the relation named <code>DataResource</code>.
     * @return the list of <code>DataResource</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends DataResource> getDataResources() throws RepositoryException {
        if (this.dataResources == null) {
            this.dataResources = getRelated(DataResource.class, "DataResource");
        }
        return this.dataResources;
    }
    /**
     * Auto generated method that gets the related <code>GiftCardFulfillment</code> by the relation named <code>GiftCardFulfillment</code>.
     * @return the list of <code>GiftCardFulfillment</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends GiftCardFulfillment> getGiftCardFulfillments() throws RepositoryException {
        if (this.giftCardFulfillments == null) {
            this.giftCardFulfillments = getRelated(GiftCardFulfillment.class, "GiftCardFulfillment");
        }
        return this.giftCardFulfillments;
    }
    /**
     * Auto generated method that gets the related <code>OldValueLinkFulfillment</code> by the relation named <code>OldValueLinkFulfillment</code>.
     * @return the list of <code>OldValueLinkFulfillment</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends OldValueLinkFulfillment> getOldValueLinkFulfillments() throws RepositoryException {
        if (this.oldValueLinkFulfillments == null) {
            this.oldValueLinkFulfillments = getRelated(OldValueLinkFulfillment.class, "OldValueLinkFulfillment");
        }
        return this.oldValueLinkFulfillments;
    }
    /**
     * Auto generated method that gets the related <code>ShoppingListItemSurvey</code> by the relation named <code>ShoppingListItemSurvey</code>.
     * @return the list of <code>ShoppingListItemSurvey</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends ShoppingListItemSurvey> getShoppingListItemSurveys() throws RepositoryException {
        if (this.shoppingListItemSurveys == null) {
            this.shoppingListItemSurveys = getRelated(ShoppingListItemSurvey.class, "ShoppingListItemSurvey");
        }
        return this.shoppingListItemSurveys;
    }
    /**
     * Auto generated method that gets the related <code>SurveyResponseAnswer</code> by the relation named <code>SurveyResponseAnswer</code>.
     * @return the list of <code>SurveyResponseAnswer</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends SurveyResponseAnswer> getSurveyResponseAnswers() throws RepositoryException {
        if (this.surveyResponseAnswers == null) {
            this.surveyResponseAnswers = getRelated(SurveyResponseAnswer.class, "SurveyResponseAnswer");
        }
        return this.surveyResponseAnswers;
    }

    /**
     * Auto generated value setter.
     * @param party the party to set
    */
    public void setParty(Party party) {
        this.party = party;
    }
    /**
     * Auto generated value setter.
     * @param orderItem the orderItem to set
    */
    public void setOrderItem(OrderItem orderItem) {
        this.orderItem = orderItem;
    }
    /**
     * Auto generated value setter.
     * @param orderHeader the orderHeader to set
    */
    public void setOrderHeader(OrderHeader orderHeader) {
        this.orderHeader = orderHeader;
    }
    /**
     * Auto generated value setter.
     * @param survey the survey to set
    */
    public void setSurvey(Survey survey) {
        this.survey = survey;
    }
    /**
     * Auto generated value setter.
     * @param statusItem the statusItem to set
    */
    public void setStatusItem(StatusItem statusItem) {
        this.statusItem = statusItem;
    }
    /**
     * Auto generated value setter.
     * @param dataResources the dataResources to set
    */
    public void setDataResources(List<DataResource> dataResources) {
        this.dataResources = dataResources;
    }
    /**
     * Auto generated value setter.
     * @param giftCardFulfillments the giftCardFulfillments to set
    */
    public void setGiftCardFulfillments(List<GiftCardFulfillment> giftCardFulfillments) {
        this.giftCardFulfillments = giftCardFulfillments;
    }
    /**
     * Auto generated value setter.
     * @param oldValueLinkFulfillments the oldValueLinkFulfillments to set
    */
    public void setOldValueLinkFulfillments(List<OldValueLinkFulfillment> oldValueLinkFulfillments) {
        this.oldValueLinkFulfillments = oldValueLinkFulfillments;
    }
    /**
     * Auto generated value setter.
     * @param shoppingListItemSurveys the shoppingListItemSurveys to set
    */
    public void setShoppingListItemSurveys(List<ShoppingListItemSurvey> shoppingListItemSurveys) {
        this.shoppingListItemSurveys = shoppingListItemSurveys;
    }
    /**
     * Auto generated value setter.
     * @param surveyResponseAnswers the surveyResponseAnswers to set
    */
    public void setSurveyResponseAnswers(List<SurveyResponseAnswer> surveyResponseAnswers) {
        this.surveyResponseAnswers = surveyResponseAnswers;
    }

    /**
     * Auto generated method that add item to collection.
     */
    public void addShoppingListItemSurvey(ShoppingListItemSurvey shoppingListItemSurvey) {
        if (this.shoppingListItemSurveys == null) {
            this.shoppingListItemSurveys = new ArrayList<ShoppingListItemSurvey>();
        }
        this.shoppingListItemSurveys.add(shoppingListItemSurvey);
    }
    /**
     * Auto generated method that remove item from collection.
     */
    public void removeShoppingListItemSurvey(ShoppingListItemSurvey shoppingListItemSurvey) {
        if (this.shoppingListItemSurveys == null) {
            return;
        }
        this.shoppingListItemSurveys.remove(shoppingListItemSurvey);
    }
    /**
     * Auto generated method that clear items from collection.
     */
    public void clearShoppingListItemSurvey() {
        if (this.shoppingListItemSurveys == null) {
            return;
        }
        this.shoppingListItemSurveys.clear();
    }
    /**
     * Auto generated method that add item to collection.
     */
    public void addSurveyResponseAnswer(SurveyResponseAnswer surveyResponseAnswer) {
        if (this.surveyResponseAnswers == null) {
            this.surveyResponseAnswers = new ArrayList<SurveyResponseAnswer>();
        }
        this.surveyResponseAnswers.add(surveyResponseAnswer);
    }
    /**
     * Auto generated method that remove item from collection.
     */
    public void removeSurveyResponseAnswer(SurveyResponseAnswer surveyResponseAnswer) {
        if (this.surveyResponseAnswers == null) {
            return;
        }
        this.surveyResponseAnswers.remove(surveyResponseAnswer);
    }
    /**
     * Auto generated method that clear items from collection.
     */
    public void clearSurveyResponseAnswer() {
        if (this.surveyResponseAnswers == null) {
            return;
        }
        this.surveyResponseAnswers.clear();
    }

    /** {@inheritDoc} */
    @Override
    public void fromMap(Map<String, Object> mapValue) {
        preInit();
        setSurveyResponseId((String) mapValue.get("surveyResponseId"));
        setSurveyId((String) mapValue.get("surveyId"));
        setPartyId((String) mapValue.get("partyId"));
        setResponseDate((Timestamp) mapValue.get("responseDate"));
        setLastModifiedDate((Timestamp) mapValue.get("lastModifiedDate"));
        setReferenceId((String) mapValue.get("referenceId"));
        setGeneralFeedback((String) mapValue.get("generalFeedback"));
        setOrderId((String) mapValue.get("orderId"));
        setOrderItemSeqId((String) mapValue.get("orderItemSeqId"));
        setStatusId((String) mapValue.get("statusId"));
        setLastUpdatedStamp((Timestamp) mapValue.get("lastUpdatedStamp"));
        setLastUpdatedTxStamp((Timestamp) mapValue.get("lastUpdatedTxStamp"));
        setCreatedStamp((Timestamp) mapValue.get("createdStamp"));
        setCreatedTxStamp((Timestamp) mapValue.get("createdTxStamp"));
        postInit();
    }

    /** {@inheritDoc} */
    @Override
    public Map<String, Object> toMap() {
        Map<String, Object> mapValue = new FastMap<String, Object>();
        mapValue.put("surveyResponseId", getSurveyResponseId());
        mapValue.put("surveyId", getSurveyId());
        mapValue.put("partyId", getPartyId());
        mapValue.put("responseDate", getResponseDate());
        mapValue.put("lastModifiedDate", getLastModifiedDate());
        mapValue.put("referenceId", getReferenceId());
        mapValue.put("generalFeedback", getGeneralFeedback());
        mapValue.put("orderId", getOrderId());
        mapValue.put("orderItemSeqId", getOrderItemSeqId());
        mapValue.put("statusId", getStatusId());
        mapValue.put("lastUpdatedStamp", getLastUpdatedStamp());
        mapValue.put("lastUpdatedTxStamp", getLastUpdatedTxStamp());
        mapValue.put("createdStamp", getCreatedStamp());
        mapValue.put("createdTxStamp", getCreatedTxStamp());
        return mapValue;
    }


}
