package org.opentaps.base.services;

/*
 * Copyright (c) Open Source Strategies, Inc.
 *
 * Opentaps is free software: you can redistribute it and/or modify it
 * under the terms of the GNU Affero General Public License as published
 * by the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Opentaps is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with Opentaps.  If not, see <http://www.gnu.org/licenses/>.
 */

// DO NOT EDIT THIS FILE!  THIS IS AUTO GENERATED AND WILL GET WRITTEN OVER PERIODICALLY WHEN THE SERVICE MODEL CHANGES
// EXTEND THIS CLASS INSTEAD.

import org.opentaps.foundation.service.ServiceWrapper;

import java.sql.Timestamp;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import java.util.TimeZone;
import javolution.util.FastMap;
import javolution.util.FastSet;
import org.ofbiz.entity.GenericValue;
import org.opentaps.foundation.infrastructure.User;

/**
 * Remotely Pull And Report Entity Sync Data.
 * Auto generated base service entity remotePullAndReportEntitySyncDataRmi.
 *
 * Engine: rmi
 * Location: entity-sync-rmi
 * Invoke: pullAndReportEntitySyncData
 * Defined in: framework/entityext/servicedef/services.xml
 */
public class RemotePullAndReportEntitySyncDataRmiService extends ServiceWrapper {

    /** The service name as used by the service engine. */
    public static final String NAME = "remotePullAndReportEntitySyncDataRmi";
    /** If the service requires authentication. */
    public static final Boolean REQUIRES_AUTHENTICATION = Boolean.TRUE;
    /** If the service requires a new transaction. */
    public static final Boolean REQUIRES_NEW_TRANSACTION = Boolean.FALSE;
    /** If the service uses a transaction. */
    public static final Boolean USES_TRANSACTION = Boolean.FALSE;

    /** The enumeration of input parameters. */
    public static enum In {
        delegatorName("delegatorName"),
        entitySyncId("entitySyncId"),
        locale("locale"),
        startDate("startDate"),
        timeZone("timeZone"),
        toCreateInserted("toCreateInserted"),
        toCreateNotUpdated("toCreateNotUpdated"),
        toCreateUpdated("toCreateUpdated"),
        toRemoveAlreadyDeleted("toRemoveAlreadyDeleted"),
        toRemoveDeleted("toRemoveDeleted"),
        toStoreInserted("toStoreInserted"),
        toStoreNotUpdated("toStoreNotUpdated"),
        toStoreUpdated("toStoreUpdated"),
        userLogin("userLogin");
        private final String _fieldName;
        private In(String name) { this._fieldName = name; }
        public String getName() { return this._fieldName; }
    }

    public static enum Out {
        errorMessage("errorMessage"),
        errorMessageList("errorMessageList"),
        keysToRemove("keysToRemove"),
        locale("locale"),
        responseMessage("responseMessage"),
        startDate("startDate"),
        successMessage("successMessage"),
        successMessageList("successMessageList"),
        timeZone("timeZone"),
        userLogin("userLogin"),
        valuesToCreate("valuesToCreate"),
        valuesToStore("valuesToStore");
        private final String _fieldName;
        private Out(String name) { this._fieldName = name; }
        public String getName() { return this._fieldName; }
    }

    /**
     * Creates a new <code>RemotePullAndReportEntitySyncDataRmiService</code> instance.
     */
    public RemotePullAndReportEntitySyncDataRmiService() {
        super();
    }

    /**
     * Creates a new <code>RemotePullAndReportEntitySyncDataRmiService</code> instance.
     * @param user an <code>User</code> value
     */
    public RemotePullAndReportEntitySyncDataRmiService(User user) {
        super(user);
    }

    private String inDelegatorName;
    private String inEntitySyncId;
    private Locale inLocale;
    private Timestamp inStartDate;
    private TimeZone inTimeZone;
    private Long inToCreateInserted;
    private Long inToCreateNotUpdated;
    private Long inToCreateUpdated;
    private Long inToRemoveAlreadyDeleted;
    private Long inToRemoveDeleted;
    private Long inToStoreInserted;
    private Long inToStoreNotUpdated;
    private Long inToStoreUpdated;
    private GenericValue inUserLogin;
    private String outErrorMessage;
    private List outErrorMessageList;
    private List outKeysToRemove;
    private Locale outLocale;
    private String outResponseMessage;
    private Timestamp outStartDate;
    private String outSuccessMessage;
    private List outSuccessMessageList;
    private TimeZone outTimeZone;
    private GenericValue outUserLogin;
    private List outValuesToCreate;
    private List outValuesToStore;

    private Set<String> inParameters = FastSet.newInstance();
    private Set<String> outParameters = FastSet.newInstance();

    /**
     * Auto generated value accessor.
     * This parameter is optional.
     * @return <code>String</code>
     */
    public String getInDelegatorName() {
        return this.inDelegatorName;
    }
    /**
     * Auto generated value accessor.
     * This parameter is required.
     * @return <code>String</code>
     */
    public String getInEntitySyncId() {
        return this.inEntitySyncId;
    }
    /**
     * Auto generated value accessor.
     * This parameter is optional.
     * @return <code>Locale</code>
     */
    public Locale getInLocale() {
        return this.inLocale;
    }
    /**
     * Auto generated value accessor.
     * This parameter is optional.
     * @return <code>Timestamp</code>
     */
    public Timestamp getInStartDate() {
        return this.inStartDate;
    }
    /**
     * Auto generated value accessor.
     * This parameter is optional.
     * @return <code>TimeZone</code>
     */
    public TimeZone getInTimeZone() {
        return this.inTimeZone;
    }
    /**
     * Auto generated value accessor.
     * This parameter is optional.
     * @return <code>Long</code>
     */
    public Long getInToCreateInserted() {
        return this.inToCreateInserted;
    }
    /**
     * Auto generated value accessor.
     * This parameter is optional.
     * @return <code>Long</code>
     */
    public Long getInToCreateNotUpdated() {
        return this.inToCreateNotUpdated;
    }
    /**
     * Auto generated value accessor.
     * This parameter is optional.
     * @return <code>Long</code>
     */
    public Long getInToCreateUpdated() {
        return this.inToCreateUpdated;
    }
    /**
     * Auto generated value accessor.
     * This parameter is optional.
     * @return <code>Long</code>
     */
    public Long getInToRemoveAlreadyDeleted() {
        return this.inToRemoveAlreadyDeleted;
    }
    /**
     * Auto generated value accessor.
     * This parameter is optional.
     * @return <code>Long</code>
     */
    public Long getInToRemoveDeleted() {
        return this.inToRemoveDeleted;
    }
    /**
     * Auto generated value accessor.
     * This parameter is optional.
     * @return <code>Long</code>
     */
    public Long getInToStoreInserted() {
        return this.inToStoreInserted;
    }
    /**
     * Auto generated value accessor.
     * This parameter is optional.
     * @return <code>Long</code>
     */
    public Long getInToStoreNotUpdated() {
        return this.inToStoreNotUpdated;
    }
    /**
     * Auto generated value accessor.
     * This parameter is optional.
     * @return <code>Long</code>
     */
    public Long getInToStoreUpdated() {
        return this.inToStoreUpdated;
    }
    /**
     * Auto generated value accessor.
     * This parameter is optional.
     * @return <code>GenericValue</code>
     */
    public GenericValue getInUserLogin() {
        return this.inUserLogin;
    }
    /**
     * Auto generated value accessor.
     * This parameter is optional.
     * @return <code>String</code>
     */
    public String getOutErrorMessage() {
        return this.outErrorMessage;
    }
    /**
     * Auto generated value accessor.
     * This parameter is optional.
     * @return <code>List</code>
     */
    public List getOutErrorMessageList() {
        return this.outErrorMessageList;
    }
    /**
     * Auto generated value accessor.
     * This parameter is optional.
     * @return <code>List</code>
     */
    public List getOutKeysToRemove() {
        return this.outKeysToRemove;
    }
    /**
     * Auto generated value accessor.
     * This parameter is optional.
     * @return <code>Locale</code>
     */
    public Locale getOutLocale() {
        return this.outLocale;
    }
    /**
     * Auto generated value accessor.
     * This parameter is optional.
     * @return <code>String</code>
     */
    public String getOutResponseMessage() {
        return this.outResponseMessage;
    }
    /**
     * Auto generated value accessor.
     * This parameter is optional.
     * @return <code>Timestamp</code>
     */
    public Timestamp getOutStartDate() {
        return this.outStartDate;
    }
    /**
     * Auto generated value accessor.
     * This parameter is optional.
     * @return <code>String</code>
     */
    public String getOutSuccessMessage() {
        return this.outSuccessMessage;
    }
    /**
     * Auto generated value accessor.
     * This parameter is optional.
     * @return <code>List</code>
     */
    public List getOutSuccessMessageList() {
        return this.outSuccessMessageList;
    }
    /**
     * Auto generated value accessor.
     * This parameter is optional.
     * @return <code>TimeZone</code>
     */
    public TimeZone getOutTimeZone() {
        return this.outTimeZone;
    }
    /**
     * Auto generated value accessor.
     * This parameter is optional.
     * @return <code>GenericValue</code>
     */
    public GenericValue getOutUserLogin() {
        return this.outUserLogin;
    }
    /**
     * Auto generated value accessor.
     * This parameter is optional.
     * @return <code>List</code>
     */
    public List getOutValuesToCreate() {
        return this.outValuesToCreate;
    }
    /**
     * Auto generated value accessor.
     * This parameter is optional.
     * @return <code>List</code>
     */
    public List getOutValuesToStore() {
        return this.outValuesToStore;
    }

    /**
     * Auto generated value setter.
     * This parameter is optional.
     * @param inDelegatorName the inDelegatorName to set
    */
    public void setInDelegatorName(String inDelegatorName) {
        this.inParameters.add("delegatorName");
        this.inDelegatorName = inDelegatorName;
    }
    /**
     * Auto generated value setter.
     * This parameter is required.
     * @param inEntitySyncId the inEntitySyncId to set
    */
    public void setInEntitySyncId(String inEntitySyncId) {
        this.inParameters.add("entitySyncId");
        this.inEntitySyncId = inEntitySyncId;
    }
    /**
     * Auto generated value setter.
     * This parameter is optional.
     * @param inLocale the inLocale to set
    */
    public void setInLocale(Locale inLocale) {
        this.inParameters.add("locale");
        this.inLocale = inLocale;
    }
    /**
     * Auto generated value setter.
     * This parameter is optional.
     * @param inStartDate the inStartDate to set
    */
    public void setInStartDate(Timestamp inStartDate) {
        this.inParameters.add("startDate");
        this.inStartDate = inStartDate;
    }
    /**
     * Auto generated value setter.
     * This parameter is optional.
     * @param inTimeZone the inTimeZone to set
    */
    public void setInTimeZone(TimeZone inTimeZone) {
        this.inParameters.add("timeZone");
        this.inTimeZone = inTimeZone;
    }
    /**
     * Auto generated value setter.
     * This parameter is optional.
     * @param inToCreateInserted the inToCreateInserted to set
    */
    public void setInToCreateInserted(Long inToCreateInserted) {
        this.inParameters.add("toCreateInserted");
        this.inToCreateInserted = inToCreateInserted;
    }
    /**
     * Auto generated value setter.
     * This parameter is optional.
     * @param inToCreateNotUpdated the inToCreateNotUpdated to set
    */
    public void setInToCreateNotUpdated(Long inToCreateNotUpdated) {
        this.inParameters.add("toCreateNotUpdated");
        this.inToCreateNotUpdated = inToCreateNotUpdated;
    }
    /**
     * Auto generated value setter.
     * This parameter is optional.
     * @param inToCreateUpdated the inToCreateUpdated to set
    */
    public void setInToCreateUpdated(Long inToCreateUpdated) {
        this.inParameters.add("toCreateUpdated");
        this.inToCreateUpdated = inToCreateUpdated;
    }
    /**
     * Auto generated value setter.
     * This parameter is optional.
     * @param inToRemoveAlreadyDeleted the inToRemoveAlreadyDeleted to set
    */
    public void setInToRemoveAlreadyDeleted(Long inToRemoveAlreadyDeleted) {
        this.inParameters.add("toRemoveAlreadyDeleted");
        this.inToRemoveAlreadyDeleted = inToRemoveAlreadyDeleted;
    }
    /**
     * Auto generated value setter.
     * This parameter is optional.
     * @param inToRemoveDeleted the inToRemoveDeleted to set
    */
    public void setInToRemoveDeleted(Long inToRemoveDeleted) {
        this.inParameters.add("toRemoveDeleted");
        this.inToRemoveDeleted = inToRemoveDeleted;
    }
    /**
     * Auto generated value setter.
     * This parameter is optional.
     * @param inToStoreInserted the inToStoreInserted to set
    */
    public void setInToStoreInserted(Long inToStoreInserted) {
        this.inParameters.add("toStoreInserted");
        this.inToStoreInserted = inToStoreInserted;
    }
    /**
     * Auto generated value setter.
     * This parameter is optional.
     * @param inToStoreNotUpdated the inToStoreNotUpdated to set
    */
    public void setInToStoreNotUpdated(Long inToStoreNotUpdated) {
        this.inParameters.add("toStoreNotUpdated");
        this.inToStoreNotUpdated = inToStoreNotUpdated;
    }
    /**
     * Auto generated value setter.
     * This parameter is optional.
     * @param inToStoreUpdated the inToStoreUpdated to set
    */
    public void setInToStoreUpdated(Long inToStoreUpdated) {
        this.inParameters.add("toStoreUpdated");
        this.inToStoreUpdated = inToStoreUpdated;
    }
    /**
     * Auto generated value setter.
     * This parameter is optional.
     * @param inUserLogin the inUserLogin to set
    */
    public void setInUserLogin(GenericValue inUserLogin) {
        this.inParameters.add("userLogin");
        this.inUserLogin = inUserLogin;
    }
    /**
     * Auto generated value setter.
     * This parameter is optional.
     * @param outErrorMessage the outErrorMessage to set
    */
    public void setOutErrorMessage(String outErrorMessage) {
        this.outParameters.add("errorMessage");
        this.outErrorMessage = outErrorMessage;
    }
    /**
     * Auto generated value setter.
     * This parameter is optional.
     * @param outErrorMessageList the outErrorMessageList to set
    */
    public void setOutErrorMessageList(List outErrorMessageList) {
        this.outParameters.add("errorMessageList");
        this.outErrorMessageList = outErrorMessageList;
    }
    /**
     * Auto generated value setter.
     * This parameter is optional.
     * @param outKeysToRemove the outKeysToRemove to set
    */
    public void setOutKeysToRemove(List outKeysToRemove) {
        this.outParameters.add("keysToRemove");
        this.outKeysToRemove = outKeysToRemove;
    }
    /**
     * Auto generated value setter.
     * This parameter is optional.
     * @param outLocale the outLocale to set
    */
    public void setOutLocale(Locale outLocale) {
        this.outParameters.add("locale");
        this.outLocale = outLocale;
    }
    /**
     * Auto generated value setter.
     * This parameter is optional.
     * @param outResponseMessage the outResponseMessage to set
    */
    public void setOutResponseMessage(String outResponseMessage) {
        this.outParameters.add("responseMessage");
        this.outResponseMessage = outResponseMessage;
    }
    /**
     * Auto generated value setter.
     * This parameter is optional.
     * @param outStartDate the outStartDate to set
    */
    public void setOutStartDate(Timestamp outStartDate) {
        this.outParameters.add("startDate");
        this.outStartDate = outStartDate;
    }
    /**
     * Auto generated value setter.
     * This parameter is optional.
     * @param outSuccessMessage the outSuccessMessage to set
    */
    public void setOutSuccessMessage(String outSuccessMessage) {
        this.outParameters.add("successMessage");
        this.outSuccessMessage = outSuccessMessage;
    }
    /**
     * Auto generated value setter.
     * This parameter is optional.
     * @param outSuccessMessageList the outSuccessMessageList to set
    */
    public void setOutSuccessMessageList(List outSuccessMessageList) {
        this.outParameters.add("successMessageList");
        this.outSuccessMessageList = outSuccessMessageList;
    }
    /**
     * Auto generated value setter.
     * This parameter is optional.
     * @param outTimeZone the outTimeZone to set
    */
    public void setOutTimeZone(TimeZone outTimeZone) {
        this.outParameters.add("timeZone");
        this.outTimeZone = outTimeZone;
    }
    /**
     * Auto generated value setter.
     * This parameter is optional.
     * @param outUserLogin the outUserLogin to set
    */
    public void setOutUserLogin(GenericValue outUserLogin) {
        this.outParameters.add("userLogin");
        this.outUserLogin = outUserLogin;
    }
    /**
     * Auto generated value setter.
     * This parameter is optional.
     * @param outValuesToCreate the outValuesToCreate to set
    */
    public void setOutValuesToCreate(List outValuesToCreate) {
        this.outParameters.add("valuesToCreate");
        this.outValuesToCreate = outValuesToCreate;
    }
    /**
     * Auto generated value setter.
     * This parameter is optional.
     * @param outValuesToStore the outValuesToStore to set
    */
    public void setOutValuesToStore(List outValuesToStore) {
        this.outParameters.add("valuesToStore");
        this.outValuesToStore = outValuesToStore;
    }

    /** {@inheritDoc} */
    public String name() {
        return NAME;
    }

    /** {@inheritDoc} */
    public Boolean requiresAuthentication() {
        return REQUIRES_AUTHENTICATION;
    }

    /** {@inheritDoc} */
    public Boolean requiresNewTransaction() {
        return REQUIRES_NEW_TRANSACTION;
    }

    /** {@inheritDoc} */
    public Boolean usesTransaction() {
        return USES_TRANSACTION;
    }

    /** {@inheritDoc} */
    public Map<String, Object> inputMap() {
        Map<String, Object> mapValue = new FastMap<String, Object>();
        if (inParameters.contains("delegatorName")) mapValue.put("delegatorName", getInDelegatorName());
        if (inParameters.contains("entitySyncId")) mapValue.put("entitySyncId", getInEntitySyncId());
        if (inParameters.contains("locale")) mapValue.put("locale", getInLocale());
        if (inParameters.contains("startDate")) mapValue.put("startDate", getInStartDate());
        if (inParameters.contains("timeZone")) mapValue.put("timeZone", getInTimeZone());
        if (inParameters.contains("toCreateInserted")) mapValue.put("toCreateInserted", getInToCreateInserted());
        if (inParameters.contains("toCreateNotUpdated")) mapValue.put("toCreateNotUpdated", getInToCreateNotUpdated());
        if (inParameters.contains("toCreateUpdated")) mapValue.put("toCreateUpdated", getInToCreateUpdated());
        if (inParameters.contains("toRemoveAlreadyDeleted")) mapValue.put("toRemoveAlreadyDeleted", getInToRemoveAlreadyDeleted());
        if (inParameters.contains("toRemoveDeleted")) mapValue.put("toRemoveDeleted", getInToRemoveDeleted());
        if (inParameters.contains("toStoreInserted")) mapValue.put("toStoreInserted", getInToStoreInserted());
        if (inParameters.contains("toStoreNotUpdated")) mapValue.put("toStoreNotUpdated", getInToStoreNotUpdated());
        if (inParameters.contains("toStoreUpdated")) mapValue.put("toStoreUpdated", getInToStoreUpdated());
        if (inParameters.contains("userLogin")) mapValue.put("userLogin", getInUserLogin());
        // allow the User set to override the userLogin
        if (getUser() != null) mapValue.put("userLogin", getUser().getOfbizUserLogin());
        return mapValue;
    }

    /** {@inheritDoc} */
    public Map<String, Object> outputMap() {
        Map<String, Object> mapValue = new FastMap<String, Object>();
        if (outParameters.contains("errorMessage")) mapValue.put("errorMessage", getOutErrorMessage());
        if (outParameters.contains("errorMessageList")) mapValue.put("errorMessageList", getOutErrorMessageList());
        if (outParameters.contains("keysToRemove")) mapValue.put("keysToRemove", getOutKeysToRemove());
        if (outParameters.contains("locale")) mapValue.put("locale", getOutLocale());
        if (outParameters.contains("responseMessage")) mapValue.put("responseMessage", getOutResponseMessage());
        if (outParameters.contains("startDate")) mapValue.put("startDate", getOutStartDate());
        if (outParameters.contains("successMessage")) mapValue.put("successMessage", getOutSuccessMessage());
        if (outParameters.contains("successMessageList")) mapValue.put("successMessageList", getOutSuccessMessageList());
        if (outParameters.contains("timeZone")) mapValue.put("timeZone", getOutTimeZone());
        if (outParameters.contains("userLogin")) mapValue.put("userLogin", getOutUserLogin());
        if (outParameters.contains("valuesToCreate")) mapValue.put("valuesToCreate", getOutValuesToCreate());
        if (outParameters.contains("valuesToStore")) mapValue.put("valuesToStore", getOutValuesToStore());
        return mapValue;
    }

    /** {@inheritDoc} */
    public void putAllInput(Map<String, Object> mapValue) {
        if (mapValue.containsKey("delegatorName")) setInDelegatorName((String) mapValue.get("delegatorName"));
        if (mapValue.containsKey("entitySyncId")) setInEntitySyncId((String) mapValue.get("entitySyncId"));
        if (mapValue.containsKey("locale")) setInLocale((Locale) mapValue.get("locale"));
        if (mapValue.containsKey("startDate")) setInStartDate((Timestamp) mapValue.get("startDate"));
        if (mapValue.containsKey("timeZone")) setInTimeZone((TimeZone) mapValue.get("timeZone"));
        if (mapValue.containsKey("toCreateInserted")) setInToCreateInserted((Long) mapValue.get("toCreateInserted"));
        if (mapValue.containsKey("toCreateNotUpdated")) setInToCreateNotUpdated((Long) mapValue.get("toCreateNotUpdated"));
        if (mapValue.containsKey("toCreateUpdated")) setInToCreateUpdated((Long) mapValue.get("toCreateUpdated"));
        if (mapValue.containsKey("toRemoveAlreadyDeleted")) setInToRemoveAlreadyDeleted((Long) mapValue.get("toRemoveAlreadyDeleted"));
        if (mapValue.containsKey("toRemoveDeleted")) setInToRemoveDeleted((Long) mapValue.get("toRemoveDeleted"));
        if (mapValue.containsKey("toStoreInserted")) setInToStoreInserted((Long) mapValue.get("toStoreInserted"));
        if (mapValue.containsKey("toStoreNotUpdated")) setInToStoreNotUpdated((Long) mapValue.get("toStoreNotUpdated"));
        if (mapValue.containsKey("toStoreUpdated")) setInToStoreUpdated((Long) mapValue.get("toStoreUpdated"));
        if (mapValue.containsKey("userLogin")) setInUserLogin((GenericValue) mapValue.get("userLogin"));
    }

    /** {@inheritDoc} */
    public void putAllOutput(Map<String, Object> mapValue) {
        if (mapValue.containsKey("errorMessage")) setOutErrorMessage((String) mapValue.get("errorMessage"));
        if (mapValue.containsKey("errorMessageList")) setOutErrorMessageList((List) mapValue.get("errorMessageList"));
        if (mapValue.containsKey("keysToRemove")) setOutKeysToRemove((List) mapValue.get("keysToRemove"));
        if (mapValue.containsKey("locale")) setOutLocale((Locale) mapValue.get("locale"));
        if (mapValue.containsKey("responseMessage")) setOutResponseMessage((String) mapValue.get("responseMessage"));
        if (mapValue.containsKey("startDate")) setOutStartDate((Timestamp) mapValue.get("startDate"));
        if (mapValue.containsKey("successMessage")) setOutSuccessMessage((String) mapValue.get("successMessage"));
        if (mapValue.containsKey("successMessageList")) setOutSuccessMessageList((List) mapValue.get("successMessageList"));
        if (mapValue.containsKey("timeZone")) setOutTimeZone((TimeZone) mapValue.get("timeZone"));
        if (mapValue.containsKey("userLogin")) setOutUserLogin((GenericValue) mapValue.get("userLogin"));
        if (mapValue.containsKey("valuesToCreate")) setOutValuesToCreate((List) mapValue.get("valuesToCreate"));
        if (mapValue.containsKey("valuesToStore")) setOutValuesToStore((List) mapValue.get("valuesToStore"));
    }

    /**
     * Construct a <code>RemotePullAndReportEntitySyncDataRmiService</code> from the input values of the given <code>RemotePullAndReportEntitySyncDataRmiService</code>.
     * @param input a <code>RemotePullAndReportEntitySyncDataRmiService</code>
     */
    public static RemotePullAndReportEntitySyncDataRmiService fromInput(RemotePullAndReportEntitySyncDataRmiService input) {
        RemotePullAndReportEntitySyncDataRmiService service = new RemotePullAndReportEntitySyncDataRmiService();
        return fromInput(input.inputMap());
    }

    /**
     * Construct a <code>RemotePullAndReportEntitySyncDataRmiService</code> from the output values of the given <code>RemotePullAndReportEntitySyncDataRmiService</code>.
     * @param output a <code>RemotePullAndReportEntitySyncDataRmiService</code>
     */
    public static RemotePullAndReportEntitySyncDataRmiService fromOutput(RemotePullAndReportEntitySyncDataRmiService output) {
        RemotePullAndReportEntitySyncDataRmiService service = new RemotePullAndReportEntitySyncDataRmiService();
        service.putAllOutput(output.outputMap());
        return service;
    }

    /**
     * Construct a <code>RemotePullAndReportEntitySyncDataRmiService</code> from the given input <code>Map</code>.
     * @param mapValue the service input <code>Map</code>
     */
    public static RemotePullAndReportEntitySyncDataRmiService fromInput(Map<String, Object> mapValue) {
        RemotePullAndReportEntitySyncDataRmiService service = new RemotePullAndReportEntitySyncDataRmiService();
        service.putAllInput(mapValue);
        if (mapValue.containsKey("userLogin")) {
            GenericValue userGv = (GenericValue) mapValue.get("userLogin");
            if (userGv != null) {
                service.setUser(new User(userGv, userGv.getDelegator()));
            }
        }
        return service;
    }

    /**
     * Construct a <code>RemotePullAndReportEntitySyncDataRmiService</code> from the given output <code>Map</code>.
     * @param mapValue the service output <code>Map</code>
     */
    public static RemotePullAndReportEntitySyncDataRmiService fromOutput(Map<String, Object> mapValue) {
        RemotePullAndReportEntitySyncDataRmiService service = new RemotePullAndReportEntitySyncDataRmiService();
        service.putAllOutput(mapValue);
        return service;
    }
}
