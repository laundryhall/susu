package org.opentaps.base.services;

/*
 * Copyright (c) Open Source Strategies, Inc.
 *
 * Opentaps is free software: you can redistribute it and/or modify it
 * under the terms of the GNU Affero General Public License as published
 * by the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Opentaps is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with Opentaps.  If not, see <http://www.gnu.org/licenses/>.
 */

// DO NOT EDIT THIS FILE!  THIS IS AUTO GENERATED AND WILL GET WRITTEN OVER PERIODICALLY WHEN THE SERVICE MODEL CHANGES
// EXTEND THIS CLASS INSTEAD.

import org.opentaps.foundation.service.ServiceWrapper;

import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import java.util.TimeZone;
import javolution.util.FastMap;
import javolution.util.FastSet;
import org.ofbiz.content.content.PermissionRecorder;
import org.ofbiz.entity.GenericValue;
import org.opentaps.foundation.infrastructure.User;

/**
 * Check for permission to perform operation on Content.
 * Auto generated base service entity checkContentPermission.
 *
 * Engine: java
 * Location: org.ofbiz.content.content.ContentPermissionServices
 * Invoke: checkContentPermission
 * Defined in: applications/content/servicedef/services_content.xml
 */
public class CheckContentPermissionService extends ServiceWrapper {

    /** The service name as used by the service engine. */
    public static final String NAME = "checkContentPermission";
    /** If the service requires authentication. */
    public static final Boolean REQUIRES_AUTHENTICATION = Boolean.FALSE;
    /** If the service requires a new transaction. */
    public static final Boolean REQUIRES_NEW_TRANSACTION = Boolean.FALSE;
    /** If the service uses a transaction. */
    public static final Boolean USES_TRANSACTION = Boolean.TRUE;

    /** The enumeration of input parameters. */
    public static enum In {
        contentPurposeList("contentPurposeList"),
        contentPurposeString("contentPurposeString"),
        currentContent("currentContent"),
        displayFailCond("displayFailCond"),
        displayPassCond("displayPassCond"),
        entityOperation("entityOperation"),
        fromDate("fromDate"),
        locale("locale"),
        partyId("partyId"),
        privilegeEnumId("privilegeEnumId"),
        quickCheckContentId("quickCheckContentId"),
        roleTypeList("roleTypeList"),
        roleTypeString("roleTypeString"),
        statusId("statusId"),
        targetOperationList("targetOperationList"),
        targetOperationString("targetOperationString"),
        thruDate("thruDate"),
        timeZone("timeZone"),
        userLogin("userLogin"),
        userLoginId("userLoginId");
        private final String _fieldName;
        private In(String name) { this._fieldName = name; }
        public String getName() { return this._fieldName; }
    }

    public static enum Out {
        errorMessage("errorMessage"),
        errorMessageList("errorMessageList"),
        locale("locale"),
        permissionRecorder("permissionRecorder"),
        permissionStatus("permissionStatus"),
        responseMessage("responseMessage"),
        roleTypeList("roleTypeList"),
        successMessage("successMessage"),
        successMessageList("successMessageList"),
        timeZone("timeZone"),
        userLogin("userLogin");
        private final String _fieldName;
        private Out(String name) { this._fieldName = name; }
        public String getName() { return this._fieldName; }
    }

    /**
     * Creates a new <code>CheckContentPermissionService</code> instance.
     */
    public CheckContentPermissionService() {
        super();
    }


    private List inContentPurposeList;
    private String inContentPurposeString;
    private GenericValue inCurrentContent;
    private Boolean inDisplayFailCond;
    private Boolean inDisplayPassCond;
    private String inEntityOperation;
    private String inFromDate;
    private Locale inLocale;
    private String inPartyId;
    private String inPrivilegeEnumId;
    private String inQuickCheckContentId;
    private List inRoleTypeList;
    private String inRoleTypeString;
    private String inStatusId;
    private List inTargetOperationList;
    private String inTargetOperationString;
    private String inThruDate;
    private TimeZone inTimeZone;
    private GenericValue inUserLogin;
    private String inUserLoginId;
    private String outErrorMessage;
    private List outErrorMessageList;
    private Locale outLocale;
    private PermissionRecorder outPermissionRecorder;
    private String outPermissionStatus;
    private String outResponseMessage;
    private List outRoleTypeList;
    private String outSuccessMessage;
    private List outSuccessMessageList;
    private TimeZone outTimeZone;
    private GenericValue outUserLogin;

    private Set<String> inParameters = FastSet.newInstance();
    private Set<String> outParameters = FastSet.newInstance();

    /**
     * Auto generated value accessor.
     * This parameter is optional.
     * @return <code>List</code>
     */
    public List getInContentPurposeList() {
        return this.inContentPurposeList;
    }
    /**
     * Auto generated value accessor.
     * This parameter is optional.
     * @return <code>String</code>
     */
    public String getInContentPurposeString() {
        return this.inContentPurposeString;
    }
    /**
     * Auto generated value accessor.
     * This parameter is optional.
     * @return <code>GenericValue</code>
     */
    public GenericValue getInCurrentContent() {
        return this.inCurrentContent;
    }
    /**
     * Auto generated value accessor.
     * This parameter is optional.
     * @return <code>Boolean</code>
     */
    public Boolean getInDisplayFailCond() {
        return this.inDisplayFailCond;
    }
    /**
     * Auto generated value accessor.
     * This parameter is optional.
     * @return <code>Boolean</code>
     */
    public Boolean getInDisplayPassCond() {
        return this.inDisplayPassCond;
    }
    /**
     * Auto generated value accessor.
     * This parameter is optional.
     * @return <code>String</code>
     */
    public String getInEntityOperation() {
        return this.inEntityOperation;
    }
    /**
     * Auto generated value accessor.
     * This parameter is optional.
     * @return <code>String</code>
     */
    public String getInFromDate() {
        return this.inFromDate;
    }
    /**
     * Auto generated value accessor.
     * This parameter is optional.
     * @return <code>Locale</code>
     */
    public Locale getInLocale() {
        return this.inLocale;
    }
    /**
     * Auto generated value accessor.
     * This parameter is optional.
     * @return <code>String</code>
     */
    public String getInPartyId() {
        return this.inPartyId;
    }
    /**
     * Auto generated value accessor.
     * This parameter is optional.
     * @return <code>String</code>
     */
    public String getInPrivilegeEnumId() {
        return this.inPrivilegeEnumId;
    }
    /**
     * Auto generated value accessor.
     * This parameter is optional.
     * @return <code>String</code>
     */
    public String getInQuickCheckContentId() {
        return this.inQuickCheckContentId;
    }
    /**
     * Auto generated value accessor.
     * This parameter is optional.
     * @return <code>List</code>
     */
    public List getInRoleTypeList() {
        return this.inRoleTypeList;
    }
    /**
     * Auto generated value accessor.
     * This parameter is optional.
     * @return <code>String</code>
     */
    public String getInRoleTypeString() {
        return this.inRoleTypeString;
    }
    /**
     * Auto generated value accessor.
     * This parameter is optional.
     * @return <code>String</code>
     */
    public String getInStatusId() {
        return this.inStatusId;
    }
    /**
     * Auto generated value accessor.
     * This parameter is optional.
     * @return <code>List</code>
     */
    public List getInTargetOperationList() {
        return this.inTargetOperationList;
    }
    /**
     * Auto generated value accessor.
     * This parameter is optional.
     * @return <code>String</code>
     */
    public String getInTargetOperationString() {
        return this.inTargetOperationString;
    }
    /**
     * Auto generated value accessor.
     * This parameter is optional.
     * @return <code>String</code>
     */
    public String getInThruDate() {
        return this.inThruDate;
    }
    /**
     * Auto generated value accessor.
     * This parameter is optional.
     * @return <code>TimeZone</code>
     */
    public TimeZone getInTimeZone() {
        return this.inTimeZone;
    }
    /**
     * Auto generated value accessor.
     * This parameter is optional.
     * @return <code>GenericValue</code>
     */
    public GenericValue getInUserLogin() {
        return this.inUserLogin;
    }
    /**
     * Auto generated value accessor.
     * This parameter is optional.
     * @return <code>String</code>
     */
    public String getInUserLoginId() {
        return this.inUserLoginId;
    }
    /**
     * Auto generated value accessor.
     * This parameter is optional.
     * @return <code>String</code>
     */
    public String getOutErrorMessage() {
        return this.outErrorMessage;
    }
    /**
     * Auto generated value accessor.
     * This parameter is optional.
     * @return <code>List</code>
     */
    public List getOutErrorMessageList() {
        return this.outErrorMessageList;
    }
    /**
     * Auto generated value accessor.
     * This parameter is optional.
     * @return <code>Locale</code>
     */
    public Locale getOutLocale() {
        return this.outLocale;
    }
    /**
     * Auto generated value accessor.
     * This parameter is optional.
     * @return <code>PermissionRecorder</code>
     */
    public PermissionRecorder getOutPermissionRecorder() {
        return this.outPermissionRecorder;
    }
    /**
     * Auto generated value accessor.
     * This parameter is optional.
     * @return <code>String</code>
     */
    public String getOutPermissionStatus() {
        return this.outPermissionStatus;
    }
    /**
     * Auto generated value accessor.
     * This parameter is optional.
     * @return <code>String</code>
     */
    public String getOutResponseMessage() {
        return this.outResponseMessage;
    }
    /**
     * Auto generated value accessor.
     * This parameter is optional.
     * @return <code>List</code>
     */
    public List getOutRoleTypeList() {
        return this.outRoleTypeList;
    }
    /**
     * Auto generated value accessor.
     * This parameter is optional.
     * @return <code>String</code>
     */
    public String getOutSuccessMessage() {
        return this.outSuccessMessage;
    }
    /**
     * Auto generated value accessor.
     * This parameter is optional.
     * @return <code>List</code>
     */
    public List getOutSuccessMessageList() {
        return this.outSuccessMessageList;
    }
    /**
     * Auto generated value accessor.
     * This parameter is optional.
     * @return <code>TimeZone</code>
     */
    public TimeZone getOutTimeZone() {
        return this.outTimeZone;
    }
    /**
     * Auto generated value accessor.
     * This parameter is optional.
     * @return <code>GenericValue</code>
     */
    public GenericValue getOutUserLogin() {
        return this.outUserLogin;
    }

    /**
     * Auto generated value setter.
     * This parameter is optional.
     * @param inContentPurposeList the inContentPurposeList to set
    */
    public void setInContentPurposeList(List inContentPurposeList) {
        this.inParameters.add("contentPurposeList");
        this.inContentPurposeList = inContentPurposeList;
    }
    /**
     * Auto generated value setter.
     * This parameter is optional.
     * @param inContentPurposeString the inContentPurposeString to set
    */
    public void setInContentPurposeString(String inContentPurposeString) {
        this.inParameters.add("contentPurposeString");
        this.inContentPurposeString = inContentPurposeString;
    }
    /**
     * Auto generated value setter.
     * This parameter is optional.
     * @param inCurrentContent the inCurrentContent to set
    */
    public void setInCurrentContent(GenericValue inCurrentContent) {
        this.inParameters.add("currentContent");
        this.inCurrentContent = inCurrentContent;
    }
    /**
     * Auto generated value setter.
     * This parameter is optional.
     * @param inDisplayFailCond the inDisplayFailCond to set
    */
    public void setInDisplayFailCond(Boolean inDisplayFailCond) {
        this.inParameters.add("displayFailCond");
        this.inDisplayFailCond = inDisplayFailCond;
    }
    /**
     * Auto generated value setter.
     * This parameter is optional.
     * @param inDisplayPassCond the inDisplayPassCond to set
    */
    public void setInDisplayPassCond(Boolean inDisplayPassCond) {
        this.inParameters.add("displayPassCond");
        this.inDisplayPassCond = inDisplayPassCond;
    }
    /**
     * Auto generated value setter.
     * This parameter is optional.
     * @param inEntityOperation the inEntityOperation to set
    */
    public void setInEntityOperation(String inEntityOperation) {
        this.inParameters.add("entityOperation");
        this.inEntityOperation = inEntityOperation;
    }
    /**
     * Auto generated value setter.
     * This parameter is optional.
     * @param inFromDate the inFromDate to set
    */
    public void setInFromDate(String inFromDate) {
        this.inParameters.add("fromDate");
        this.inFromDate = inFromDate;
    }
    /**
     * Auto generated value setter.
     * This parameter is optional.
     * @param inLocale the inLocale to set
    */
    public void setInLocale(Locale inLocale) {
        this.inParameters.add("locale");
        this.inLocale = inLocale;
    }
    /**
     * Auto generated value setter.
     * This parameter is optional.
     * @param inPartyId the inPartyId to set
    */
    public void setInPartyId(String inPartyId) {
        this.inParameters.add("partyId");
        this.inPartyId = inPartyId;
    }
    /**
     * Auto generated value setter.
     * This parameter is optional.
     * @param inPrivilegeEnumId the inPrivilegeEnumId to set
    */
    public void setInPrivilegeEnumId(String inPrivilegeEnumId) {
        this.inParameters.add("privilegeEnumId");
        this.inPrivilegeEnumId = inPrivilegeEnumId;
    }
    /**
     * Auto generated value setter.
     * This parameter is optional.
     * @param inQuickCheckContentId the inQuickCheckContentId to set
    */
    public void setInQuickCheckContentId(String inQuickCheckContentId) {
        this.inParameters.add("quickCheckContentId");
        this.inQuickCheckContentId = inQuickCheckContentId;
    }
    /**
     * Auto generated value setter.
     * This parameter is optional.
     * @param inRoleTypeList the inRoleTypeList to set
    */
    public void setInRoleTypeList(List inRoleTypeList) {
        this.inParameters.add("roleTypeList");
        this.inRoleTypeList = inRoleTypeList;
    }
    /**
     * Auto generated value setter.
     * This parameter is optional.
     * @param inRoleTypeString the inRoleTypeString to set
    */
    public void setInRoleTypeString(String inRoleTypeString) {
        this.inParameters.add("roleTypeString");
        this.inRoleTypeString = inRoleTypeString;
    }
    /**
     * Auto generated value setter.
     * This parameter is optional.
     * @param inStatusId the inStatusId to set
    */
    public void setInStatusId(String inStatusId) {
        this.inParameters.add("statusId");
        this.inStatusId = inStatusId;
    }
    /**
     * Auto generated value setter.
     * This parameter is optional.
     * @param inTargetOperationList the inTargetOperationList to set
    */
    public void setInTargetOperationList(List inTargetOperationList) {
        this.inParameters.add("targetOperationList");
        this.inTargetOperationList = inTargetOperationList;
    }
    /**
     * Auto generated value setter.
     * This parameter is optional.
     * @param inTargetOperationString the inTargetOperationString to set
    */
    public void setInTargetOperationString(String inTargetOperationString) {
        this.inParameters.add("targetOperationString");
        this.inTargetOperationString = inTargetOperationString;
    }
    /**
     * Auto generated value setter.
     * This parameter is optional.
     * @param inThruDate the inThruDate to set
    */
    public void setInThruDate(String inThruDate) {
        this.inParameters.add("thruDate");
        this.inThruDate = inThruDate;
    }
    /**
     * Auto generated value setter.
     * This parameter is optional.
     * @param inTimeZone the inTimeZone to set
    */
    public void setInTimeZone(TimeZone inTimeZone) {
        this.inParameters.add("timeZone");
        this.inTimeZone = inTimeZone;
    }
    /**
     * Auto generated value setter.
     * This parameter is optional.
     * @param inUserLogin the inUserLogin to set
    */
    public void setInUserLogin(GenericValue inUserLogin) {
        this.inParameters.add("userLogin");
        this.inUserLogin = inUserLogin;
    }
    /**
     * Auto generated value setter.
     * This parameter is optional.
     * @param inUserLoginId the inUserLoginId to set
    */
    public void setInUserLoginId(String inUserLoginId) {
        this.inParameters.add("userLoginId");
        this.inUserLoginId = inUserLoginId;
    }
    /**
     * Auto generated value setter.
     * This parameter is optional.
     * @param outErrorMessage the outErrorMessage to set
    */
    public void setOutErrorMessage(String outErrorMessage) {
        this.outParameters.add("errorMessage");
        this.outErrorMessage = outErrorMessage;
    }
    /**
     * Auto generated value setter.
     * This parameter is optional.
     * @param outErrorMessageList the outErrorMessageList to set
    */
    public void setOutErrorMessageList(List outErrorMessageList) {
        this.outParameters.add("errorMessageList");
        this.outErrorMessageList = outErrorMessageList;
    }
    /**
     * Auto generated value setter.
     * This parameter is optional.
     * @param outLocale the outLocale to set
    */
    public void setOutLocale(Locale outLocale) {
        this.outParameters.add("locale");
        this.outLocale = outLocale;
    }
    /**
     * Auto generated value setter.
     * This parameter is optional.
     * @param outPermissionRecorder the outPermissionRecorder to set
    */
    public void setOutPermissionRecorder(PermissionRecorder outPermissionRecorder) {
        this.outParameters.add("permissionRecorder");
        this.outPermissionRecorder = outPermissionRecorder;
    }
    /**
     * Auto generated value setter.
     * This parameter is optional.
     * @param outPermissionStatus the outPermissionStatus to set
    */
    public void setOutPermissionStatus(String outPermissionStatus) {
        this.outParameters.add("permissionStatus");
        this.outPermissionStatus = outPermissionStatus;
    }
    /**
     * Auto generated value setter.
     * This parameter is optional.
     * @param outResponseMessage the outResponseMessage to set
    */
    public void setOutResponseMessage(String outResponseMessage) {
        this.outParameters.add("responseMessage");
        this.outResponseMessage = outResponseMessage;
    }
    /**
     * Auto generated value setter.
     * This parameter is optional.
     * @param outRoleTypeList the outRoleTypeList to set
    */
    public void setOutRoleTypeList(List outRoleTypeList) {
        this.outParameters.add("roleTypeList");
        this.outRoleTypeList = outRoleTypeList;
    }
    /**
     * Auto generated value setter.
     * This parameter is optional.
     * @param outSuccessMessage the outSuccessMessage to set
    */
    public void setOutSuccessMessage(String outSuccessMessage) {
        this.outParameters.add("successMessage");
        this.outSuccessMessage = outSuccessMessage;
    }
    /**
     * Auto generated value setter.
     * This parameter is optional.
     * @param outSuccessMessageList the outSuccessMessageList to set
    */
    public void setOutSuccessMessageList(List outSuccessMessageList) {
        this.outParameters.add("successMessageList");
        this.outSuccessMessageList = outSuccessMessageList;
    }
    /**
     * Auto generated value setter.
     * This parameter is optional.
     * @param outTimeZone the outTimeZone to set
    */
    public void setOutTimeZone(TimeZone outTimeZone) {
        this.outParameters.add("timeZone");
        this.outTimeZone = outTimeZone;
    }
    /**
     * Auto generated value setter.
     * This parameter is optional.
     * @param outUserLogin the outUserLogin to set
    */
    public void setOutUserLogin(GenericValue outUserLogin) {
        this.outParameters.add("userLogin");
        this.outUserLogin = outUserLogin;
    }

    /** {@inheritDoc} */
    public String name() {
        return NAME;
    }

    /** {@inheritDoc} */
    public Boolean requiresAuthentication() {
        return REQUIRES_AUTHENTICATION;
    }

    /** {@inheritDoc} */
    public Boolean requiresNewTransaction() {
        return REQUIRES_NEW_TRANSACTION;
    }

    /** {@inheritDoc} */
    public Boolean usesTransaction() {
        return USES_TRANSACTION;
    }

    /** {@inheritDoc} */
    public Map<String, Object> inputMap() {
        Map<String, Object> mapValue = new FastMap<String, Object>();
        if (inParameters.contains("contentPurposeList")) mapValue.put("contentPurposeList", getInContentPurposeList());
        if (inParameters.contains("contentPurposeString")) mapValue.put("contentPurposeString", getInContentPurposeString());
        if (inParameters.contains("currentContent")) mapValue.put("currentContent", getInCurrentContent());
        if (inParameters.contains("displayFailCond")) mapValue.put("displayFailCond", getInDisplayFailCond());
        if (inParameters.contains("displayPassCond")) mapValue.put("displayPassCond", getInDisplayPassCond());
        if (inParameters.contains("entityOperation")) mapValue.put("entityOperation", getInEntityOperation());
        if (inParameters.contains("fromDate")) mapValue.put("fromDate", getInFromDate());
        if (inParameters.contains("locale")) mapValue.put("locale", getInLocale());
        if (inParameters.contains("partyId")) mapValue.put("partyId", getInPartyId());
        if (inParameters.contains("privilegeEnumId")) mapValue.put("privilegeEnumId", getInPrivilegeEnumId());
        if (inParameters.contains("quickCheckContentId")) mapValue.put("quickCheckContentId", getInQuickCheckContentId());
        if (inParameters.contains("roleTypeList")) mapValue.put("roleTypeList", getInRoleTypeList());
        if (inParameters.contains("roleTypeString")) mapValue.put("roleTypeString", getInRoleTypeString());
        if (inParameters.contains("statusId")) mapValue.put("statusId", getInStatusId());
        if (inParameters.contains("targetOperationList")) mapValue.put("targetOperationList", getInTargetOperationList());
        if (inParameters.contains("targetOperationString")) mapValue.put("targetOperationString", getInTargetOperationString());
        if (inParameters.contains("thruDate")) mapValue.put("thruDate", getInThruDate());
        if (inParameters.contains("timeZone")) mapValue.put("timeZone", getInTimeZone());
        if (inParameters.contains("userLogin")) mapValue.put("userLogin", getInUserLogin());
        if (inParameters.contains("userLoginId")) mapValue.put("userLoginId", getInUserLoginId());
        // allow the User set to override the userLogin
        if (getUser() != null) mapValue.put("userLogin", getUser().getOfbizUserLogin());
        return mapValue;
    }

    /** {@inheritDoc} */
    public Map<String, Object> outputMap() {
        Map<String, Object> mapValue = new FastMap<String, Object>();
        if (outParameters.contains("errorMessage")) mapValue.put("errorMessage", getOutErrorMessage());
        if (outParameters.contains("errorMessageList")) mapValue.put("errorMessageList", getOutErrorMessageList());
        if (outParameters.contains("locale")) mapValue.put("locale", getOutLocale());
        if (outParameters.contains("permissionRecorder")) mapValue.put("permissionRecorder", getOutPermissionRecorder());
        if (outParameters.contains("permissionStatus")) mapValue.put("permissionStatus", getOutPermissionStatus());
        if (outParameters.contains("responseMessage")) mapValue.put("responseMessage", getOutResponseMessage());
        if (outParameters.contains("roleTypeList")) mapValue.put("roleTypeList", getOutRoleTypeList());
        if (outParameters.contains("successMessage")) mapValue.put("successMessage", getOutSuccessMessage());
        if (outParameters.contains("successMessageList")) mapValue.put("successMessageList", getOutSuccessMessageList());
        if (outParameters.contains("timeZone")) mapValue.put("timeZone", getOutTimeZone());
        if (outParameters.contains("userLogin")) mapValue.put("userLogin", getOutUserLogin());
        return mapValue;
    }

    /** {@inheritDoc} */
    public void putAllInput(Map<String, Object> mapValue) {
        if (mapValue.containsKey("contentPurposeList")) setInContentPurposeList((List) mapValue.get("contentPurposeList"));
        if (mapValue.containsKey("contentPurposeString")) setInContentPurposeString((String) mapValue.get("contentPurposeString"));
        if (mapValue.containsKey("currentContent")) setInCurrentContent((GenericValue) mapValue.get("currentContent"));
        if (mapValue.containsKey("displayFailCond")) setInDisplayFailCond((Boolean) mapValue.get("displayFailCond"));
        if (mapValue.containsKey("displayPassCond")) setInDisplayPassCond((Boolean) mapValue.get("displayPassCond"));
        if (mapValue.containsKey("entityOperation")) setInEntityOperation((String) mapValue.get("entityOperation"));
        if (mapValue.containsKey("fromDate")) setInFromDate((String) mapValue.get("fromDate"));
        if (mapValue.containsKey("locale")) setInLocale((Locale) mapValue.get("locale"));
        if (mapValue.containsKey("partyId")) setInPartyId((String) mapValue.get("partyId"));
        if (mapValue.containsKey("privilegeEnumId")) setInPrivilegeEnumId((String) mapValue.get("privilegeEnumId"));
        if (mapValue.containsKey("quickCheckContentId")) setInQuickCheckContentId((String) mapValue.get("quickCheckContentId"));
        if (mapValue.containsKey("roleTypeList")) setInRoleTypeList((List) mapValue.get("roleTypeList"));
        if (mapValue.containsKey("roleTypeString")) setInRoleTypeString((String) mapValue.get("roleTypeString"));
        if (mapValue.containsKey("statusId")) setInStatusId((String) mapValue.get("statusId"));
        if (mapValue.containsKey("targetOperationList")) setInTargetOperationList((List) mapValue.get("targetOperationList"));
        if (mapValue.containsKey("targetOperationString")) setInTargetOperationString((String) mapValue.get("targetOperationString"));
        if (mapValue.containsKey("thruDate")) setInThruDate((String) mapValue.get("thruDate"));
        if (mapValue.containsKey("timeZone")) setInTimeZone((TimeZone) mapValue.get("timeZone"));
        if (mapValue.containsKey("userLogin")) setInUserLogin((GenericValue) mapValue.get("userLogin"));
        if (mapValue.containsKey("userLoginId")) setInUserLoginId((String) mapValue.get("userLoginId"));
    }

    /** {@inheritDoc} */
    public void putAllOutput(Map<String, Object> mapValue) {
        if (mapValue.containsKey("errorMessage")) setOutErrorMessage((String) mapValue.get("errorMessage"));
        if (mapValue.containsKey("errorMessageList")) setOutErrorMessageList((List) mapValue.get("errorMessageList"));
        if (mapValue.containsKey("locale")) setOutLocale((Locale) mapValue.get("locale"));
        if (mapValue.containsKey("permissionRecorder")) setOutPermissionRecorder((PermissionRecorder) mapValue.get("permissionRecorder"));
        if (mapValue.containsKey("permissionStatus")) setOutPermissionStatus((String) mapValue.get("permissionStatus"));
        if (mapValue.containsKey("responseMessage")) setOutResponseMessage((String) mapValue.get("responseMessage"));
        if (mapValue.containsKey("roleTypeList")) setOutRoleTypeList((List) mapValue.get("roleTypeList"));
        if (mapValue.containsKey("successMessage")) setOutSuccessMessage((String) mapValue.get("successMessage"));
        if (mapValue.containsKey("successMessageList")) setOutSuccessMessageList((List) mapValue.get("successMessageList"));
        if (mapValue.containsKey("timeZone")) setOutTimeZone((TimeZone) mapValue.get("timeZone"));
        if (mapValue.containsKey("userLogin")) setOutUserLogin((GenericValue) mapValue.get("userLogin"));
    }

    /**
     * Construct a <code>CheckContentPermissionService</code> from the input values of the given <code>CheckContentPermissionService</code>.
     * @param input a <code>CheckContentPermissionService</code>
     */
    public static CheckContentPermissionService fromInput(CheckContentPermissionService input) {
        CheckContentPermissionService service = new CheckContentPermissionService();
        return fromInput(input.inputMap());
    }

    /**
     * Construct a <code>CheckContentPermissionService</code> from the output values of the given <code>CheckContentPermissionService</code>.
     * @param output a <code>CheckContentPermissionService</code>
     */
    public static CheckContentPermissionService fromOutput(CheckContentPermissionService output) {
        CheckContentPermissionService service = new CheckContentPermissionService();
        service.putAllOutput(output.outputMap());
        return service;
    }

    /**
     * Construct a <code>CheckContentPermissionService</code> from the given input <code>Map</code>.
     * @param mapValue the service input <code>Map</code>
     */
    public static CheckContentPermissionService fromInput(Map<String, Object> mapValue) {
        CheckContentPermissionService service = new CheckContentPermissionService();
        service.putAllInput(mapValue);
        if (mapValue.containsKey("userLogin")) {
            GenericValue userGv = (GenericValue) mapValue.get("userLogin");
            if (userGv != null) {
                service.setUser(new User(userGv, userGv.getDelegator()));
            }
        }
        return service;
    }

    /**
     * Construct a <code>CheckContentPermissionService</code> from the given output <code>Map</code>.
     * @param mapValue the service output <code>Map</code>
     */
    public static CheckContentPermissionService fromOutput(Map<String, Object> mapValue) {
        CheckContentPermissionService service = new CheckContentPermissionService();
        service.putAllOutput(mapValue);
        return service;
    }
}
