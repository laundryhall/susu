package org.opentaps.base.services;

/*
 * Copyright (c) Open Source Strategies, Inc.
 *
 * Opentaps is free software: you can redistribute it and/or modify it
 * under the terms of the GNU Affero General Public License as published
 * by the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Opentaps is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with Opentaps.  If not, see <http://www.gnu.org/licenses/>.
 */

// DO NOT EDIT THIS FILE!  THIS IS AUTO GENERATED AND WILL GET WRITTEN OVER PERIODICALLY WHEN THE SERVICE MODEL CHANGES
// EXTEND THIS CLASS INSTEAD.

import org.opentaps.foundation.service.ServiceWrapper;

import java.math.BigDecimal;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import java.util.TimeZone;
import javolution.util.FastMap;
import javolution.util.FastSet;
import org.ofbiz.entity.GenericValue;
import org.ofbiz.order.shoppingcart.ShoppingCart;
import org.opentaps.foundation.infrastructure.User;

/**
 * Get the ShoppingCart data.
 * Auto generated base service entity getShoppingCartData.
 *
 * Engine: java
 * Location: org.ofbiz.order.shoppingcart.ShoppingCartServices
 * Invoke: getShoppingCartData
 * Defined in: applications/order/servicedef/services_cart.xml
 */
public class GetShoppingCartDataService extends ServiceWrapper {

    /** The service name as used by the service engine. */
    public static final String NAME = "getShoppingCartData";
    /** If the service requires authentication. */
    public static final Boolean REQUIRES_AUTHENTICATION = Boolean.FALSE;
    /** If the service requires a new transaction. */
    public static final Boolean REQUIRES_NEW_TRANSACTION = Boolean.FALSE;
    /** If the service uses a transaction. */
    public static final Boolean USES_TRANSACTION = Boolean.TRUE;

    /** The enumeration of input parameters. */
    public static enum In {
        locale("locale"),
        shoppingCart("shoppingCart"),
        timeZone("timeZone"),
        userLogin("userLogin");
        private final String _fieldName;
        private In(String name) { this._fieldName = name; }
        public String getName() { return this._fieldName; }
    }

    public static enum Out {
        cartItemData("cartItemData"),
        currencyIsoCode("currencyIsoCode"),
        displayGrandTotal("displayGrandTotal"),
        displayGrandTotalCurrencyFormatted("displayGrandTotalCurrencyFormatted"),
        displayOrderAdjustmentsTotalCurrencyFormatted("displayOrderAdjustmentsTotalCurrencyFormatted"),
        errorMessage("errorMessage"),
        errorMessageList("errorMessageList"),
        locale("locale"),
        responseMessage("responseMessage"),
        subTotal("subTotal"),
        subTotalCurrencyFormatted("subTotalCurrencyFormatted"),
        successMessage("successMessage"),
        successMessageList("successMessageList"),
        timeZone("timeZone"),
        totalQuantity("totalQuantity"),
        totalSalesTax("totalSalesTax"),
        totalSalesTaxCurrencyFormatted("totalSalesTaxCurrencyFormatted"),
        totalShipping("totalShipping"),
        totalShippingCurrencyFormatted("totalShippingCurrencyFormatted"),
        userLogin("userLogin");
        private final String _fieldName;
        private Out(String name) { this._fieldName = name; }
        public String getName() { return this._fieldName; }
    }

    /**
     * Creates a new <code>GetShoppingCartDataService</code> instance.
     */
    public GetShoppingCartDataService() {
        super();
    }


    private Locale inLocale;
    private ShoppingCart inShoppingCart;
    private TimeZone inTimeZone;
    private GenericValue inUserLogin;
    private Map outCartItemData;
    private String outCurrencyIsoCode;
    private BigDecimal outDisplayGrandTotal;
    private String outDisplayGrandTotalCurrencyFormatted;
    private String outDisplayOrderAdjustmentsTotalCurrencyFormatted;
    private String outErrorMessage;
    private List outErrorMessageList;
    private Locale outLocale;
    private String outResponseMessage;
    private BigDecimal outSubTotal;
    private String outSubTotalCurrencyFormatted;
    private String outSuccessMessage;
    private List outSuccessMessageList;
    private TimeZone outTimeZone;
    private BigDecimal outTotalQuantity;
    private BigDecimal outTotalSalesTax;
    private String outTotalSalesTaxCurrencyFormatted;
    private BigDecimal outTotalShipping;
    private String outTotalShippingCurrencyFormatted;
    private GenericValue outUserLogin;

    private Set<String> inParameters = FastSet.newInstance();
    private Set<String> outParameters = FastSet.newInstance();

    /**
     * Auto generated value accessor.
     * This parameter is optional.
     * @return <code>Locale</code>
     */
    public Locale getInLocale() {
        return this.inLocale;
    }
    /**
     * Auto generated value accessor.
     * This parameter is required.
     * @return <code>ShoppingCart</code>
     */
    public ShoppingCart getInShoppingCart() {
        return this.inShoppingCart;
    }
    /**
     * Auto generated value accessor.
     * This parameter is optional.
     * @return <code>TimeZone</code>
     */
    public TimeZone getInTimeZone() {
        return this.inTimeZone;
    }
    /**
     * Auto generated value accessor.
     * This parameter is optional.
     * @return <code>GenericValue</code>
     */
    public GenericValue getInUserLogin() {
        return this.inUserLogin;
    }
    /**
     * Auto generated value accessor.
     * This parameter is required.
     * @return <code>Map</code>
     */
    public Map getOutCartItemData() {
        return this.outCartItemData;
    }
    /**
     * Auto generated value accessor.
     * This parameter is optional.
     * @return <code>String</code>
     */
    public String getOutCurrencyIsoCode() {
        return this.outCurrencyIsoCode;
    }
    /**
     * Auto generated value accessor.
     * This parameter is optional.
     * @return <code>BigDecimal</code>
     */
    public BigDecimal getOutDisplayGrandTotal() {
        return this.outDisplayGrandTotal;
    }
    /**
     * Auto generated value accessor.
     * This parameter is optional.
     * @return <code>String</code>
     */
    public String getOutDisplayGrandTotalCurrencyFormatted() {
        return this.outDisplayGrandTotalCurrencyFormatted;
    }
    /**
     * Auto generated value accessor.
     * This parameter is optional.
     * @return <code>String</code>
     */
    public String getOutDisplayOrderAdjustmentsTotalCurrencyFormatted() {
        return this.outDisplayOrderAdjustmentsTotalCurrencyFormatted;
    }
    /**
     * Auto generated value accessor.
     * This parameter is optional.
     * @return <code>String</code>
     */
    public String getOutErrorMessage() {
        return this.outErrorMessage;
    }
    /**
     * Auto generated value accessor.
     * This parameter is optional.
     * @return <code>List</code>
     */
    public List getOutErrorMessageList() {
        return this.outErrorMessageList;
    }
    /**
     * Auto generated value accessor.
     * This parameter is optional.
     * @return <code>Locale</code>
     */
    public Locale getOutLocale() {
        return this.outLocale;
    }
    /**
     * Auto generated value accessor.
     * This parameter is optional.
     * @return <code>String</code>
     */
    public String getOutResponseMessage() {
        return this.outResponseMessage;
    }
    /**
     * Auto generated value accessor.
     * This parameter is optional.
     * @return <code>BigDecimal</code>
     */
    public BigDecimal getOutSubTotal() {
        return this.outSubTotal;
    }
    /**
     * Auto generated value accessor.
     * This parameter is optional.
     * @return <code>String</code>
     */
    public String getOutSubTotalCurrencyFormatted() {
        return this.outSubTotalCurrencyFormatted;
    }
    /**
     * Auto generated value accessor.
     * This parameter is optional.
     * @return <code>String</code>
     */
    public String getOutSuccessMessage() {
        return this.outSuccessMessage;
    }
    /**
     * Auto generated value accessor.
     * This parameter is optional.
     * @return <code>List</code>
     */
    public List getOutSuccessMessageList() {
        return this.outSuccessMessageList;
    }
    /**
     * Auto generated value accessor.
     * This parameter is optional.
     * @return <code>TimeZone</code>
     */
    public TimeZone getOutTimeZone() {
        return this.outTimeZone;
    }
    /**
     * Auto generated value accessor.
     * This parameter is optional.
     * @return <code>BigDecimal</code>
     */
    public BigDecimal getOutTotalQuantity() {
        return this.outTotalQuantity;
    }
    /**
     * Auto generated value accessor.
     * This parameter is optional.
     * @return <code>BigDecimal</code>
     */
    public BigDecimal getOutTotalSalesTax() {
        return this.outTotalSalesTax;
    }
    /**
     * Auto generated value accessor.
     * This parameter is optional.
     * @return <code>String</code>
     */
    public String getOutTotalSalesTaxCurrencyFormatted() {
        return this.outTotalSalesTaxCurrencyFormatted;
    }
    /**
     * Auto generated value accessor.
     * This parameter is optional.
     * @return <code>BigDecimal</code>
     */
    public BigDecimal getOutTotalShipping() {
        return this.outTotalShipping;
    }
    /**
     * Auto generated value accessor.
     * This parameter is optional.
     * @return <code>String</code>
     */
    public String getOutTotalShippingCurrencyFormatted() {
        return this.outTotalShippingCurrencyFormatted;
    }
    /**
     * Auto generated value accessor.
     * This parameter is optional.
     * @return <code>GenericValue</code>
     */
    public GenericValue getOutUserLogin() {
        return this.outUserLogin;
    }

    /**
     * Auto generated value setter.
     * This parameter is optional.
     * @param inLocale the inLocale to set
    */
    public void setInLocale(Locale inLocale) {
        this.inParameters.add("locale");
        this.inLocale = inLocale;
    }
    /**
     * Auto generated value setter.
     * This parameter is required.
     * @param inShoppingCart the inShoppingCart to set
    */
    public void setInShoppingCart(ShoppingCart inShoppingCart) {
        this.inParameters.add("shoppingCart");
        this.inShoppingCart = inShoppingCart;
    }
    /**
     * Auto generated value setter.
     * This parameter is optional.
     * @param inTimeZone the inTimeZone to set
    */
    public void setInTimeZone(TimeZone inTimeZone) {
        this.inParameters.add("timeZone");
        this.inTimeZone = inTimeZone;
    }
    /**
     * Auto generated value setter.
     * This parameter is optional.
     * @param inUserLogin the inUserLogin to set
    */
    public void setInUserLogin(GenericValue inUserLogin) {
        this.inParameters.add("userLogin");
        this.inUserLogin = inUserLogin;
    }
    /**
     * Auto generated value setter.
     * This parameter is required.
     * @param outCartItemData the outCartItemData to set
    */
    public void setOutCartItemData(Map outCartItemData) {
        this.outParameters.add("cartItemData");
        this.outCartItemData = outCartItemData;
    }
    /**
     * Auto generated value setter.
     * This parameter is optional.
     * @param outCurrencyIsoCode the outCurrencyIsoCode to set
    */
    public void setOutCurrencyIsoCode(String outCurrencyIsoCode) {
        this.outParameters.add("currencyIsoCode");
        this.outCurrencyIsoCode = outCurrencyIsoCode;
    }
    /**
     * Auto generated value setter.
     * This parameter is optional.
     * @param outDisplayGrandTotal the outDisplayGrandTotal to set
    */
    public void setOutDisplayGrandTotal(BigDecimal outDisplayGrandTotal) {
        this.outParameters.add("displayGrandTotal");
        this.outDisplayGrandTotal = outDisplayGrandTotal;
    }
    /**
     * Auto generated value setter.
     * This parameter is optional.
     * @param outDisplayGrandTotalCurrencyFormatted the outDisplayGrandTotalCurrencyFormatted to set
    */
    public void setOutDisplayGrandTotalCurrencyFormatted(String outDisplayGrandTotalCurrencyFormatted) {
        this.outParameters.add("displayGrandTotalCurrencyFormatted");
        this.outDisplayGrandTotalCurrencyFormatted = outDisplayGrandTotalCurrencyFormatted;
    }
    /**
     * Auto generated value setter.
     * This parameter is optional.
     * @param outDisplayOrderAdjustmentsTotalCurrencyFormatted the outDisplayOrderAdjustmentsTotalCurrencyFormatted to set
    */
    public void setOutDisplayOrderAdjustmentsTotalCurrencyFormatted(String outDisplayOrderAdjustmentsTotalCurrencyFormatted) {
        this.outParameters.add("displayOrderAdjustmentsTotalCurrencyFormatted");
        this.outDisplayOrderAdjustmentsTotalCurrencyFormatted = outDisplayOrderAdjustmentsTotalCurrencyFormatted;
    }
    /**
     * Auto generated value setter.
     * This parameter is optional.
     * @param outErrorMessage the outErrorMessage to set
    */
    public void setOutErrorMessage(String outErrorMessage) {
        this.outParameters.add("errorMessage");
        this.outErrorMessage = outErrorMessage;
    }
    /**
     * Auto generated value setter.
     * This parameter is optional.
     * @param outErrorMessageList the outErrorMessageList to set
    */
    public void setOutErrorMessageList(List outErrorMessageList) {
        this.outParameters.add("errorMessageList");
        this.outErrorMessageList = outErrorMessageList;
    }
    /**
     * Auto generated value setter.
     * This parameter is optional.
     * @param outLocale the outLocale to set
    */
    public void setOutLocale(Locale outLocale) {
        this.outParameters.add("locale");
        this.outLocale = outLocale;
    }
    /**
     * Auto generated value setter.
     * This parameter is optional.
     * @param outResponseMessage the outResponseMessage to set
    */
    public void setOutResponseMessage(String outResponseMessage) {
        this.outParameters.add("responseMessage");
        this.outResponseMessage = outResponseMessage;
    }
    /**
     * Auto generated value setter.
     * This parameter is optional.
     * @param outSubTotal the outSubTotal to set
    */
    public void setOutSubTotal(BigDecimal outSubTotal) {
        this.outParameters.add("subTotal");
        this.outSubTotal = outSubTotal;
    }
    /**
     * Auto generated value setter.
     * This parameter is optional.
     * @param outSubTotalCurrencyFormatted the outSubTotalCurrencyFormatted to set
    */
    public void setOutSubTotalCurrencyFormatted(String outSubTotalCurrencyFormatted) {
        this.outParameters.add("subTotalCurrencyFormatted");
        this.outSubTotalCurrencyFormatted = outSubTotalCurrencyFormatted;
    }
    /**
     * Auto generated value setter.
     * This parameter is optional.
     * @param outSuccessMessage the outSuccessMessage to set
    */
    public void setOutSuccessMessage(String outSuccessMessage) {
        this.outParameters.add("successMessage");
        this.outSuccessMessage = outSuccessMessage;
    }
    /**
     * Auto generated value setter.
     * This parameter is optional.
     * @param outSuccessMessageList the outSuccessMessageList to set
    */
    public void setOutSuccessMessageList(List outSuccessMessageList) {
        this.outParameters.add("successMessageList");
        this.outSuccessMessageList = outSuccessMessageList;
    }
    /**
     * Auto generated value setter.
     * This parameter is optional.
     * @param outTimeZone the outTimeZone to set
    */
    public void setOutTimeZone(TimeZone outTimeZone) {
        this.outParameters.add("timeZone");
        this.outTimeZone = outTimeZone;
    }
    /**
     * Auto generated value setter.
     * This parameter is optional.
     * @param outTotalQuantity the outTotalQuantity to set
    */
    public void setOutTotalQuantity(BigDecimal outTotalQuantity) {
        this.outParameters.add("totalQuantity");
        this.outTotalQuantity = outTotalQuantity;
    }
    /**
     * Auto generated value setter.
     * This parameter is optional.
     * @param outTotalSalesTax the outTotalSalesTax to set
    */
    public void setOutTotalSalesTax(BigDecimal outTotalSalesTax) {
        this.outParameters.add("totalSalesTax");
        this.outTotalSalesTax = outTotalSalesTax;
    }
    /**
     * Auto generated value setter.
     * This parameter is optional.
     * @param outTotalSalesTaxCurrencyFormatted the outTotalSalesTaxCurrencyFormatted to set
    */
    public void setOutTotalSalesTaxCurrencyFormatted(String outTotalSalesTaxCurrencyFormatted) {
        this.outParameters.add("totalSalesTaxCurrencyFormatted");
        this.outTotalSalesTaxCurrencyFormatted = outTotalSalesTaxCurrencyFormatted;
    }
    /**
     * Auto generated value setter.
     * This parameter is optional.
     * @param outTotalShipping the outTotalShipping to set
    */
    public void setOutTotalShipping(BigDecimal outTotalShipping) {
        this.outParameters.add("totalShipping");
        this.outTotalShipping = outTotalShipping;
    }
    /**
     * Auto generated value setter.
     * This parameter is optional.
     * @param outTotalShippingCurrencyFormatted the outTotalShippingCurrencyFormatted to set
    */
    public void setOutTotalShippingCurrencyFormatted(String outTotalShippingCurrencyFormatted) {
        this.outParameters.add("totalShippingCurrencyFormatted");
        this.outTotalShippingCurrencyFormatted = outTotalShippingCurrencyFormatted;
    }
    /**
     * Auto generated value setter.
     * This parameter is optional.
     * @param outUserLogin the outUserLogin to set
    */
    public void setOutUserLogin(GenericValue outUserLogin) {
        this.outParameters.add("userLogin");
        this.outUserLogin = outUserLogin;
    }

    /** {@inheritDoc} */
    public String name() {
        return NAME;
    }

    /** {@inheritDoc} */
    public Boolean requiresAuthentication() {
        return REQUIRES_AUTHENTICATION;
    }

    /** {@inheritDoc} */
    public Boolean requiresNewTransaction() {
        return REQUIRES_NEW_TRANSACTION;
    }

    /** {@inheritDoc} */
    public Boolean usesTransaction() {
        return USES_TRANSACTION;
    }

    /** {@inheritDoc} */
    public Map<String, Object> inputMap() {
        Map<String, Object> mapValue = new FastMap<String, Object>();
        if (inParameters.contains("locale")) mapValue.put("locale", getInLocale());
        if (inParameters.contains("shoppingCart")) mapValue.put("shoppingCart", getInShoppingCart());
        if (inParameters.contains("timeZone")) mapValue.put("timeZone", getInTimeZone());
        if (inParameters.contains("userLogin")) mapValue.put("userLogin", getInUserLogin());
        // allow the User set to override the userLogin
        if (getUser() != null) mapValue.put("userLogin", getUser().getOfbizUserLogin());
        return mapValue;
    }

    /** {@inheritDoc} */
    public Map<String, Object> outputMap() {
        Map<String, Object> mapValue = new FastMap<String, Object>();
        if (outParameters.contains("cartItemData")) mapValue.put("cartItemData", getOutCartItemData());
        if (outParameters.contains("currencyIsoCode")) mapValue.put("currencyIsoCode", getOutCurrencyIsoCode());
        if (outParameters.contains("displayGrandTotal")) mapValue.put("displayGrandTotal", getOutDisplayGrandTotal());
        if (outParameters.contains("displayGrandTotalCurrencyFormatted")) mapValue.put("displayGrandTotalCurrencyFormatted", getOutDisplayGrandTotalCurrencyFormatted());
        if (outParameters.contains("displayOrderAdjustmentsTotalCurrencyFormatted")) mapValue.put("displayOrderAdjustmentsTotalCurrencyFormatted", getOutDisplayOrderAdjustmentsTotalCurrencyFormatted());
        if (outParameters.contains("errorMessage")) mapValue.put("errorMessage", getOutErrorMessage());
        if (outParameters.contains("errorMessageList")) mapValue.put("errorMessageList", getOutErrorMessageList());
        if (outParameters.contains("locale")) mapValue.put("locale", getOutLocale());
        if (outParameters.contains("responseMessage")) mapValue.put("responseMessage", getOutResponseMessage());
        if (outParameters.contains("subTotal")) mapValue.put("subTotal", getOutSubTotal());
        if (outParameters.contains("subTotalCurrencyFormatted")) mapValue.put("subTotalCurrencyFormatted", getOutSubTotalCurrencyFormatted());
        if (outParameters.contains("successMessage")) mapValue.put("successMessage", getOutSuccessMessage());
        if (outParameters.contains("successMessageList")) mapValue.put("successMessageList", getOutSuccessMessageList());
        if (outParameters.contains("timeZone")) mapValue.put("timeZone", getOutTimeZone());
        if (outParameters.contains("totalQuantity")) mapValue.put("totalQuantity", getOutTotalQuantity());
        if (outParameters.contains("totalSalesTax")) mapValue.put("totalSalesTax", getOutTotalSalesTax());
        if (outParameters.contains("totalSalesTaxCurrencyFormatted")) mapValue.put("totalSalesTaxCurrencyFormatted", getOutTotalSalesTaxCurrencyFormatted());
        if (outParameters.contains("totalShipping")) mapValue.put("totalShipping", getOutTotalShipping());
        if (outParameters.contains("totalShippingCurrencyFormatted")) mapValue.put("totalShippingCurrencyFormatted", getOutTotalShippingCurrencyFormatted());
        if (outParameters.contains("userLogin")) mapValue.put("userLogin", getOutUserLogin());
        return mapValue;
    }

    /** {@inheritDoc} */
    public void putAllInput(Map<String, Object> mapValue) {
        if (mapValue.containsKey("locale")) setInLocale((Locale) mapValue.get("locale"));
        if (mapValue.containsKey("shoppingCart")) setInShoppingCart((ShoppingCart) mapValue.get("shoppingCart"));
        if (mapValue.containsKey("timeZone")) setInTimeZone((TimeZone) mapValue.get("timeZone"));
        if (mapValue.containsKey("userLogin")) setInUserLogin((GenericValue) mapValue.get("userLogin"));
    }

    /** {@inheritDoc} */
    public void putAllOutput(Map<String, Object> mapValue) {
        if (mapValue.containsKey("cartItemData")) setOutCartItemData((Map) mapValue.get("cartItemData"));
        if (mapValue.containsKey("currencyIsoCode")) setOutCurrencyIsoCode((String) mapValue.get("currencyIsoCode"));
        if (mapValue.containsKey("displayGrandTotal")) setOutDisplayGrandTotal((BigDecimal) mapValue.get("displayGrandTotal"));
        if (mapValue.containsKey("displayGrandTotalCurrencyFormatted")) setOutDisplayGrandTotalCurrencyFormatted((String) mapValue.get("displayGrandTotalCurrencyFormatted"));
        if (mapValue.containsKey("displayOrderAdjustmentsTotalCurrencyFormatted")) setOutDisplayOrderAdjustmentsTotalCurrencyFormatted((String) mapValue.get("displayOrderAdjustmentsTotalCurrencyFormatted"));
        if (mapValue.containsKey("errorMessage")) setOutErrorMessage((String) mapValue.get("errorMessage"));
        if (mapValue.containsKey("errorMessageList")) setOutErrorMessageList((List) mapValue.get("errorMessageList"));
        if (mapValue.containsKey("locale")) setOutLocale((Locale) mapValue.get("locale"));
        if (mapValue.containsKey("responseMessage")) setOutResponseMessage((String) mapValue.get("responseMessage"));
        if (mapValue.containsKey("subTotal")) setOutSubTotal((BigDecimal) mapValue.get("subTotal"));
        if (mapValue.containsKey("subTotalCurrencyFormatted")) setOutSubTotalCurrencyFormatted((String) mapValue.get("subTotalCurrencyFormatted"));
        if (mapValue.containsKey("successMessage")) setOutSuccessMessage((String) mapValue.get("successMessage"));
        if (mapValue.containsKey("successMessageList")) setOutSuccessMessageList((List) mapValue.get("successMessageList"));
        if (mapValue.containsKey("timeZone")) setOutTimeZone((TimeZone) mapValue.get("timeZone"));
        if (mapValue.containsKey("totalQuantity")) setOutTotalQuantity((BigDecimal) mapValue.get("totalQuantity"));
        if (mapValue.containsKey("totalSalesTax")) setOutTotalSalesTax((BigDecimal) mapValue.get("totalSalesTax"));
        if (mapValue.containsKey("totalSalesTaxCurrencyFormatted")) setOutTotalSalesTaxCurrencyFormatted((String) mapValue.get("totalSalesTaxCurrencyFormatted"));
        if (mapValue.containsKey("totalShipping")) setOutTotalShipping((BigDecimal) mapValue.get("totalShipping"));
        if (mapValue.containsKey("totalShippingCurrencyFormatted")) setOutTotalShippingCurrencyFormatted((String) mapValue.get("totalShippingCurrencyFormatted"));
        if (mapValue.containsKey("userLogin")) setOutUserLogin((GenericValue) mapValue.get("userLogin"));
    }

    /**
     * Construct a <code>GetShoppingCartDataService</code> from the input values of the given <code>GetShoppingCartDataService</code>.
     * @param input a <code>GetShoppingCartDataService</code>
     */
    public static GetShoppingCartDataService fromInput(GetShoppingCartDataService input) {
        GetShoppingCartDataService service = new GetShoppingCartDataService();
        return fromInput(input.inputMap());
    }

    /**
     * Construct a <code>GetShoppingCartDataService</code> from the output values of the given <code>GetShoppingCartDataService</code>.
     * @param output a <code>GetShoppingCartDataService</code>
     */
    public static GetShoppingCartDataService fromOutput(GetShoppingCartDataService output) {
        GetShoppingCartDataService service = new GetShoppingCartDataService();
        service.putAllOutput(output.outputMap());
        return service;
    }

    /**
     * Construct a <code>GetShoppingCartDataService</code> from the given input <code>Map</code>.
     * @param mapValue the service input <code>Map</code>
     */
    public static GetShoppingCartDataService fromInput(Map<String, Object> mapValue) {
        GetShoppingCartDataService service = new GetShoppingCartDataService();
        service.putAllInput(mapValue);
        if (mapValue.containsKey("userLogin")) {
            GenericValue userGv = (GenericValue) mapValue.get("userLogin");
            if (userGv != null) {
                service.setUser(new User(userGv, userGv.getDelegator()));
            }
        }
        return service;
    }

    /**
     * Construct a <code>GetShoppingCartDataService</code> from the given output <code>Map</code>.
     * @param mapValue the service output <code>Map</code>
     */
    public static GetShoppingCartDataService fromOutput(Map<String, Object> mapValue) {
        GetShoppingCartDataService service = new GetShoppingCartDataService();
        service.putAllOutput(mapValue);
        return service;
    }
}
