package org.opentaps.base.services;

/*
 * Copyright (c) Open Source Strategies, Inc.
 *
 * Opentaps is free software: you can redistribute it and/or modify it
 * under the terms of the GNU Affero General Public License as published
 * by the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Opentaps is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with Opentaps.  If not, see <http://www.gnu.org/licenses/>.
 */

// DO NOT EDIT THIS FILE!  THIS IS AUTO GENERATED AND WILL GET WRITTEN OVER PERIODICALLY WHEN THE SERVICE MODEL CHANGES
// EXTEND THIS CLASS INSTEAD.

import org.opentaps.foundation.service.ServiceWrapper;

import java.sql.Timestamp;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import java.util.TimeZone;
import javolution.util.FastMap;
import javolution.util.FastSet;
import org.ofbiz.entity.GenericValue;
import org.opentaps.foundation.infrastructure.User;

/**
 * A test service of the POJO service engine.
 * Auto generated base service entity pojoTest.
 *
 * Engine: pojo
 * Location: org.opentaps.tests.service.POJOTestServices
 * Invoke: pojoTest
 * Defined in: hot-deploy/opentaps-tests/servicedef/services_pojo_tests.xml
 */
public class PojoTestService extends ServiceWrapper {

    /** The service name as used by the service engine. */
    public static final String NAME = "pojoTest";
    /** If the service requires authentication. */
    public static final Boolean REQUIRES_AUTHENTICATION = Boolean.TRUE;
    /** If the service requires a new transaction. */
    public static final Boolean REQUIRES_NEW_TRANSACTION = Boolean.FALSE;
    /** If the service uses a transaction. */
    public static final Boolean USES_TRANSACTION = Boolean.TRUE;

    /** The enumeration of input parameters. */
    public static enum In {
        errorTrigger("errorTrigger"),
        failTrigger("failTrigger"),
        followupTrigger("followupTrigger"),
        key1Value("key1Value"),
        key2Values("key2Values"),
        locale("locale"),
        testTimestamp("testTimestamp"),
        timeZone("timeZone"),
        userLogin("userLogin");
        private final String _fieldName;
        private In(String name) { this._fieldName = name; }
        public String getName() { return this._fieldName; }
    }

    public static enum Out {
        errorMessage("errorMessage"),
        errorMessageList("errorMessageList"),
        key1Value("key1Value"),
        key2Values("key2Values"),
        locale("locale"),
        responseMessage("responseMessage"),
        successMessage("successMessage"),
        successMessageList("successMessageList"),
        timeZone("timeZone"),
        triggerEca("triggerEca"),
        userLogin("userLogin");
        private final String _fieldName;
        private Out(String name) { this._fieldName = name; }
        public String getName() { return this._fieldName; }
    }

    /**
     * Creates a new <code>PojoTestService</code> instance.
     */
    public PojoTestService() {
        super();
    }

    /**
     * Creates a new <code>PojoTestService</code> instance.
     * @param user an <code>User</code> value
     */
    public PojoTestService(User user) {
        super(user);
    }

    private Boolean inErrorTrigger;
    private Boolean inFailTrigger;
    private Boolean inFollowupTrigger;
    private String inKey1Value;
    private List inKey2Values;
    private Locale inLocale;
    private Timestamp inTestTimestamp;
    private TimeZone inTimeZone;
    private GenericValue inUserLogin;
    private String outErrorMessage;
    private List outErrorMessageList;
    private String outKey1Value;
    private List outKey2Values;
    private Locale outLocale;
    private String outResponseMessage;
    private String outSuccessMessage;
    private List outSuccessMessageList;
    private TimeZone outTimeZone;
    private String outTriggerEca;
    private GenericValue outUserLogin;

    private Set<String> inParameters = FastSet.newInstance();
    private Set<String> outParameters = FastSet.newInstance();

    /**
     * Auto generated value accessor.
     * This parameter is optional.
     * @return <code>Boolean</code>
     */
    public Boolean getInErrorTrigger() {
        return this.inErrorTrigger;
    }
    /**
     * Auto generated value accessor.
     * This parameter is optional.
     * @return <code>Boolean</code>
     */
    public Boolean getInFailTrigger() {
        return this.inFailTrigger;
    }
    /**
     * Auto generated value accessor.
     * This parameter is optional.
     * @return <code>Boolean</code>
     */
    public Boolean getInFollowupTrigger() {
        return this.inFollowupTrigger;
    }
    /**
     * Auto generated value accessor.
     * This parameter is required.
     * @return <code>String</code>
     */
    public String getInKey1Value() {
        return this.inKey1Value;
    }
    /**
     * Auto generated value accessor.
     * This parameter is required.
     * @return <code>List</code>
     */
    public List getInKey2Values() {
        return this.inKey2Values;
    }
    /**
     * Auto generated value accessor.
     * This parameter is optional.
     * @return <code>Locale</code>
     */
    public Locale getInLocale() {
        return this.inLocale;
    }
    /**
     * Auto generated value accessor.
     * This parameter is optional.
     * @return <code>Timestamp</code>
     */
    public Timestamp getInTestTimestamp() {
        return this.inTestTimestamp;
    }
    /**
     * Auto generated value accessor.
     * This parameter is optional.
     * @return <code>TimeZone</code>
     */
    public TimeZone getInTimeZone() {
        return this.inTimeZone;
    }
    /**
     * Auto generated value accessor.
     * This parameter is optional.
     * @return <code>GenericValue</code>
     */
    public GenericValue getInUserLogin() {
        return this.inUserLogin;
    }
    /**
     * Auto generated value accessor.
     * This parameter is optional.
     * @return <code>String</code>
     */
    public String getOutErrorMessage() {
        return this.outErrorMessage;
    }
    /**
     * Auto generated value accessor.
     * This parameter is optional.
     * @return <code>List</code>
     */
    public List getOutErrorMessageList() {
        return this.outErrorMessageList;
    }
    /**
     * Auto generated value accessor.
     * This parameter is required.
     * @return <code>String</code>
     */
    public String getOutKey1Value() {
        return this.outKey1Value;
    }
    /**
     * Auto generated value accessor.
     * This parameter is required.
     * @return <code>List</code>
     */
    public List getOutKey2Values() {
        return this.outKey2Values;
    }
    /**
     * Auto generated value accessor.
     * This parameter is optional.
     * @return <code>Locale</code>
     */
    public Locale getOutLocale() {
        return this.outLocale;
    }
    /**
     * Auto generated value accessor.
     * This parameter is optional.
     * @return <code>String</code>
     */
    public String getOutResponseMessage() {
        return this.outResponseMessage;
    }
    /**
     * Auto generated value accessor.
     * This parameter is optional.
     * @return <code>String</code>
     */
    public String getOutSuccessMessage() {
        return this.outSuccessMessage;
    }
    /**
     * Auto generated value accessor.
     * This parameter is optional.
     * @return <code>List</code>
     */
    public List getOutSuccessMessageList() {
        return this.outSuccessMessageList;
    }
    /**
     * Auto generated value accessor.
     * This parameter is optional.
     * @return <code>TimeZone</code>
     */
    public TimeZone getOutTimeZone() {
        return this.outTimeZone;
    }
    /**
     * Auto generated value accessor.
     * This parameter is optional.
     * @return <code>String</code>
     */
    public String getOutTriggerEca() {
        return this.outTriggerEca;
    }
    /**
     * Auto generated value accessor.
     * This parameter is optional.
     * @return <code>GenericValue</code>
     */
    public GenericValue getOutUserLogin() {
        return this.outUserLogin;
    }

    /**
     * Auto generated value setter.
     * This parameter is optional.
     * @param inErrorTrigger the inErrorTrigger to set
    */
    public void setInErrorTrigger(Boolean inErrorTrigger) {
        this.inParameters.add("errorTrigger");
        this.inErrorTrigger = inErrorTrigger;
    }
    /**
     * Auto generated value setter.
     * This parameter is optional.
     * @param inFailTrigger the inFailTrigger to set
    */
    public void setInFailTrigger(Boolean inFailTrigger) {
        this.inParameters.add("failTrigger");
        this.inFailTrigger = inFailTrigger;
    }
    /**
     * Auto generated value setter.
     * This parameter is optional.
     * @param inFollowupTrigger the inFollowupTrigger to set
    */
    public void setInFollowupTrigger(Boolean inFollowupTrigger) {
        this.inParameters.add("followupTrigger");
        this.inFollowupTrigger = inFollowupTrigger;
    }
    /**
     * Auto generated value setter.
     * This parameter is required.
     * @param inKey1Value the inKey1Value to set
    */
    public void setInKey1Value(String inKey1Value) {
        this.inParameters.add("key1Value");
        this.inKey1Value = inKey1Value;
    }
    /**
     * Auto generated value setter.
     * This parameter is required.
     * @param inKey2Values the inKey2Values to set
    */
    public void setInKey2Values(List inKey2Values) {
        this.inParameters.add("key2Values");
        this.inKey2Values = inKey2Values;
    }
    /**
     * Auto generated value setter.
     * This parameter is optional.
     * @param inLocale the inLocale to set
    */
    public void setInLocale(Locale inLocale) {
        this.inParameters.add("locale");
        this.inLocale = inLocale;
    }
    /**
     * Auto generated value setter.
     * This parameter is optional.
     * @param inTestTimestamp the inTestTimestamp to set
    */
    public void setInTestTimestamp(Timestamp inTestTimestamp) {
        this.inParameters.add("testTimestamp");
        this.inTestTimestamp = inTestTimestamp;
    }
    /**
     * Auto generated value setter.
     * This parameter is optional.
     * @param inTimeZone the inTimeZone to set
    */
    public void setInTimeZone(TimeZone inTimeZone) {
        this.inParameters.add("timeZone");
        this.inTimeZone = inTimeZone;
    }
    /**
     * Auto generated value setter.
     * This parameter is optional.
     * @param inUserLogin the inUserLogin to set
    */
    public void setInUserLogin(GenericValue inUserLogin) {
        this.inParameters.add("userLogin");
        this.inUserLogin = inUserLogin;
    }
    /**
     * Auto generated value setter.
     * This parameter is optional.
     * @param outErrorMessage the outErrorMessage to set
    */
    public void setOutErrorMessage(String outErrorMessage) {
        this.outParameters.add("errorMessage");
        this.outErrorMessage = outErrorMessage;
    }
    /**
     * Auto generated value setter.
     * This parameter is optional.
     * @param outErrorMessageList the outErrorMessageList to set
    */
    public void setOutErrorMessageList(List outErrorMessageList) {
        this.outParameters.add("errorMessageList");
        this.outErrorMessageList = outErrorMessageList;
    }
    /**
     * Auto generated value setter.
     * This parameter is required.
     * @param outKey1Value the outKey1Value to set
    */
    public void setOutKey1Value(String outKey1Value) {
        this.outParameters.add("key1Value");
        this.outKey1Value = outKey1Value;
    }
    /**
     * Auto generated value setter.
     * This parameter is required.
     * @param outKey2Values the outKey2Values to set
    */
    public void setOutKey2Values(List outKey2Values) {
        this.outParameters.add("key2Values");
        this.outKey2Values = outKey2Values;
    }
    /**
     * Auto generated value setter.
     * This parameter is optional.
     * @param outLocale the outLocale to set
    */
    public void setOutLocale(Locale outLocale) {
        this.outParameters.add("locale");
        this.outLocale = outLocale;
    }
    /**
     * Auto generated value setter.
     * This parameter is optional.
     * @param outResponseMessage the outResponseMessage to set
    */
    public void setOutResponseMessage(String outResponseMessage) {
        this.outParameters.add("responseMessage");
        this.outResponseMessage = outResponseMessage;
    }
    /**
     * Auto generated value setter.
     * This parameter is optional.
     * @param outSuccessMessage the outSuccessMessage to set
    */
    public void setOutSuccessMessage(String outSuccessMessage) {
        this.outParameters.add("successMessage");
        this.outSuccessMessage = outSuccessMessage;
    }
    /**
     * Auto generated value setter.
     * This parameter is optional.
     * @param outSuccessMessageList the outSuccessMessageList to set
    */
    public void setOutSuccessMessageList(List outSuccessMessageList) {
        this.outParameters.add("successMessageList");
        this.outSuccessMessageList = outSuccessMessageList;
    }
    /**
     * Auto generated value setter.
     * This parameter is optional.
     * @param outTimeZone the outTimeZone to set
    */
    public void setOutTimeZone(TimeZone outTimeZone) {
        this.outParameters.add("timeZone");
        this.outTimeZone = outTimeZone;
    }
    /**
     * Auto generated value setter.
     * This parameter is optional.
     * @param outTriggerEca the outTriggerEca to set
    */
    public void setOutTriggerEca(String outTriggerEca) {
        this.outParameters.add("triggerEca");
        this.outTriggerEca = outTriggerEca;
    }
    /**
     * Auto generated value setter.
     * This parameter is optional.
     * @param outUserLogin the outUserLogin to set
    */
    public void setOutUserLogin(GenericValue outUserLogin) {
        this.outParameters.add("userLogin");
        this.outUserLogin = outUserLogin;
    }

    /** {@inheritDoc} */
    public String name() {
        return NAME;
    }

    /** {@inheritDoc} */
    public Boolean requiresAuthentication() {
        return REQUIRES_AUTHENTICATION;
    }

    /** {@inheritDoc} */
    public Boolean requiresNewTransaction() {
        return REQUIRES_NEW_TRANSACTION;
    }

    /** {@inheritDoc} */
    public Boolean usesTransaction() {
        return USES_TRANSACTION;
    }

    /** {@inheritDoc} */
    public Map<String, Object> inputMap() {
        Map<String, Object> mapValue = new FastMap<String, Object>();
        if (inParameters.contains("errorTrigger")) mapValue.put("errorTrigger", getInErrorTrigger());
        if (inParameters.contains("failTrigger")) mapValue.put("failTrigger", getInFailTrigger());
        if (inParameters.contains("followupTrigger")) mapValue.put("followupTrigger", getInFollowupTrigger());
        if (inParameters.contains("key1Value")) mapValue.put("key1Value", getInKey1Value());
        if (inParameters.contains("key2Values")) mapValue.put("key2Values", getInKey2Values());
        if (inParameters.contains("locale")) mapValue.put("locale", getInLocale());
        if (inParameters.contains("testTimestamp")) mapValue.put("testTimestamp", getInTestTimestamp());
        if (inParameters.contains("timeZone")) mapValue.put("timeZone", getInTimeZone());
        if (inParameters.contains("userLogin")) mapValue.put("userLogin", getInUserLogin());
        // allow the User set to override the userLogin
        if (getUser() != null) mapValue.put("userLogin", getUser().getOfbizUserLogin());
        return mapValue;
    }

    /** {@inheritDoc} */
    public Map<String, Object> outputMap() {
        Map<String, Object> mapValue = new FastMap<String, Object>();
        if (outParameters.contains("errorMessage")) mapValue.put("errorMessage", getOutErrorMessage());
        if (outParameters.contains("errorMessageList")) mapValue.put("errorMessageList", getOutErrorMessageList());
        if (outParameters.contains("key1Value")) mapValue.put("key1Value", getOutKey1Value());
        if (outParameters.contains("key2Values")) mapValue.put("key2Values", getOutKey2Values());
        if (outParameters.contains("locale")) mapValue.put("locale", getOutLocale());
        if (outParameters.contains("responseMessage")) mapValue.put("responseMessage", getOutResponseMessage());
        if (outParameters.contains("successMessage")) mapValue.put("successMessage", getOutSuccessMessage());
        if (outParameters.contains("successMessageList")) mapValue.put("successMessageList", getOutSuccessMessageList());
        if (outParameters.contains("timeZone")) mapValue.put("timeZone", getOutTimeZone());
        if (outParameters.contains("triggerEca")) mapValue.put("triggerEca", getOutTriggerEca());
        if (outParameters.contains("userLogin")) mapValue.put("userLogin", getOutUserLogin());
        return mapValue;
    }

    /** {@inheritDoc} */
    public void putAllInput(Map<String, Object> mapValue) {
        if (mapValue.containsKey("errorTrigger")) setInErrorTrigger((Boolean) mapValue.get("errorTrigger"));
        if (mapValue.containsKey("failTrigger")) setInFailTrigger((Boolean) mapValue.get("failTrigger"));
        if (mapValue.containsKey("followupTrigger")) setInFollowupTrigger((Boolean) mapValue.get("followupTrigger"));
        if (mapValue.containsKey("key1Value")) setInKey1Value((String) mapValue.get("key1Value"));
        if (mapValue.containsKey("key2Values")) setInKey2Values((List) mapValue.get("key2Values"));
        if (mapValue.containsKey("locale")) setInLocale((Locale) mapValue.get("locale"));
        if (mapValue.containsKey("testTimestamp")) setInTestTimestamp((Timestamp) mapValue.get("testTimestamp"));
        if (mapValue.containsKey("timeZone")) setInTimeZone((TimeZone) mapValue.get("timeZone"));
        if (mapValue.containsKey("userLogin")) setInUserLogin((GenericValue) mapValue.get("userLogin"));
    }

    /** {@inheritDoc} */
    public void putAllOutput(Map<String, Object> mapValue) {
        if (mapValue.containsKey("errorMessage")) setOutErrorMessage((String) mapValue.get("errorMessage"));
        if (mapValue.containsKey("errorMessageList")) setOutErrorMessageList((List) mapValue.get("errorMessageList"));
        if (mapValue.containsKey("key1Value")) setOutKey1Value((String) mapValue.get("key1Value"));
        if (mapValue.containsKey("key2Values")) setOutKey2Values((List) mapValue.get("key2Values"));
        if (mapValue.containsKey("locale")) setOutLocale((Locale) mapValue.get("locale"));
        if (mapValue.containsKey("responseMessage")) setOutResponseMessage((String) mapValue.get("responseMessage"));
        if (mapValue.containsKey("successMessage")) setOutSuccessMessage((String) mapValue.get("successMessage"));
        if (mapValue.containsKey("successMessageList")) setOutSuccessMessageList((List) mapValue.get("successMessageList"));
        if (mapValue.containsKey("timeZone")) setOutTimeZone((TimeZone) mapValue.get("timeZone"));
        if (mapValue.containsKey("triggerEca")) setOutTriggerEca((String) mapValue.get("triggerEca"));
        if (mapValue.containsKey("userLogin")) setOutUserLogin((GenericValue) mapValue.get("userLogin"));
    }

    /**
     * Construct a <code>PojoTestService</code> from the input values of the given <code>PojoTestService</code>.
     * @param input a <code>PojoTestService</code>
     */
    public static PojoTestService fromInput(PojoTestService input) {
        PojoTestService service = new PojoTestService();
        return fromInput(input.inputMap());
    }

    /**
     * Construct a <code>PojoTestService</code> from the output values of the given <code>PojoTestService</code>.
     * @param output a <code>PojoTestService</code>
     */
    public static PojoTestService fromOutput(PojoTestService output) {
        PojoTestService service = new PojoTestService();
        service.putAllOutput(output.outputMap());
        return service;
    }

    /**
     * Construct a <code>PojoTestService</code> from the given input <code>Map</code>.
     * @param mapValue the service input <code>Map</code>
     */
    public static PojoTestService fromInput(Map<String, Object> mapValue) {
        PojoTestService service = new PojoTestService();
        service.putAllInput(mapValue);
        if (mapValue.containsKey("userLogin")) {
            GenericValue userGv = (GenericValue) mapValue.get("userLogin");
            if (userGv != null) {
                service.setUser(new User(userGv, userGv.getDelegator()));
            }
        }
        return service;
    }

    /**
     * Construct a <code>PojoTestService</code> from the given output <code>Map</code>.
     * @param mapValue the service output <code>Map</code>
     */
    public static PojoTestService fromOutput(Map<String, Object> mapValue) {
        PojoTestService service = new PojoTestService();
        service.putAllOutput(mapValue);
        return service;
    }
}
