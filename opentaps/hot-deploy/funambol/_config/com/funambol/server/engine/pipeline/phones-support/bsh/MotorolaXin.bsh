/*
 * Copyright (C) 2006-2007 Funambol
 *
 * Opentaps is free software: you can redistribute it and/or modify it
 * under the terms of the GNU Affero General Public License as published
 * by the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Opentaps is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with Opentaps.  If not, see <http://www.gnu.org/licenses/>.
 */

import java.util.List;
import java.util.Map;

import com.funambol.framework.core.*;
import com.funambol.framework.core.Sync4jException;
import com.funambol.framework.engine.pipeline.InputMessageProcessor;
import com.funambol.framework.engine.pipeline.MessageProcessingContext;
import com.funambol.framework.engine.pipeline.StopProcessingException;
import com.funambol.framework.logging.FunambolLogger;
import com.funambol.framework.logging.FunambolLoggerFactory;

import com.funambol.foundation.synclet.PIMItemsHandler;

/**
 * Contacts:
 * =========
 * Handles large objects.
 * Replaces the first TEL;FAX: with tokens TEL;FAX;HOME: and the second one
 * with TEL;FAX;WORK: so the numbers are stored like Home Fax Number and
 * Business Fax Number.
 * Replaces the first TEL;PREF;VOICE: with tokens TEL;VOICE: the second remains
 * the same, the third is replaced with TEL;WORK;PREF:
 * Checks if the value of the field EMAIL;INTERNET is 'null'. If so the value is
 * deleted.
 * Checks if the value of the field N has only one value or more separeted by
 * semicolons. If there are no semicolon, they are added.
 * Adds field ADR;HOME with empty value if not exists, otherwise switch second
 * and third value.
 *
 * Calendars:
 * ==========
 * . Event
 *   Handles large objects.
 *   Adds field AALARM with empty value if not exists.
 *
 * @version $Id: MotorolaXin.bsh,v 1.4 2007/04/13 09:09:12 luigiafassina Exp $
 */
 
// ------------------------------------------------------------------- Constants
private final FunambolLogger log =
    FunambolLoggerFactory.getLogger("engine.pipeline");

// ------------------------------------------------------ Synclet implementation
/**
 * Process input message and set MessageProcessingContext property.
 *
 * @param processingContext the message processing context
 * @param message the message to be processed
 *
 * @throws Sync4jException
 */
void preProcessMessage(MessageProcessingContext processingContext,
                       SyncML message                            )
throws Sync4jException {

    if (log.isTraceEnabled()) {
        log.trace("MotorolaX.preProcessMessage(...)");
    }

    // This map contains the three lists of items separated based on their type
    PIMItemsHandler pimItemsHandler = new PIMItemsHandler();
    Map mapItems =
        pimItemsHandler.extractIncomingPIMItems(processingContext, message);
    processPIMItems(mapItems, pimItemsHandler);

    throw new StopProcessingException("Motorola Synclet finished");
}

/**
 * Processes incoming items.
 *
 * @param mapItems the map that contains the three lists of items separated
 *                 based on their type
 * @param pimItemsHandler the object to handle the large object
 *
 */
void processPIMItems(Map mapItems, PIMItemsHandler pimItemsHandler) {

    //
    // Cycle on vcard list
    //
    for (i: (List)mapItems.get(PIMItemsHandler.KEY_VCARD)) {
        preProcessContact(i);
        pimItemsHandler.fixLargeObjectSize(i);
    }

    //
    // Cycle on vevent list
    //
    for (i: (List)mapItems.get(PIMItemsHandler.KEY_VEVENT)) {
        preProcessEvent(i);
        pimItemsHandler.fixLargeObjectSize(i);
    }
}

/**
 * Processes incoming contacts.
 * Handles the fax numbers, the phone numbers, the email internet, the name and
 * the home address.
 *
 * @param i the Item to process
 */
void preProcessContact(Item i) {
    data = i.data.data;

    // checks if the data is already passed through this synclet
    if(data.indexOf("\r\nTEL;WORK;PREF:") == -1){
        data = replaceFaxNumber (data);
        data = replaceMainPhoneNumber (data);
        data = checkMail(data);
        data = checkName(data);
        data = checkHomeAddress(data);

        i.data.setData(data);
    }
}

/**
 * Replaces the first TEL;FAX: with tokens TEL;FAX;HOME: and the second one
 * with TEL;FAX;WORK: so the numbers are stored like Home Fax Number and
 * Business Fax Number.
 *
 * @param data the data to process
 *
 * @return the modified data
 */
String replaceFaxNumber(String data) {
    int faxPosition = data.indexOf("TEL;FAX:");
    if (faxPosition != -1) {
        data = data.substring (0, faxPosition)                +
            "TEL;FAX;HOME:"                                   +
            data.substring (faxPosition + "TEL;FAX:".length());
    }
    faxPosition = data.indexOf("TEL;FAX:");
    if (faxPosition != -1) {
        data = data.substring (0, faxPosition)                +
            "TEL;FAX;WORK:"                                   +
            data.substring (faxPosition + "TEL;FAX:".length());
    }
    return data;
}

/**
 * Replaces the first TEL;PREF;VOICE: with tokens TEL;VOICE: the second remains
 * the same, the third is replaced with TEL;WORK;PREF:
 *
 * @param data the data to process
 *
 * @return the modified data
 */
String replaceMainPhoneNumber(String data) {

	// finds and replaces first TEL;PREF;VOICE: field
    int mainPosition = data.indexOf("TEL;PREF;VOICE:");
    if (mainPosition != -1) {
        data = data.substring (0, mainPosition)                       +
               "TEL;VOICE:"                                           +
               data.substring (mainPosition + "TEL;PREF;VOICE:".length());
    }

    // finds second TEL;PREF;VOICE: field
    mainPosition = data.indexOf("TEL;PREF;VOICE:");

    // finds and replaces third TEL;PREF;VOICE: field
    if (mainPosition != -1) {

        if(data.substring(mainPosition + 1).indexOf("TEL;PREF;VOICE:") != -1) {

            mainPosition = mainPosition
                         + data.substring(mainPosition + 1)
                               .indexOf("TEL;PREF;VOICE:")
                         + 1;

            data = data.substring(0, mainPosition)
                 + "TEL;WORK;PREF:"
                 + data.substring(mainPosition + "TEL;PREF;VOICE:".length());
            }
        }

    return data;
}

/**
 * Checks if the value of the field EMAIL;INTERNET is 'null'. If so the value is
 * deleted.
 *
 * @param data the data to process
 *
 * @return the modified data
 */
String checkMail(String data) {

	int index = data.indexOf("EMAIL;INTERNET:null");
    if (index != -1) {
        data = data.substring(0, index + 15)
             + data.substring(index + 19, data.length());
    }
    return data;
}

/**
 * Checks if the value of the field N has only one value or more separeted by
 * semicolons. If there are no semicolon, they are added.
 *
 * @param data the data to process
 *
 * @return the modified data
 */
String checkName(String data) {

    // creates a string containing only the N field
    int indexStart = data.indexOf("\r\nN:");

    if(indexStart != -1){
        int indexEnd = data.indexOf("\r\n", indexStart + 2);
        String name  = data.substring(indexStart, indexEnd);

        if(name.indexOf(";") == -1){
            data = data.substring(0, indexEnd) + ";;;;"
                 + data.substring(indexEnd, data.length());
        }
    }

    return data;
}

/**
 * Checks if there is the field ADR;HOME. If not then add it with empty value
 * otherwise switch second and third value.
 *
 * @param data the data to process
 *
 * @return the modified data
 */
String checkHomeAddress(String data) {


    if (data.indexOf("ADR;HOME") == -1) {

		// ADR;HOME field is not present so adds it with empty values
        int endPos = data.indexOf("END:VCARD");
        data = data.substring (0, endPos);
        StringBuffer missing = new StringBuffer(data);
        missing.append("ADR;HOME:;;;;;;\r\n");
        missing.append("END:VCARD\r\n");
        data = missing.toString();

    } else {

        int index = data.indexOf("\r\nADR;HOME:");

        // gets the value of ADR;HOME field
        String value = data.substring(data.indexOf(":", index) + 1,
                                      data.indexOf("\r\n", index + 1));

        int commaIndex = value.indexOf(";");

        // gets the second parameter
        int startStreet1 = commaIndex + 1;
        int endStreet1   = value.indexOf(";", commaIndex + 1 );

        String street1 = value.substring(startStreet1, endStreet1);

        // gets the third parameter
        int startStreet2 = value.indexOf(";", endStreet1) + 1;
        int endStreet2   = value.indexOf(";",
                                         value.indexOf(";", endStreet1) + 1);

        String street2 = value.substring(startStreet2, endStreet2);

        // builds the new data switching the two parameters
        data = data.substring(0, data.indexOf(";", index + 8 ) + 1) +
               street2 + ";" + street1 +
               data.substring(data.indexOf(street1 + ";" + street2) +
                              (street1 + ";" + street2).length());
	}

    return data;
}

/**
 * Processes incoming events.
 *
 * Check if there is the field AALARM: if not it will be add with empty value.
 *
 * @param data the data to process
 *
 * @return the modified data
 */
void preProcessEvent(Item i) {

    data = i.data.data;

    data = data.replace("CHARSET= UTF-8:","CHARSET=UTF-8:");

    int endPos = data.indexOf("END:VEVENT");
    data = data.substring (0, endPos);
    StringBuffer missing = new StringBuffer(data);

    if (data.indexOf("\r\nAALARM") == -1) {
        missing.append("AALARM:;;;").append("\r\n");
    }

    missing.append("END:VEVENT\r\nEND:VCALENDAR\r\n");
    i.data.setData(missing.toString());
}

/**
 * Called initializing the synclet
 */
void init() {
    // do nothing
}
