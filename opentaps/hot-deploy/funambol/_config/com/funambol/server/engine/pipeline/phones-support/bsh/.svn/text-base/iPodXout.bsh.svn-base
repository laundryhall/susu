/*
 * Copyright (C) 2007 Funambol
 *
 * Opentaps is free software: you can redistribute it and/or modify it
 * under the terms of the GNU Affero General Public License as published
 * by the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Opentaps is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with Opentaps.  If not, see <http://www.gnu.org/licenses/>.
 */

import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import org.apache.commons.lang.StringUtils;

import com.funambol.framework.core.*;
import com.funambol.framework.core.Sync4jException;
import com.funambol.framework.engine.pipeline.OutputMessageProcessor;
import com.funambol.framework.engine.pipeline.MessageProcessingContext;
import com.funambol.framework.logging.FunambolLogger;
import com.funambol.framework.logging.FunambolLoggerFactory;

import com.funambol.foundation.synclet.PIMItemsHandler;

/**
 * Contacts:
 * =========
 * Processes the outgoing vcard items and removes the empty tokens.
 * This is done because iPod shows also the empty fields.
 *
 * @version $Id: iPodXout.bsh,v 1.3 2007/04/13 09:11:24 luigiafassina Exp $
 */

// ---------------------------------------------------------------- Private data
private final FunambolLogger log =
    FunambolLoggerFactory.getLogger("engine.pipeline");

private List emptyTokens = null;

// ------------------------------------------------------ Synclet implementation

/**
 * Process and manipulate the output message.
 *
 * @param processingContext the message processing context
 * @param message the message to be processed
 *
 * @throws Sync4jException
 */
void postProcessMessage(MessageProcessingContext processingContext,
                        SyncML message                            )
throws Sync4jException {

    if (log.isTraceEnabled()) {
        log.trace("iPodXout.postProcessMessage(...)");
    }

    // This map contains the three lists of items separated based on their type
    PIMItemsHandler pimItemsHandler = new PIMItemsHandler();
    Map mapItems = pimItemsHandler.extractOutgoingPIMItems(message);
    processPIMItems(mapItems);
}

/**
 * Processes outgoing items.
 *
 * @param mapItems the map that contains the three lists of items separated
 *                 based on their type
 *
 */
void processPIMItems(Map mapItems) {

    //
    // Cycle on vcard list
    //
    for (i: (List)mapItems.get(PIMItemsHandler.KEY_VCARD)) {
        postProcessContacts(i);
    }
}

/**
 * Processes outgoing contacts.
 * Removes the tokens without value.
 *
 * @param i the item to be processed
 *
 */
void postProcessContacts(Item i) {

    data = i.data.data;
    Iterator it    = emptyTokens.iterator();
    String   token = null                  ;

    while (it.hasNext()) {
        token = (String)it.next();

        if (data.indexOf(token) != -1) {
            data = StringUtils.replace(data, token, "");
        }
    }

    i.data.data = data;
}

/**
 * Initializes array of vcard properties.
 */
void init() {
    emptyTokens = new ArrayList();

    emptyTokens.add("N:;;;;\r\n"         );
    emptyTokens.add("FN:\r\n"            );
    emptyTokens.add("ADR:;;;;;;\r\n"     );
    emptyTokens.add("ADR;HOME:;;;;;;\r\n");
    emptyTokens.add("ADR;WORK:;;;;;;\r\n");
    emptyTokens.add("TITLE:\r\n"         );
    emptyTokens.add("ORG:;\r\n"          );
    emptyTokens.add("NOTE:\r\n"          );
    emptyTokens.add("URL:\r\n"           );
    emptyTokens.add("BDAY:\r\n"          );
    emptyTokens.add("ROLE:\r\n"          );
    emptyTokens.add("TEL;VOICE;HOME:\r\n");
    emptyTokens.add("TEL;VOICE;WORK:\r\n");
    emptyTokens.add("TEL;VOICE:\r\n"     );
    emptyTokens.add("TEL;CELL:\r\n"      );
    emptyTokens.add("TEL;FAX;HOME:\r\n"  );
    emptyTokens.add("TEL;FAX;WORK:\r\n"  );
    emptyTokens.add("TEL;CAR;VOICE:\r\n" );
    emptyTokens.add("TEL;PAGER:\r\n"     );
    emptyTokens.add("EMAIL;INTERNET:\r\n");
    emptyTokens.add("TEL;PREF;VOICE:\r\n");
    emptyTokens.add("TEL;WORK;PREF:\r\n" );
}
