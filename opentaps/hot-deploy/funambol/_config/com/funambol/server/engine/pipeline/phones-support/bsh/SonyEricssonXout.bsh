/*
 * Copyright (C) 2007 Funambol
 *
 * Opentaps is free software: you can redistribute it and/or modify it
 * under the terms of the GNU Affero General Public License as published
 * by the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Opentaps is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with Opentaps.  If not, see <http://www.gnu.org/licenses/>.
 */

import java.util.List;
import java.util.Map;

import com.funambol.framework.core.*;
import com.funambol.framework.core.Sync4jException;
import com.funambol.framework.engine.pipeline.OutputMessageProcessor;
import com.funambol.framework.engine.pipeline.MessageProcessingContext;
import com.funambol.framework.logging.FunambolLogger;
import com.funambol.framework.logging.FunambolLoggerFactory;

import com.funambol.foundation.synclet.PIMItemsHandler;

/**
 * Contacts:
 * =========
 * Removes the field TEL;PREF;VOICE: because it is not correctly handled by the
 * phone.
 *
 * @version $Id: SonyEricssonXout.bsh,v 1.3 2007/04/13 09:11:24 luigiafassina Exp $
 */

// ---------------------------------------------------------------- Private data
private final FunambolLogger log =
    FunambolLoggerFactory.getLogger("engine.pipeline");

// ------------------------------------------------------ Synclet implementation

/**
 * Process and manipulate the output message.
 *
 * @param processingContext the message processing context
 * @param message the message to be processed
 *
 * @throws Sync4jException
 */
void postProcessMessage(MessageProcessingContext processingContext,
                        SyncML message                            )
throws Sync4jException {
    if (log.isTraceEnabled()) {
        log.trace("SonyEricssonXout.postProcessMessage(...)");
    }

    // This map contains the three lists of items separated based on their type
    PIMItemsHandler pimItemsHandler = new PIMItemsHandler();
    Map mapItems = pimItemsHandler.extractOutgoingPIMItems(message);
    processPIMItems(mapItems);
}

/**
 * Processes outgoing items.
 *
 * @param mapItems the map that contains the three lists of items separated
 *                 based on their type
 *
 */
void processPIMItems(Map mapItems) {

    //
    // Cycle on vcard list
    //
    for (i: (List)mapItems.get(PIMItemsHandler.KEY_VCARD)) {
        postProcessContacts(i);
    }
}

/**
 * Processes outgoing contacts.
 *
 * Removes the field TEL;PREF;VOICE:
 *
 * @param i the item content
 *
 */
void postProcessContacts(Item i) {
    data = checkPhonePrefField(i.data.data);
    i.data.setData(data);
}

/**
 * Removes in the contact the field TEL;PREF;VOICE: because it is not correctly
 * handled by the phone.
 *
 * @param data the contact item
 *
 * @return the modified data
 */
String checkPhonePrefField(String data){

    int beginField, endField;
    
    beginField = data.indexOf("\r\nTEL;PREF;VOICE:");
    if(beginField != -1){
        endField = data.substring(beginField +1).indexOf("\r\n");
        data = data.substring(0, beginField) +
               data.substring(beginField + endField + 2);
    }

    return data;
}

/**
 * Called initializing the synclet
 */
void init() {
    // do nothing
}
