/*
 * Copyright (c) Open Source Strategies, Inc.
 * 
 * Opentaps is free software: you can redistribute it and/or modify it
 * under the terms of the GNU Affero General Public License as published
 * by the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Opentaps is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with Opentaps.  If not, see <http://www.gnu.org/licenses/>.
 */
/* Copyright (c) Open Source Strategies, Inc. */
 
import org.ofbiz.base.util.UtilMisc;
import org.ofbiz.entity.condition.*;
import org.opentaps.common.party.ViewPrefWorker;
import com.opensourcestrategies.crmsfa.party.PartyHelper;

/* returns a list iterator of active parties based on the PartyFromSummaryByRelationship entity and 
whatever parameters are supplied.  puts the list iterator into the context for form widgets to use.  
can be reused to find Accounts, Contacts, Leads, Team members, etc. etc. */

/* note that performFind can be included in a form-widget, but this shareable BSH is better for reuse and
respects the separation of view and data preparation pattern.
   we later moved from using performFind service to prepareFind to get our conditions and then did a find
because we had to use EntityFindOptions to specify "distinct" */

// determine the user's prefered find using findActivePartiesViewPrefTypeId (optional feature)
viewPrefConditions = null;
userLogin = request.getAttribute("userLogin");
findActivePartiesViewPrefTypeId = context.get("findActivePartiesViewPrefTypeId");
if (findActivePartiesViewPrefTypeId != null) {
    showPartyPref = ViewPrefWorker.getViewPreferenceString(userLogin, findActivePartiesViewPrefTypeId);

    // find parties which belong to me (default is to find team parties)
    if ("MY_VALUES".equals(showPartyPref)) {
        viewPrefConditions = new EntityExpr("partyRelationshipTypeId", EntityOperator.IN, UtilMisc.toList("RESPONSIBLE_FOR"));
        context.put(findActivePartiesViewPrefTypeId, "MY_VALUES");
    } else {
        viewPrefConditions = new EntityExpr("partyRelationshipTypeId", EntityOperator.IN, UtilMisc.toList("RESPONSIBLE_FOR", "ASSIGNED_TO"));
        context.put(findActivePartiesViewPrefTypeId, "TEAM_VALUES");
    }
}

listIt = PartyHelper.findActiveClientParties(delegator, dispatcher, parameters, viewPrefConditions);

/* the name of the list iterator to use is put in the parameters, because the various forms have different list iterator names so they can be
 reused on their own or as part of other screens without confusion */
if (parameters.get("listIteratorNameToUse") == null) {
    context.put("listIt", listIt); 
} else {
    context.put(parameters.get("listIteratorNameToUse"), listIt);
}
