/*
 * Copyright (c) Open Source Strategies, Inc.
 * 
 * Opentaps is free software: you can redistribute it and/or modify it
 * under the terms of the GNU Affero General Public License as published
 * by the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Opentaps is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with Opentaps.  If not, see <http://www.gnu.org/licenses/>.
 */

import org.ofbiz.base.util.*;
import org.ofbiz.entity.util.EntityUtil;
import com.opensourcestrategies.crmsfa.security.CrmsfaSecurity;
import com.opensourcestrategies.crmsfa.party.PartyHelper;
import com.opensourcestrategies.crmsfa.teams.TeamHelper;

partyId = parameters.get("partyId");

// make sure that the partyId is actually an ACCOUNT_TEAM before trying to display it as once
delegator = request.getAttribute("delegator");
validRoleTypeId = PartyHelper.getFirstValidRoleTypeId(partyId, UtilMisc.toList("ACCOUNT_TEAM"), delegator);

// if not, return right away (otherwise we get spaghetti code)
if ((validRoleTypeId == null) || (!validRoleTypeId.equals("ACCOUNT_TEAM")))  {
    context.put("validView", false);
    return;
}

// get the team
team = delegator.findByPrimaryKey("PartyAndGroup", UtilMisc.toMap("partyId", partyId));
context.put("team", team);

// check if deactivated
if ("PARTY_DISABLED".equals(team.get("statusId"))) {
    context.put("validView", true);
    context.put("teamDeactivated", true);
    return;
}

// get the team members
teamMembers = TeamHelper.getActiveTeamMembers(partyId, delegator);
if (UtilValidate.isNotEmpty(teamMembers)) {
    for (teamMember : teamMembers) {
        val = EntityUtil.getFirst(TeamHelper.findActiveAccountOrTeamRelationships(partyId, "ACCOUNT_TEAM", teamMember{"partyId"}, delegator)); 
        if (UtilValidate.isNotEmpty(val)) teamMember.set("securityGroupId", val{"securityGroupId"}); 
    }
}
context.put("accountTeamMembers", teamMembers);

// permission to change team member roles
hasTeamUpdatePermission = false; // this needs to be set so that a form-widget can test it with "use-when"
if (CrmsfaSecurity.hasPartyRelationSecurity(request.getAttribute("security"), "CRMSFA_TEAM", "_UPDATE", request.getAttribute("userLogin"), partyId)) {
    hasTeamUpdatePermission = true;
}
context.put("hasTeamUpdatePermission", hasTeamUpdatePermission);

// permission to remove team members
if (CrmsfaSecurity.hasPartyRelationSecurity(request.getAttribute("security"), "CRMSFA_TEAM", "_REMOVE", request.getAttribute("userLogin"), partyId)) {
    context.put("hasTeamRemovePermission", true);
}

// permission to assign team members
if (CrmsfaSecurity.hasPartyRelationSecurity(request.getAttribute("security"), "CRMSFA_TEAM", "_ASSIGN", request.getAttribute("userLogin"), partyId)) {
    context.put("hasTeamAssignPermission", true);
}

// permission to deactivate the team
if (CrmsfaSecurity.hasPartyRelationSecurity(request.getAttribute("security"), "CRMSFA_TEAM", "_DEACTIVATE", request.getAttribute("userLogin"), partyId)) {
    context.put("hasTeamDeactivatePermission", true);
}
